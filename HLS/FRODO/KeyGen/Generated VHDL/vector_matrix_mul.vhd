-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity vector_matrix_mul is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_1_ce0 : OUT STD_LOGIC;
    A_1_we0 : OUT STD_LOGIC;
    A_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_1_ce1 : OUT STD_LOGIC;
    A_1_we1 : OUT STD_LOGIC;
    A_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_2_ce0 : OUT STD_LOGIC;
    A_2_we0 : OUT STD_LOGIC;
    A_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    A_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    A_2_ce1 : OUT STD_LOGIC;
    A_2_we1 : OUT STD_LOGIC;
    A_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    seed_A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    seed_A_ce0 : OUT STD_LOGIC;
    seed_A_we0 : OUT STD_LOGIC;
    seed_A_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    seed_A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    seed_A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    seed_A_ce1 : OUT STD_LOGIC;
    seed_A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    offset : IN STD_LOGIC_VECTOR (3 downto 0);
    pregen : IN STD_LOGIC_VECTOR (0 downto 0);
    begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of vector_matrix_mul is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_27F : STD_LOGIC_VECTOR (9 downto 0) := "1001111111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal begin_read_read_fu_112_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal pregen_read_read_fu_118_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal offset_cast_fu_254_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal offset_cast_reg_322 : STD_LOGIC_VECTOR (7 downto 0);
    signal seed_A_addr_reg_327 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln270_fu_258_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln270_reg_332 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_shake128_10240_fu_184_ap_ready : STD_LOGIC;
    signal grp_shake128_10240_fu_184_ap_done : STD_LOGIC;
    signal ap_block_state3_on_subcall_done : BOOLEAN;
    signal trunc_ln270_fu_261_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln270_reg_337 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal i_fu_271_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_reg_344 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_10240_fu_184_ap_start : STD_LOGIC;
    signal grp_shake128_10240_fu_184_ap_idle : STD_LOGIC;
    signal grp_shake128_10240_fu_184_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_10240_fu_184_output_r_ce0 : STD_LOGIC;
    signal grp_shake128_10240_fu_184_output_r_we0 : STD_LOGIC;
    signal grp_shake128_10240_fu_184_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10240_fu_184_output_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake128_10240_fu_184_output_r_ce1 : STD_LOGIC;
    signal grp_shake128_10240_fu_184_output_r_we1 : STD_LOGIC;
    signal grp_shake128_10240_fu_184_output_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake128_10240_fu_184_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10240_fu_184_input_r_ce0 : STD_LOGIC;
    signal grp_shake128_10240_fu_184_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake128_10240_fu_184_input_r_ce1 : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_ap_start : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_ap_done : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_ap_idle : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_ap_ready : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_a_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_vector_mul_fu_243_a_ce0 : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_a_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_vector_mul_fu_243_s_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_vector_mul_fu_243_s_ce0 : STD_LOGIC;
    signal grp_vector_vector_mul_fu_243_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_162 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_state6_on_subcall_done : BOOLEAN;
    signal grp_shake128_10240_fu_184_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal grp_vector_vector_mul_fu_243_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln290_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln270_fu_265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln273_fu_291_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln273_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln273_fu_283_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln_fu_296_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln290_fu_304_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component shake128_10240 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce1 : OUT STD_LOGIC;
        output_r_we1 : OUT STD_LOGIC;
        output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component vector_vector_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        a_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        a_ce0 : OUT STD_LOGIC;
        a_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        s_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        s_ce0 : OUT STD_LOGIC;
        s_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_shake128_10240_fu_184 : component shake128_10240
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake128_10240_fu_184_ap_start,
        ap_done => grp_shake128_10240_fu_184_ap_done,
        ap_idle => grp_shake128_10240_fu_184_ap_idle,
        ap_ready => grp_shake128_10240_fu_184_ap_ready,
        output_r_address0 => grp_shake128_10240_fu_184_output_r_address0,
        output_r_ce0 => grp_shake128_10240_fu_184_output_r_ce0,
        output_r_we0 => grp_shake128_10240_fu_184_output_r_we0,
        output_r_d0 => grp_shake128_10240_fu_184_output_r_d0,
        output_r_address1 => grp_shake128_10240_fu_184_output_r_address1,
        output_r_ce1 => grp_shake128_10240_fu_184_output_r_ce1,
        output_r_we1 => grp_shake128_10240_fu_184_output_r_we1,
        output_r_d1 => grp_shake128_10240_fu_184_output_r_d1,
        input_r_address0 => grp_shake128_10240_fu_184_input_r_address0,
        input_r_ce0 => grp_shake128_10240_fu_184_input_r_ce0,
        input_r_q0 => seed_A_q0,
        input_r_address1 => grp_shake128_10240_fu_184_input_r_address1,
        input_r_ce1 => grp_shake128_10240_fu_184_input_r_ce1,
        input_r_q1 => seed_A_q1);

    grp_vector_vector_mul_fu_243 : component vector_vector_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_vector_mul_fu_243_ap_start,
        ap_done => grp_vector_vector_mul_fu_243_ap_done,
        ap_idle => grp_vector_vector_mul_fu_243_ap_idle,
        ap_ready => grp_vector_vector_mul_fu_243_ap_ready,
        a_address0 => grp_vector_vector_mul_fu_243_a_address0,
        a_ce0 => grp_vector_vector_mul_fu_243_a_ce0,
        a_q0 => grp_vector_vector_mul_fu_243_a_q0,
        s_address0 => grp_vector_vector_mul_fu_243_s_address0,
        s_ce0 => grp_vector_vector_mul_fu_243_s_ce0,
        s_q0 => S_q0,
        ap_return => grp_vector_vector_mul_fu_243_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_shake128_10240_fu_184_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake128_10240_fu_184_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_shake128_10240_fu_184_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake128_10240_fu_184_ap_ready = ap_const_logic_1)) then 
                    grp_shake128_10240_fu_184_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_vector_mul_fu_243_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_vector_mul_fu_243_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                    grp_vector_vector_mul_fu_243_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_vector_mul_fu_243_ap_ready = ap_const_logic_1)) then 
                    grp_vector_vector_mul_fu_243_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
                i_0_reg_162 <= i_reg_344;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then 
                i_0_reg_162 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                i_reg_344 <= i_fu_271_p2;
                trunc_ln270_reg_337 <= trunc_ln270_fu_261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                offset_cast_reg_322 <= offset_cast_fu_254_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    zext_ln270_reg_332(7 downto 0) <= zext_ln270_fu_258_p1(7 downto 0);
            end if;
        end if;
    end process;
    zext_ln270_reg_332(12 downto 8) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, pregen, begin_read_read_fu_112_p2, pregen_read_read_fu_118_p2, ap_CS_fsm_state3, ap_block_state3_on_subcall_done, trunc_ln270_fu_261_p1, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_block_state6_on_subcall_done, icmp_ln270_fu_265_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((pregen_read_read_fu_118_p2 = ap_const_lv1_0) and (begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                elsif (((pregen = ap_const_lv1_1) and (begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((begin_read_read_fu_112_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_boolean_0 = ap_block_state3_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln270_fu_265_p2 = ap_const_lv1_1) or (begin_read_read_fu_112_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((trunc_ln270_fu_261_p1 = ap_const_lv1_1) and (begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln270_fu_265_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_1_address0_assign_proc : process(trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_address0, grp_vector_vector_mul_fu_243_a_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((trunc_ln270_reg_337 = ap_const_lv1_1)) then 
                A_1_address0 <= grp_vector_vector_mul_fu_243_a_address0;
            elsif ((trunc_ln270_reg_337 = ap_const_lv1_0)) then 
                A_1_address0 <= grp_shake128_10240_fu_184_output_r_address0;
            else 
                A_1_address0 <= "XXXXXXXXXX";
            end if;
        else 
            A_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_1_address1 <= grp_shake128_10240_fu_184_output_r_address1;

    A_1_ce0_assign_proc : process(trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_ce0, grp_vector_vector_mul_fu_243_a_ce0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((trunc_ln270_reg_337 = ap_const_lv1_1)) then 
                A_1_ce0 <= grp_vector_vector_mul_fu_243_a_ce0;
            elsif ((trunc_ln270_reg_337 = ap_const_lv1_0)) then 
                A_1_ce0 <= grp_shake128_10240_fu_184_output_r_ce0;
            else 
                A_1_ce0 <= ap_const_logic_0;
            end if;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_ce1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0))) then 
            A_1_ce1 <= grp_shake128_10240_fu_184_output_r_ce1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_1_d0 <= grp_shake128_10240_fu_184_output_r_d0;
    A_1_d1 <= grp_shake128_10240_fu_184_output_r_d1;

    A_1_we0_assign_proc : process(trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_we0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0))) then 
            A_1_we0 <= grp_shake128_10240_fu_184_output_r_we0;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we1_assign_proc : process(trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_we1, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0))) then 
            A_1_we1 <= grp_shake128_10240_fu_184_output_r_we1;
        else 
            A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_address0, grp_vector_vector_mul_fu_243_a_address0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0))) then 
            A_2_address0 <= grp_vector_vector_mul_fu_243_a_address0;
        elsif ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            A_2_address0 <= grp_shake128_10240_fu_184_output_r_address0;
        else 
            A_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    A_2_address1 <= grp_shake128_10240_fu_184_output_r_address1;

    A_2_ce0_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_ce0, grp_vector_vector_mul_fu_243_a_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0))) then 
            A_2_ce0 <= grp_vector_vector_mul_fu_243_a_ce0;
        elsif ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            A_2_ce0 <= grp_shake128_10240_fu_184_output_r_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce1_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_ce1, ap_CS_fsm_state6)
    begin
        if ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            A_2_ce1 <= grp_shake128_10240_fu_184_output_r_ce1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    A_2_d0 <= grp_shake128_10240_fu_184_output_r_d0;
    A_2_d1 <= grp_shake128_10240_fu_184_output_r_d1;

    A_2_we0_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_we0, ap_CS_fsm_state6)
    begin
        if ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            A_2_we0 <= grp_shake128_10240_fu_184_output_r_we0;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we1_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_output_r_we1, ap_CS_fsm_state6)
    begin
        if ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)))) then 
            A_2_we1 <= grp_shake128_10240_fu_184_output_r_we1;
        else 
            A_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    B_address1 <= zext_ln290_fu_309_p1(13 - 1 downto 0);

    B_ce1_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    B_d1 <= grp_vector_vector_mul_fu_243_ap_return;

    B_we1_assign_proc : process(ap_CS_fsm_state6, ap_block_state6_on_subcall_done)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_boolean_0 = ap_block_state6_on_subcall_done))) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= grp_vector_vector_mul_fu_243_s_address0;

    S_ce0_assign_proc : process(trunc_ln270_reg_337, grp_vector_vector_mul_fu_243_s_ce0, ap_CS_fsm_state6)
    begin
        if ((((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0)))) then 
            S_ce0 <= grp_vector_vector_mul_fu_243_s_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln290_fu_304_p2 <= std_logic_vector(unsigned(zext_ln270_reg_332) + unsigned(shl_ln_fu_296_p3));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_block_state3_on_subcall_done_assign_proc : process(pregen, grp_shake128_10240_fu_184_ap_done)
    begin
                ap_block_state3_on_subcall_done <= ((pregen = ap_const_lv1_1) and (grp_shake128_10240_fu_184_ap_done = ap_const_logic_0));
    end process;


    ap_block_state6_on_subcall_done_assign_proc : process(grp_shake128_10240_fu_184_ap_done, trunc_ln270_reg_337, grp_vector_vector_mul_fu_243_ap_done)
    begin
                ap_block_state6_on_subcall_done <= (((trunc_ln270_reg_337 = ap_const_lv1_1) and (grp_shake128_10240_fu_184_ap_done = ap_const_logic_0)) or ((grp_shake128_10240_fu_184_ap_done = ap_const_logic_0) and (trunc_ln270_reg_337 = ap_const_lv1_0)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (grp_vector_vector_mul_fu_243_ap_done = ap_const_logic_0)) or ((grp_vector_vector_mul_fu_243_ap_done = ap_const_logic_0) and (trunc_ln270_reg_337 = ap_const_lv1_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, begin_read_read_fu_112_p2, ap_CS_fsm_state4, icmp_ln270_fu_265_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln270_fu_265_p2 = ap_const_lv1_1) or (begin_read_read_fu_112_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(begin_read_read_fu_112_p2, ap_CS_fsm_state4, icmp_ln270_fu_265_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and ((icmp_ln270_fu_265_p2 = ap_const_lv1_1) or (begin_read_read_fu_112_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    begin_read_read_fu_112_p2 <= begin_r;
    grp_shake128_10240_fu_184_ap_start <= grp_shake128_10240_fu_184_ap_start_reg;

    grp_vector_vector_mul_fu_243_a_q0_assign_proc : process(A_1_q0, A_2_q0, trunc_ln270_reg_337, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
            if ((trunc_ln270_reg_337 = ap_const_lv1_1)) then 
                grp_vector_vector_mul_fu_243_a_q0 <= A_1_q0;
            elsif ((trunc_ln270_reg_337 = ap_const_lv1_0)) then 
                grp_vector_vector_mul_fu_243_a_q0 <= A_2_q0;
            else 
                grp_vector_vector_mul_fu_243_a_q0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_vector_vector_mul_fu_243_a_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vector_vector_mul_fu_243_ap_start <= grp_vector_vector_mul_fu_243_ap_start_reg;
    i_fu_271_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(i_0_reg_162));
    icmp_ln270_fu_265_p2 <= "1" when (i_0_reg_162 = ap_const_lv10_280) else "0";
    icmp_ln273_fu_277_p2 <= "1" when (i_0_reg_162 = ap_const_lv10_27F) else "0";
        offset_cast_fu_254_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(offset),8));

    pregen_read_read_fu_118_p2 <= pregen;
    seed_A_addr_reg_327 <= ap_const_lv64_0(4 - 1 downto 0);

    seed_A_address0_assign_proc : process(ap_CS_fsm_state1, pregen, seed_A_addr_reg_327, ap_CS_fsm_state3, trunc_ln270_reg_337, ap_CS_fsm_state4, grp_shake128_10240_fu_184_input_r_address0, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_address0 <= seed_A_addr_reg_327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            seed_A_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0)))) then 
            seed_A_address0 <= grp_shake128_10240_fu_184_input_r_address0;
        else 
            seed_A_address0 <= "XXXX";
        end if; 
    end process;

    seed_A_address1 <= grp_shake128_10240_fu_184_input_r_address1;

    seed_A_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, ap_CS_fsm_state4, grp_shake128_10240_fu_184_input_r_ce0, ap_CS_fsm_state6)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            seed_A_ce0 <= ap_const_logic_1;
        elsif ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0)))) then 
            seed_A_ce0 <= grp_shake128_10240_fu_184_input_r_ce0;
        else 
            seed_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_ce1_assign_proc : process(pregen, ap_CS_fsm_state3, trunc_ln270_reg_337, grp_shake128_10240_fu_184_input_r_ce1, ap_CS_fsm_state6)
    begin
        if ((((pregen = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((trunc_ln270_reg_337 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state6)) or ((ap_const_logic_1 = ap_CS_fsm_state6) and (trunc_ln270_reg_337 = ap_const_lv1_0)))) then 
            seed_A_ce1 <= grp_shake128_10240_fu_184_input_r_ce1;
        else 
            seed_A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state4, zext_ln273_fu_291_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_A_d0 <= zext_ln273_fu_291_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            seed_A_d0 <= ap_const_lv16_0;
        else 
            seed_A_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, pregen, begin_read_read_fu_112_p2, ap_CS_fsm_state4, icmp_ln270_fu_265_p2)
    begin
        if ((((pregen = ap_const_lv1_1) and (begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)) or ((begin_read_read_fu_112_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln270_fu_265_p2 = ap_const_lv1_0)))) then 
            seed_A_we0 <= ap_const_logic_1;
        else 
            seed_A_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln273_fu_283_p3 <= 
        ap_const_lv10_0 when (icmp_ln273_fu_277_p2(0) = '1') else 
        i_fu_271_p2;
    shl_ln_fu_296_p3 <= (i_0_reg_162 & ap_const_lv3_0);
    trunc_ln270_fu_261_p1 <= i_0_reg_162(1 - 1 downto 0);
    zext_ln270_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(offset_cast_reg_322),13));
    zext_ln273_fu_291_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln273_fu_283_p3),16));
    zext_ln290_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln290_fu_304_p2),64));
end behav;
