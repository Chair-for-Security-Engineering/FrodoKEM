-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake128_10240 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    output_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    output_r_ce1 : OUT STD_LOGIC;
    output_r_we1 : OUT STD_LOGIC;
    output_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of shake128_10240 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv8_1F : STD_LOGIC_VECTOR (7 downto 0) := "00011111";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv10_54 : STD_LOGIC_VECTOR (9 downto 0) := "0001010100";
    constant ap_const_lv7_2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_const_lv7_3 : STD_LOGIC_VECTOR (6 downto 0) := "0000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal s_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal s_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal reg_438 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal reg_442 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal i_fu_638_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_935 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_fu_650_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_943 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal shl_ln_fu_766_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_948 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln1472_fu_644_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_reg_954 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Result_8_reg_959 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln1483_fu_841_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_ap_done : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_0_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_0_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_5_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_5_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_10_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_10_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_15_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_15_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_20_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_20_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_1_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_1_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_6_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_6_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_11_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_11_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_16_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_16_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_21_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_21_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_2_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_2_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_7_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_7_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_12_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_12_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_17_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_17_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_22_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_22_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_3_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_3_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_8_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_8_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_13_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_13_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_18_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_18_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_23_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_23_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_4_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_4_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_9_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_9_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_14_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_14_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_19_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_19_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_2_fu_384_s_24_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_s_24_o_ap_vld : STD_LOGIC;
    signal i_1_reg_303 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal p_0_rec_reg_314 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_phi_mux_j_0_phi_fu_330_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_0_reg_326 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_phi_mux_p_Val2_s_phi_fu_340_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg : STD_LOGIC := '0';
    signal icmp_ln1469_fu_632_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln1474_1_fu_784_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1475_1_fu_816_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1476_1_fu_862_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln1477_1_fu_882_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_578_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_4_fu_596_p5 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_5_fu_622_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1474_fu_761_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_fu_614_p3 : STD_LOGIC_VECTOR (23 downto 0);
    signal zext_ln1474_fu_774_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1474_fu_778_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1475_fu_800_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1475_fu_806_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1475_fu_810_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1476_fu_847_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1476_fu_852_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1476_fu_856_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal or_ln1477_fu_867_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1477_fu_872_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln1477_fu_876_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_condition_663 : BOOLEAN;

    component KeccakF1600_StatePer_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        s_0_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_0_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_0_o_ap_vld : OUT STD_LOGIC;
        s_5_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_5_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_5_o_ap_vld : OUT STD_LOGIC;
        s_10_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_10_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_10_o_ap_vld : OUT STD_LOGIC;
        s_15_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_15_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_15_o_ap_vld : OUT STD_LOGIC;
        s_20_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_20_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_20_o_ap_vld : OUT STD_LOGIC;
        s_1_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_1_o_ap_vld : OUT STD_LOGIC;
        s_6_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_6_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_6_o_ap_vld : OUT STD_LOGIC;
        s_11_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_11_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_11_o_ap_vld : OUT STD_LOGIC;
        s_16_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_16_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_16_o_ap_vld : OUT STD_LOGIC;
        s_21_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_21_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_21_o_ap_vld : OUT STD_LOGIC;
        s_2_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_2_o_ap_vld : OUT STD_LOGIC;
        s_7_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_7_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_7_o_ap_vld : OUT STD_LOGIC;
        s_12_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_12_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_12_o_ap_vld : OUT STD_LOGIC;
        s_17_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_17_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_17_o_ap_vld : OUT STD_LOGIC;
        s_22_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_22_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_22_o_ap_vld : OUT STD_LOGIC;
        s_3_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_3_o_ap_vld : OUT STD_LOGIC;
        s_8_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_8_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_8_o_ap_vld : OUT STD_LOGIC;
        s_13_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_13_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_13_o_ap_vld : OUT STD_LOGIC;
        s_18_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_18_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_18_o_ap_vld : OUT STD_LOGIC;
        s_23_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_23_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_23_o_ap_vld : OUT STD_LOGIC;
        s_4_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_4_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_4_o_ap_vld : OUT STD_LOGIC;
        s_9_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_9_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_9_o_ap_vld : OUT STD_LOGIC;
        s_14_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_14_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_14_o_ap_vld : OUT STD_LOGIC;
        s_19_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_19_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_19_o_ap_vld : OUT STD_LOGIC;
        s_24_i : IN STD_LOGIC_VECTOR (63 downto 0);
        s_24_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        s_24_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_KeccakF1600_StatePer_2_fu_384 : component KeccakF1600_StatePer_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_2_fu_384_ap_start,
        ap_done => grp_KeccakF1600_StatePer_2_fu_384_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_2_fu_384_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_2_fu_384_ap_ready,
        s_0_i => s_0,
        s_0_o => grp_KeccakF1600_StatePer_2_fu_384_s_0_o,
        s_0_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_0_o_ap_vld,
        s_5_i => s_5,
        s_5_o => grp_KeccakF1600_StatePer_2_fu_384_s_5_o,
        s_5_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_5_o_ap_vld,
        s_10_i => s_10,
        s_10_o => grp_KeccakF1600_StatePer_2_fu_384_s_10_o,
        s_10_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_10_o_ap_vld,
        s_15_i => s_15,
        s_15_o => grp_KeccakF1600_StatePer_2_fu_384_s_15_o,
        s_15_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_15_o_ap_vld,
        s_20_i => s_20,
        s_20_o => grp_KeccakF1600_StatePer_2_fu_384_s_20_o,
        s_20_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_20_o_ap_vld,
        s_1_i => s_1,
        s_1_o => grp_KeccakF1600_StatePer_2_fu_384_s_1_o,
        s_1_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_1_o_ap_vld,
        s_6_i => s_6,
        s_6_o => grp_KeccakF1600_StatePer_2_fu_384_s_6_o,
        s_6_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_6_o_ap_vld,
        s_11_i => s_11,
        s_11_o => grp_KeccakF1600_StatePer_2_fu_384_s_11_o,
        s_11_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_11_o_ap_vld,
        s_16_i => s_16,
        s_16_o => grp_KeccakF1600_StatePer_2_fu_384_s_16_o,
        s_16_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_16_o_ap_vld,
        s_21_i => s_21,
        s_21_o => grp_KeccakF1600_StatePer_2_fu_384_s_21_o,
        s_21_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_21_o_ap_vld,
        s_2_i => s_2,
        s_2_o => grp_KeccakF1600_StatePer_2_fu_384_s_2_o,
        s_2_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_2_o_ap_vld,
        s_7_i => s_7,
        s_7_o => grp_KeccakF1600_StatePer_2_fu_384_s_7_o,
        s_7_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_7_o_ap_vld,
        s_12_i => s_12,
        s_12_o => grp_KeccakF1600_StatePer_2_fu_384_s_12_o,
        s_12_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_12_o_ap_vld,
        s_17_i => s_17,
        s_17_o => grp_KeccakF1600_StatePer_2_fu_384_s_17_o,
        s_17_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_17_o_ap_vld,
        s_22_i => s_22,
        s_22_o => grp_KeccakF1600_StatePer_2_fu_384_s_22_o,
        s_22_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_22_o_ap_vld,
        s_3_i => s_3,
        s_3_o => grp_KeccakF1600_StatePer_2_fu_384_s_3_o,
        s_3_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_3_o_ap_vld,
        s_8_i => s_8,
        s_8_o => grp_KeccakF1600_StatePer_2_fu_384_s_8_o,
        s_8_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_8_o_ap_vld,
        s_13_i => s_13,
        s_13_o => grp_KeccakF1600_StatePer_2_fu_384_s_13_o,
        s_13_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_13_o_ap_vld,
        s_18_i => s_18,
        s_18_o => grp_KeccakF1600_StatePer_2_fu_384_s_18_o,
        s_18_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_18_o_ap_vld,
        s_23_i => s_23,
        s_23_o => grp_KeccakF1600_StatePer_2_fu_384_s_23_o,
        s_23_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_23_o_ap_vld,
        s_4_i => s_4,
        s_4_o => grp_KeccakF1600_StatePer_2_fu_384_s_4_o,
        s_4_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_4_o_ap_vld,
        s_9_i => s_9,
        s_9_o => grp_KeccakF1600_StatePer_2_fu_384_s_9_o,
        s_9_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_9_o_ap_vld,
        s_14_i => s_14,
        s_14_o => grp_KeccakF1600_StatePer_2_fu_384_s_14_o,
        s_14_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_14_o_ap_vld,
        s_19_i => s_19,
        s_19_o => grp_KeccakF1600_StatePer_2_fu_384_s_19_o,
        s_19_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_19_o_ap_vld,
        s_24_i => s_24,
        s_24_o => grp_KeccakF1600_StatePer_2_fu_384_s_24_o,
        s_24_o_ap_vld => grp_KeccakF1600_StatePer_2_fu_384_s_24_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1469_fu_632_p2 = ap_const_lv1_0))) then 
                    grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_2_fu_384_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_1))) then 
                i_1_reg_303 <= i_reg_935;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_1_reg_303 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_0_reg_326 <= j_reg_943;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_ap_done = ap_const_logic_1))) then 
                j_0_reg_326 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    p_0_rec_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_1))) then 
                p_0_rec_reg_314 <= add_ln1483_fu_841_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0_rec_reg_314 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    s_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                s_0 <= p_Result_s_fu_578_p5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_0_o_ap_vld = ap_const_logic_1))) then 
                s_0 <= grp_KeccakF1600_StatePer_2_fu_384_s_0_o;
            end if; 
        end if;
    end process;

    s_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                s_1 <= p_Result_4_fu_596_p5;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_1_o_ap_vld = ap_const_logic_1))) then 
                s_1 <= grp_KeccakF1600_StatePer_2_fu_384_s_1_o;
            end if; 
        end if;
    end process;

    s_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_10 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_10_o_ap_vld = ap_const_logic_1))) then 
                s_10 <= grp_KeccakF1600_StatePer_2_fu_384_s_10_o;
            end if; 
        end if;
    end process;

    s_11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_11 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_11_o_ap_vld = ap_const_logic_1))) then 
                s_11 <= grp_KeccakF1600_StatePer_2_fu_384_s_11_o;
            end if; 
        end if;
    end process;

    s_12_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_12 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_12_o_ap_vld = ap_const_logic_1))) then 
                s_12 <= grp_KeccakF1600_StatePer_2_fu_384_s_12_o;
            end if; 
        end if;
    end process;

    s_13_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_13 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_13_o_ap_vld = ap_const_logic_1))) then 
                s_13 <= grp_KeccakF1600_StatePer_2_fu_384_s_13_o;
            end if; 
        end if;
    end process;

    s_14_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_14 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_14_o_ap_vld = ap_const_logic_1))) then 
                s_14 <= grp_KeccakF1600_StatePer_2_fu_384_s_14_o;
            end if; 
        end if;
    end process;

    s_15_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_15 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_15_o_ap_vld = ap_const_logic_1))) then 
                s_15 <= grp_KeccakF1600_StatePer_2_fu_384_s_15_o;
            end if; 
        end if;
    end process;

    s_16_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_16 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_16_o_ap_vld = ap_const_logic_1))) then 
                s_16 <= grp_KeccakF1600_StatePer_2_fu_384_s_16_o;
            end if; 
        end if;
    end process;

    s_17_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_17 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_17_o_ap_vld = ap_const_logic_1))) then 
                s_17 <= grp_KeccakF1600_StatePer_2_fu_384_s_17_o;
            end if; 
        end if;
    end process;

    s_18_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_18 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_18_o_ap_vld = ap_const_logic_1))) then 
                s_18 <= grp_KeccakF1600_StatePer_2_fu_384_s_18_o;
            end if; 
        end if;
    end process;

    s_19_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_19 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_19_o_ap_vld = ap_const_logic_1))) then 
                s_19 <= grp_KeccakF1600_StatePer_2_fu_384_s_19_o;
            end if; 
        end if;
    end process;

    s_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                s_2 <= p_Result_5_fu_622_p1;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_2_o_ap_vld = ap_const_logic_1))) then 
                s_2 <= grp_KeccakF1600_StatePer_2_fu_384_s_2_o;
            end if; 
        end if;
    end process;

    s_20_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_20 <= ap_const_lv64_8000000000000000;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_20_o_ap_vld = ap_const_logic_1))) then 
                s_20 <= grp_KeccakF1600_StatePer_2_fu_384_s_20_o;
            end if; 
        end if;
    end process;

    s_21_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_21 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_21_o_ap_vld = ap_const_logic_1))) then 
                s_21 <= grp_KeccakF1600_StatePer_2_fu_384_s_21_o;
            end if; 
        end if;
    end process;

    s_22_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_22 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_22_o_ap_vld = ap_const_logic_1))) then 
                s_22 <= grp_KeccakF1600_StatePer_2_fu_384_s_22_o;
            end if; 
        end if;
    end process;

    s_23_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_23 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_23_o_ap_vld = ap_const_logic_1))) then 
                s_23 <= grp_KeccakF1600_StatePer_2_fu_384_s_23_o;
            end if; 
        end if;
    end process;

    s_24_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_24 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_24_o_ap_vld = ap_const_logic_1))) then 
                s_24 <= grp_KeccakF1600_StatePer_2_fu_384_s_24_o;
            end if; 
        end if;
    end process;

    s_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_3 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_3_o_ap_vld = ap_const_logic_1))) then 
                s_3 <= grp_KeccakF1600_StatePer_2_fu_384_s_3_o;
            end if; 
        end if;
    end process;

    s_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_4 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_4_o_ap_vld = ap_const_logic_1))) then 
                s_4 <= grp_KeccakF1600_StatePer_2_fu_384_s_4_o;
            end if; 
        end if;
    end process;

    s_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_5 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_5_o_ap_vld = ap_const_logic_1))) then 
                s_5 <= grp_KeccakF1600_StatePer_2_fu_384_s_5_o;
            end if; 
        end if;
    end process;

    s_6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_6 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_6_o_ap_vld = ap_const_logic_1))) then 
                s_6 <= grp_KeccakF1600_StatePer_2_fu_384_s_6_o;
            end if; 
        end if;
    end process;

    s_7_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_7 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_7_o_ap_vld = ap_const_logic_1))) then 
                s_7 <= grp_KeccakF1600_StatePer_2_fu_384_s_7_o;
            end if; 
        end if;
    end process;

    s_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_8 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_8_o_ap_vld = ap_const_logic_1))) then 
                s_8 <= grp_KeccakF1600_StatePer_2_fu_384_s_8_o;
            end if; 
        end if;
    end process;

    s_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_9 <= ap_const_lv64_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_s_9_o_ap_vld = ap_const_logic_1))) then 
                s_9 <= grp_KeccakF1600_StatePer_2_fu_384_s_9_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_reg_935 <= i_fu_638_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                j_reg_943 <= j_fu_650_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_0))) then
                p_Result_7_reg_954 <= ap_phi_mux_p_Val2_s_phi_fu_340_p42(47 downto 32);
                p_Result_8_reg_959 <= ap_phi_mux_p_Val2_s_phi_fu_340_p42(63 downto 48);
                    shl_ln_reg_948(6 downto 2) <= shl_ln_fu_766_p3(6 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_438 <= input_r_q0;
                reg_442 <= input_r_q1;
            end if;
        end if;
    end process;
    shl_ln_reg_948(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, ap_CS_fsm_state9, icmp_ln1472_fu_644_p2, grp_KeccakF1600_StatePer_2_fu_384_ap_done, ap_CS_fsm_state8, icmp_ln1469_fu_632_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1469_fu_632_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_2_fu_384_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    add_ln1474_fu_778_p2 <= std_logic_vector(unsigned(p_0_rec_reg_314) + unsigned(zext_ln1474_fu_774_p1));
    add_ln1475_fu_810_p2 <= std_logic_vector(unsigned(p_0_rec_reg_314) + unsigned(zext_ln1475_fu_806_p1));
    add_ln1476_fu_856_p2 <= std_logic_vector(unsigned(p_0_rec_reg_314) + unsigned(zext_ln1476_fu_852_p1));
    add_ln1477_fu_876_p2 <= std_logic_vector(unsigned(p_0_rec_reg_314) + unsigned(zext_ln1477_fu_872_p1));
    add_ln1483_fu_841_p2 <= std_logic_vector(unsigned(p_0_rec_reg_314) + unsigned(ap_const_lv10_54));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_condition_663_assign_proc : process(ap_phi_mux_j_0_phi_fu_330_p4)
    begin
                ap_condition_663 <= (not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_13)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_12)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_11)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_10)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_F)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_E)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_D)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_C)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_B)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_A)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_9)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_8)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_7)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_6)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_5)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_4)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_3)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_2)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_1)) and not((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_0)));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln1469_fu_632_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1469_fu_632_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_j_0_phi_fu_330_p4 <= j_0_reg_326;

    ap_phi_mux_p_Val2_s_phi_fu_340_p42_assign_proc : process(s_3, s_4, s_5, s_6, s_7, s_8, s_9, s_10, s_11, s_12, s_13, s_14, s_15, s_16, s_17, s_18, s_19, s_0, s_1, s_2, s_20, ap_CS_fsm_state9, icmp_ln1472_fu_644_p2, ap_phi_mux_j_0_phi_fu_330_p4, ap_condition_663)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_0))) then
            if ((ap_const_boolean_1 = ap_condition_663)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_20;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_19;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_18;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_17;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_16;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_15;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_14;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_13;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_12;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_11;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_10;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_9;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_8;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_7;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_6;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_5;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_4;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_3;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_2;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_1;
            elsif ((ap_phi_mux_j_0_phi_fu_330_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= s_0;
            else 
                ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_p_Val2_s_phi_fu_340_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln1469_fu_632_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln1469_fu_632_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_KeccakF1600_StatePer_2_fu_384_ap_start <= grp_KeccakF1600_StatePer_2_fu_384_ap_start_reg;
    i_fu_638_p2 <= std_logic_vector(unsigned(i_1_reg_303) + unsigned(ap_const_lv4_1));
    icmp_ln1469_fu_632_p2 <= "1" when (i_1_reg_303 = ap_const_lv4_8) else "0";
    icmp_ln1472_fu_644_p2 <= "1" when (j_0_reg_326 = ap_const_lv5_15) else "0";

    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_650_p2 <= std_logic_vector(unsigned(j_0_reg_326) + unsigned(ap_const_lv5_1));
    or_ln1475_fu_800_p2 <= (shl_ln_fu_766_p3 or ap_const_lv7_1);
    or_ln1476_fu_847_p2 <= (shl_ln_reg_948 or ap_const_lv7_2);
    or_ln1477_fu_867_p2 <= (shl_ln_reg_948 or ap_const_lv7_3);

    output_r_address0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln1474_1_fu_784_p1, zext_ln1476_1_fu_862_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address0 <= zext_ln1476_1_fu_862_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address0 <= zext_ln1474_1_fu_784_p1(10 - 1 downto 0);
        else 
            output_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_address1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10, zext_ln1475_1_fu_816_p1, zext_ln1477_1_fu_882_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_address1 <= zext_ln1477_1_fu_882_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_address1 <= zext_ln1475_1_fu_816_p1(10 - 1 downto 0);
        else 
            output_r_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    output_r_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_ce1_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_r_ce1 <= ap_const_logic_1;
        else 
            output_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_d0_assign_proc : process(ap_CS_fsm_state9, p_Result_7_reg_954, ap_CS_fsm_state10, trunc_ln1474_fu_761_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d0 <= p_Result_7_reg_954;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d0 <= trunc_ln1474_fu_761_p1;
        else 
            output_r_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_d1_assign_proc : process(ap_CS_fsm_state9, p_Result_8_reg_959, ap_CS_fsm_state10, ap_phi_mux_p_Val2_s_phi_fu_340_p42)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            output_r_d1 <= p_Result_8_reg_959;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_r_d1 <= ap_phi_mux_p_Val2_s_phi_fu_340_p42(31 downto 16);
        else 
            output_r_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_r_we0_assign_proc : process(ap_CS_fsm_state9, icmp_ln1472_fu_644_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_0)))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;


    output_r_we1_assign_proc : process(ap_CS_fsm_state9, icmp_ln1472_fu_644_p2, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln1472_fu_644_p2 = ap_const_lv1_0)))) then 
            output_r_we1 <= ap_const_logic_1;
        else 
            output_r_we1 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_4_fu_596_p5 <= (((input_r_q1 & input_r_q0) & reg_442) & reg_438);
    p_Result_5_fu_622_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_614_p3),64));
    p_Result_s_fu_578_p5 <= (((input_r_q1 & input_r_q0) & reg_442) & reg_438);
    shl_ln_fu_766_p3 <= (j_0_reg_326 & ap_const_lv2_0);
    tmp_fu_614_p3 <= (ap_const_lv8_1F & input_r_q0);
    trunc_ln1474_fu_761_p1 <= ap_phi_mux_p_Val2_s_phi_fu_340_p42(16 - 1 downto 0);
    zext_ln1474_1_fu_784_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1474_fu_778_p2),64));
    zext_ln1474_fu_774_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_766_p3),10));
    zext_ln1475_1_fu_816_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1475_fu_810_p2),64));
    zext_ln1475_fu_806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1475_fu_800_p2),10));
    zext_ln1476_1_fu_862_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1476_fu_856_p2),64));
    zext_ln1476_fu_852_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1476_fu_847_p2),10));
    zext_ln1477_1_fu_882_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln1477_fu_876_p2),64));
    zext_ln1477_fu_872_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1477_fu_867_p2),10));
end behav;
