-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity gen_S_sample_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_we0 : OUT STD_LOGIC;
    S_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    S_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
    seed_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    seed_ce0 : OUT STD_LOGIC;
    seed_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    seed_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    seed_ce1 : OUT STD_LOGIC;
    seed_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    reset : IN STD_LOGIC_VECTOR (0 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sk_offset : IN STD_LOGIC_VECTOR (13 downto 0);
    begin_write : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of gen_S_sample_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal grp_shake_gen_S_fu_110_ap_start : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_ap_done : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_ap_idle : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_ap_ready : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_output_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake_gen_S_fu_110_output_r_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_output_r_we0 : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_output_r_d0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_shake_gen_S_fu_110_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_fu_110_input_r_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_fu_110_input_r_ce1 : STD_LOGIC;
    signal grp_write_sk_16_fu_172_ap_start : STD_LOGIC;
    signal grp_write_sk_16_fu_172_ap_done : STD_LOGIC;
    signal grp_write_sk_16_fu_172_ap_idle : STD_LOGIC;
    signal grp_write_sk_16_fu_172_ap_ready : STD_LOGIC;
    signal grp_write_sk_16_fu_172_sk_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_write_sk_16_fu_172_sk_ce0 : STD_LOGIC;
    signal grp_write_sk_16_fu_172_sk_we0 : STD_LOGIC;
    signal grp_write_sk_16_fu_172_sk_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_sk_16_fu_172_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_write_sk_16_fu_172_S_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_fu_110_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_write_sk_16_fu_172_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component shake_gen_S IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component write_sk_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_we0 : OUT STD_LOGIC;
        sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sk_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_shake_gen_S_fu_110 : component shake_gen_S
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_gen_S_fu_110_ap_start,
        ap_done => grp_shake_gen_S_fu_110_ap_done,
        ap_idle => grp_shake_gen_S_fu_110_ap_idle,
        ap_ready => grp_shake_gen_S_fu_110_ap_ready,
        output_r_address0 => grp_shake_gen_S_fu_110_output_r_address0,
        output_r_ce0 => grp_shake_gen_S_fu_110_output_r_ce0,
        output_r_we0 => grp_shake_gen_S_fu_110_output_r_we0,
        output_r_d0 => grp_shake_gen_S_fu_110_output_r_d0,
        input_r_address0 => grp_shake_gen_S_fu_110_input_r_address0,
        input_r_ce0 => grp_shake_gen_S_fu_110_input_r_ce0,
        input_r_q0 => seed_q0,
        input_r_address1 => grp_shake_gen_S_fu_110_input_r_address1,
        input_r_ce1 => grp_shake_gen_S_fu_110_input_r_ce1,
        input_r_q1 => seed_q1,
        reset => reset);

    grp_write_sk_16_fu_172 : component write_sk_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_sk_16_fu_172_ap_start,
        ap_done => grp_write_sk_16_fu_172_ap_done,
        ap_idle => grp_write_sk_16_fu_172_ap_idle,
        ap_ready => grp_write_sk_16_fu_172_ap_ready,
        sk_address0 => grp_write_sk_16_fu_172_sk_address0,
        sk_ce0 => grp_write_sk_16_fu_172_sk_ce0,
        sk_we0 => grp_write_sk_16_fu_172_sk_we0,
        sk_d0 => grp_write_sk_16_fu_172_sk_d0,
        sk_offset => sk_offset,
        S_address0 => grp_write_sk_16_fu_172_S_address0,
        S_ce0 => grp_write_sk_16_fu_172_S_ce0,
        S_q0 => S_q0,
        begin_r => begin_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_shake_gen_S_fu_110_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_gen_S_fu_110_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_shake_gen_S_fu_110_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_gen_S_fu_110_ap_ready = ap_const_logic_1)) then 
                    grp_shake_gen_S_fu_110_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_sk_16_fu_172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_sk_16_fu_172_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_write_sk_16_fu_172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_sk_16_fu_172_ap_ready = ap_const_logic_1)) then 
                    grp_write_sk_16_fu_172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_shake_gen_S_fu_110_ap_done, grp_write_sk_16_fu_172_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_shake_gen_S_fu_110_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_write_sk_16_fu_172_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    S_address0_assign_proc : process(grp_shake_gen_S_fu_110_output_r_address0, grp_write_sk_16_fu_172_S_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_address0 <= grp_write_sk_16_fu_172_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_address0 <= grp_shake_gen_S_fu_110_output_r_address0;
        else 
            S_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_ce0_assign_proc : process(grp_shake_gen_S_fu_110_output_r_ce0, grp_write_sk_16_fu_172_S_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            S_ce0 <= grp_write_sk_16_fu_172_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_ce0 <= grp_shake_gen_S_fu_110_output_r_ce0;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= grp_shake_gen_S_fu_110_output_r_d0;

    S_we0_assign_proc : process(grp_shake_gen_S_fu_110_output_r_we0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            S_we0 <= grp_shake_gen_S_fu_110_output_r_we0;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_write_sk_16_fu_172_ap_done, ap_CS_fsm_state4)
    begin
        if ((((grp_write_sk_16_fu_172_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_write_sk_16_fu_172_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_write_sk_16_fu_172_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_shake_gen_S_fu_110_ap_start <= grp_shake_gen_S_fu_110_ap_start_reg;
    grp_write_sk_16_fu_172_ap_start <= grp_write_sk_16_fu_172_ap_start_reg;
    seed_address0 <= grp_shake_gen_S_fu_110_input_r_address0;
    seed_address1 <= grp_shake_gen_S_fu_110_input_r_address1;
    seed_ce0 <= grp_shake_gen_S_fu_110_input_r_ce0;
    seed_ce1 <= grp_shake_gen_S_fu_110_input_r_ce1;
    sk_address0 <= grp_write_sk_16_fu_172_sk_address0;
    sk_ce0 <= grp_write_sk_16_fu_172_sk_ce0;
    sk_d0 <= grp_write_sk_16_fu_172_sk_d0;
    sk_we0 <= grp_write_sk_16_fu_172_sk_we0;
end behav;
