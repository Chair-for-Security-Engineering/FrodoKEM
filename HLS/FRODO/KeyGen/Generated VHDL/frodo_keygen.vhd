-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_keygen is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    pk_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    pk_ce0 : OUT STD_LOGIC;
    pk_we0 : OUT STD_LOGIC;
    pk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_we0 : OUT STD_LOGIC;
    sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    randomness_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    randomness_ce0 : OUT STD_LOGIC;
    randomness_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    randomness_address1 : OUT STD_LOGIC_VECTOR (4 downto 0);
    randomness_ce1 : OUT STD_LOGIC;
    randomness_q1 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_keygen is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_keygen,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=6.200000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.301750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=1,HLS_SYN_FF=6693,HLS_SYN_LUT=33218,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (28 downto 0) := "00000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (28 downto 0) := "00000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (28 downto 0) := "00000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (28 downto 0) := "00000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (28 downto 0) := "00000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (28 downto 0) := "00000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (28 downto 0) := "00000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (28 downto 0) := "00001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (28 downto 0) := "00010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (28 downto 0) := "00100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (28 downto 0) := "01000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (28 downto 0) := "10000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv9_3 : STD_LOGIC_VECTOR (8 downto 0) := "000000011";
    constant ap_const_lv9_2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv9_97 : STD_LOGIC_VECTOR (8 downto 0) := "010010111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001001";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001011";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_F : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001111";
    constant ap_const_lv64_258 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001011000";
    constant ap_const_lv64_259 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001011001";
    constant ap_const_lv64_25A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001011010";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv64_25B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000001001011011";
    constant ap_const_lv16_1F00 : STD_LOGIC_VECTOR (15 downto 0) := "0001111100000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv14_12D0 : STD_LOGIC_VECTOR (13 downto 0) := "01001011010000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv7_5F : STD_LOGIC_VECTOR (6 downto 0) := "1011111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv13_258 : STD_LOGIC_VECTOR (12 downto 0) := "0001001011000";
    constant ap_const_lv14_3DB0 : STD_LOGIC_VECTOR (13 downto 0) := "11110110110000";
    constant ap_const_lv17_8 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000001000";
    constant ap_const_lv10_26D : STD_LOGIC_VECTOR (9 downto 0) := "1001101101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (28 downto 0) := "00000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_fu_939_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_952 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal icmp_ln83_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_fu_1150_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_946_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal reg_957 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal icmp_ln123_fu_1239_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln123_fu_1235_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_968_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_reg_1409 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln47_fu_962_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_7_fu_1021_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_7_reg_1422 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln61_fu_1015_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal i_8_fu_1099_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_reg_1446 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal seed_A_addr_reg_1451 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln71_fu_1093_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln83_reg_1456 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_1160_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_1463 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln85_fu_1166_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln85_reg_1468 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_fu_1173_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln90_reg_1473 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln90_fu_1180_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln90_reg_1478 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_fu_1187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln101_reg_1483 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln108_1_fu_1224_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln108_1_reg_1488 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln123_reg_1493 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1245_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_11_reg_1500 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln125_fu_1251_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_1505 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_fu_1257_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln130_reg_1510 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_fu_1274_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln135_reg_1515 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln140_fu_1281_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln140_reg_1520 : STD_LOGIC_VECTOR (12 downto 0);
    signal sk_offset_fu_1287_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sk_offset_reg_1525 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln140_fu_1293_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln140_reg_1530 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln144_fu_1317_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln144_reg_1536 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln146_fu_1332_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln146_reg_1541 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal add_ln154_fu_1342_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln154_reg_1546 : STD_LOGIC_VECTOR (16 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal i_10_fu_1355_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_1554 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal zext_ln170_fu_1361_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln170_reg_1559 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln168_fu_1349_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_1372_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_1572 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal icmp_ln174_fu_1366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_ce0 : STD_LOGIC;
    signal B_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_ce1 : STD_LOGIC;
    signal B_we1 : STD_LOGIC;
    signal S_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_1_ce0 : STD_LOGIC;
    signal S_1_we0 : STD_LOGIC;
    signal S_1_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal S_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_2_ce0 : STD_LOGIC;
    signal S_2_we0 : STD_LOGIC;
    signal S_2_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal X_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_1_ce0 : STD_LOGIC;
    signal X_1_we0 : STD_LOGIC;
    signal X_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal X_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal X_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_1_ce1 : STD_LOGIC;
    signal X_1_we1 : STD_LOGIC;
    signal X_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal X_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal X_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal X_2_ce0 : STD_LOGIC;
    signal X_2_we0 : STD_LOGIC;
    signal X_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal X_2_ce1 : STD_LOGIC;
    signal X_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_1_ce1 : STD_LOGIC;
    signal A_1_we1 : STD_LOGIC;
    signal A_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal A_2_ce1 : STD_LOGIC;
    signal A_2_we1 : STD_LOGIC;
    signal A_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_A_ce0 : STD_LOGIC;
    signal seed_A_we0 : STD_LOGIC;
    signal seed_A_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_ce1 : STD_LOGIC;
    signal seed_A_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_ce0 : STD_LOGIC;
    signal seed_SE_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_SE_ce1 : STD_LOGIC;
    signal seed_SE_we1 : STD_LOGIC;
    signal seed_SE_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gen_S_sample_write_fu_716_ap_start : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_ap_done : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_ap_idle : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_ap_ready : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_gen_S_sample_write_fu_716_S_ce0 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_S_we0 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_S_d0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_gen_S_sample_write_fu_716_S_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_gen_S_sample_write_fu_716_seed_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gen_S_sample_write_fu_716_seed_ce0 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_seed_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_gen_S_sample_write_fu_716_seed_ce1 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_gen_S_sample_write_fu_716_sk_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_gen_S_sample_write_fu_716_sk_ce0 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_sk_we0 : STD_LOGIC;
    signal grp_gen_S_sample_write_fu_716_sk_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_gen_S_sample_write_fu_716_sk_offset : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_gen_S_sample_write_fu_716_begin_write : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_fu_781_ap_start : STD_LOGIC;
    signal grp_absorb_block_fu_781_ap_done : STD_LOGIC;
    signal grp_absorb_block_fu_781_ap_idle : STD_LOGIC;
    signal grp_absorb_block_fu_781_ap_ready : STD_LOGIC;
    signal grp_absorb_block_fu_781_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_absorb_block_fu_781_output_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_781_output_r_we0 : STD_LOGIC;
    signal grp_absorb_block_fu_781_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_781_output_offset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_fu_781_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_781_input_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_781_input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_781_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_781_input_r_ce1 : STD_LOGIC;
    signal grp_absorb_block_fu_781_input_r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_781_outlen : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_absorb_block_fu_781_inlen : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_absorb_block_fu_781_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_fu_781_begin_r : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_vector_matrix_mul_fu_855_ap_start : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_ap_done : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_ap_idle : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_ap_ready : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_B_address1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_vector_matrix_mul_fu_855_B_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_B_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_B_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_1_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_1_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_1_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_1_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_2_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_2_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_855_A_2_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_2_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_A_2_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_855_S_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_S_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_vector_matrix_mul_fu_855_seed_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_855_seed_A_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_seed_A_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_855_seed_A_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_855_seed_A_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_855_seed_A_ce1 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_ap_start : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_ap_done : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_ap_idle : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_ap_ready : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_pk_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_pack_16_fu_917_pk_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_pk_we0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_pk_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_917_sk_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_frodo_pack_16_fu_917_sk_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_sk_we0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_sk_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_917_sk_offset : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_frodo_pack_16_fu_917_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_917_out_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_out_r_we0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_917_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_917_in_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_917_in_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_917_in_r_ce1 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_917_in_r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_add_E_fu_930_ap_start : STD_LOGIC;
    signal grp_add_E_fu_930_ap_done : STD_LOGIC;
    signal grp_add_E_fu_930_ap_idle : STD_LOGIC;
    signal grp_add_E_fu_930_ap_ready : STD_LOGIC;
    signal grp_add_E_fu_930_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_E_fu_930_out_r_ce0 : STD_LOGIC;
    signal grp_add_E_fu_930_out_r_we0 : STD_LOGIC;
    signal grp_add_E_fu_930_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_add_E_fu_930_in1_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_add_E_fu_930_in1_ce0 : STD_LOGIC;
    signal grp_add_E_fu_930_in2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_add_E_fu_930_in2_ce0 : STD_LOGIC;
    signal grp_add_E_fu_930_in2_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_0_reg_625 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_1_reg_637 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal i_2_reg_648 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal i_3_reg_660 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_block_state16_on_subcall_done : BOOLEAN;
    signal i_4_reg_671 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_block_state20_on_subcall_done : BOOLEAN;
    signal phi_mul_reg_682 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_5_reg_693 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal i_6_reg_704 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal grp_gen_S_sample_write_fu_716_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal grp_absorb_block_fu_781_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_block_state18_on_subcall_done : BOOLEAN;
    signal ap_block_state21_on_subcall_done : BOOLEAN;
    signal grp_vector_matrix_mul_fu_855_ap_start_reg : STD_LOGIC := '0';
    signal grp_frodo_pack_16_fu_917_ap_start_reg : STD_LOGIC := '0';
    signal grp_add_E_fu_930_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln49_1_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln49_fu_987_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal zext_ln63_fu_1035_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_2_fu_1048_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln63_1_fu_1057_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal zext_ln73_fu_1105_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln73_1_fu_1110_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln74_fu_1122_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal zext_ln176_fu_1378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln176_1_fu_1391_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln60_fu_1010_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln2_fu_1071_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln65_fu_1086_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1141_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln142_fu_1324_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln1_fu_974_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_fu_992_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln_fu_1002_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal or_ln63_1_fu_1027_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal or_ln63_2_fu_1040_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln63_fu_1053_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_1061_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln65_fu_1080_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal xor_ln74_fu_1116_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_fu_1127_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_1131_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln108_1_fu_1202_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln108_fu_1210_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln1_fu_1194_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln108_fu_1214_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln108_1_fu_1220_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal tmp_5_fu_1264_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln123_fu_1231_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln144_1_fu_1305_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln144_fu_1313_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln2_fu_1297_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln146_fu_1329_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln154_fu_1339_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal or_ln3_fu_1383_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (28 downto 0);

    component gen_S_sample_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        S_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        seed_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_ce0 : OUT STD_LOGIC;
        seed_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        seed_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_ce1 : OUT STD_LOGIC;
        seed_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_we0 : OUT STD_LOGIC;
        sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sk_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        begin_write : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component absorb_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        output_offset : IN STD_LOGIC_VECTOR (0 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        outlen : IN STD_LOGIC_VECTOR (5 downto 0);
        inlen : IN STD_LOGIC_VECTOR (8 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_matrix_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        B_address1 : OUT STD_LOGIC_VECTOR (12 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_we1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_we0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_we1 : OUT STD_LOGIC;
        A_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        seed_A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_ce0 : OUT STD_LOGIC;
        seed_A_we0 : OUT STD_LOGIC;
        seed_A_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        seed_A_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        seed_A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_ce1 : OUT STD_LOGIC;
        seed_A_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        offset : IN STD_LOGIC_VECTOR (3 downto 0);
        pregen : IN STD_LOGIC_VECTOR (0 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component frodo_pack_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        pk_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        pk_ce0 : OUT STD_LOGIC;
        pk_we0 : OUT STD_LOGIC;
        pk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        pk_offset : IN STD_LOGIC_VECTOR (13 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_we0 : OUT STD_LOGIC;
        sk_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        sk_offset : IN STD_LOGIC_VECTOR (16 downto 0);
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component add_E IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in1_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        in1_ce0 : OUT STD_LOGIC;
        in1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in1_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        in2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in2_ce0 : OUT STD_LOGIC;
        in2_q0 : IN STD_LOGIC_VECTOR (6 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component frodo_keygen_B IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (12 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_S_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (6 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component frodo_keygen_X_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_X_2 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_A_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_seed_A IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_keygen_seeddEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    B_U : component frodo_keygen_B
    generic map (
        DataWidth => 16,
        AddressRange => 5120,
        AddressWidth => 13)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_add_E_fu_930_in1_address0,
        ce0 => B_ce0,
        q0 => B_q0,
        address1 => grp_vector_matrix_mul_fu_855_B_address1,
        ce1 => B_ce1,
        we1 => B_we1,
        d1 => grp_vector_matrix_mul_fu_855_B_d1);

    S_1_U : component frodo_keygen_S_1
    generic map (
        DataWidth => 7,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_1_address0,
        ce0 => S_1_ce0,
        we0 => S_1_we0,
        d0 => grp_gen_S_sample_write_fu_716_S_d0,
        q0 => S_1_q0);

    S_2_U : component frodo_keygen_S_1
    generic map (
        DataWidth => 7,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_2_address0,
        ce0 => S_2_ce0,
        we0 => S_2_we0,
        d0 => grp_gen_S_sample_write_fu_716_S_d0,
        q0 => S_2_q0);

    X_1_U : component frodo_keygen_X_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_1_address0,
        ce0 => X_1_ce0,
        we0 => X_1_we0,
        d0 => X_1_d0,
        q0 => X_1_q0,
        address1 => X_1_address1,
        ce1 => X_1_ce1,
        we1 => X_1_we1,
        d1 => X_1_d1,
        q1 => X_1_q1);

    X_2_U : component frodo_keygen_X_2
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => X_2_address0,
        ce0 => X_2_ce0,
        we0 => X_2_we0,
        d0 => grp_frodo_pack_16_fu_917_out_r_d0,
        q0 => X_2_q0,
        address1 => grp_absorb_block_fu_781_input_r_address1,
        ce1 => X_2_ce1,
        q1 => X_2_q1);

    A_1_U : component frodo_keygen_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => A_1_d0,
        q0 => A_1_q0,
        address1 => A_1_address1,
        ce1 => A_1_ce1,
        we1 => A_1_we1,
        d1 => grp_vector_matrix_mul_fu_855_A_1_d1,
        q1 => A_1_q1);

    A_2_U : component frodo_keygen_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => A_2_d0,
        q0 => A_2_q0,
        address1 => A_2_address1,
        ce1 => A_2_ce1,
        we1 => A_2_we1,
        d1 => grp_vector_matrix_mul_fu_855_A_2_d1,
        q1 => A_2_q1);

    seed_A_U : component frodo_keygen_seed_A
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_A_address0,
        ce0 => seed_A_ce0,
        we0 => seed_A_we0,
        d0 => seed_A_d0,
        q0 => seed_A_q0,
        address1 => grp_vector_matrix_mul_fu_855_seed_A_address1,
        ce1 => seed_A_ce1,
        q1 => seed_A_q1);

    seed_SE_U : component frodo_keygen_seeddEe
    generic map (
        DataWidth => 16,
        AddressRange => 12,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_gen_S_sample_write_fu_716_seed_address0,
        ce0 => seed_SE_ce0,
        q0 => seed_SE_q0,
        address1 => seed_SE_address1,
        ce1 => seed_SE_ce1,
        we1 => seed_SE_we1,
        d1 => seed_SE_d1,
        q1 => seed_SE_q1);

    grp_gen_S_sample_write_fu_716 : component gen_S_sample_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_gen_S_sample_write_fu_716_ap_start,
        ap_done => grp_gen_S_sample_write_fu_716_ap_done,
        ap_idle => grp_gen_S_sample_write_fu_716_ap_idle,
        ap_ready => grp_gen_S_sample_write_fu_716_ap_ready,
        S_address0 => grp_gen_S_sample_write_fu_716_S_address0,
        S_ce0 => grp_gen_S_sample_write_fu_716_S_ce0,
        S_we0 => grp_gen_S_sample_write_fu_716_S_we0,
        S_d0 => grp_gen_S_sample_write_fu_716_S_d0,
        S_q0 => grp_gen_S_sample_write_fu_716_S_q0,
        seed_address0 => grp_gen_S_sample_write_fu_716_seed_address0,
        seed_ce0 => grp_gen_S_sample_write_fu_716_seed_ce0,
        seed_q0 => seed_SE_q0,
        seed_address1 => grp_gen_S_sample_write_fu_716_seed_address1,
        seed_ce1 => grp_gen_S_sample_write_fu_716_seed_ce1,
        seed_q1 => seed_SE_q1,
        reset => grp_gen_S_sample_write_fu_716_reset,
        sk_address0 => grp_gen_S_sample_write_fu_716_sk_address0,
        sk_ce0 => grp_gen_S_sample_write_fu_716_sk_ce0,
        sk_we0 => grp_gen_S_sample_write_fu_716_sk_we0,
        sk_d0 => grp_gen_S_sample_write_fu_716_sk_d0,
        sk_offset => grp_gen_S_sample_write_fu_716_sk_offset,
        begin_write => grp_gen_S_sample_write_fu_716_begin_write);

    grp_absorb_block_fu_781 : component absorb_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_absorb_block_fu_781_ap_start,
        ap_done => grp_absorb_block_fu_781_ap_done,
        ap_idle => grp_absorb_block_fu_781_ap_idle,
        ap_ready => grp_absorb_block_fu_781_ap_ready,
        output_r_address0 => grp_absorb_block_fu_781_output_r_address0,
        output_r_ce0 => grp_absorb_block_fu_781_output_r_ce0,
        output_r_we0 => grp_absorb_block_fu_781_output_r_we0,
        output_r_d0 => grp_absorb_block_fu_781_output_r_d0,
        output_offset => grp_absorb_block_fu_781_output_offset,
        input_r_address0 => grp_absorb_block_fu_781_input_r_address0,
        input_r_ce0 => grp_absorb_block_fu_781_input_r_ce0,
        input_r_q0 => grp_absorb_block_fu_781_input_r_q0,
        input_r_address1 => grp_absorb_block_fu_781_input_r_address1,
        input_r_ce1 => grp_absorb_block_fu_781_input_r_ce1,
        input_r_q1 => grp_absorb_block_fu_781_input_r_q1,
        outlen => grp_absorb_block_fu_781_outlen,
        inlen => grp_absorb_block_fu_781_inlen,
        reset => grp_absorb_block_fu_781_reset,
        begin_r => grp_absorb_block_fu_781_begin_r);

    grp_vector_matrix_mul_fu_855 : component vector_matrix_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_matrix_mul_fu_855_ap_start,
        ap_done => grp_vector_matrix_mul_fu_855_ap_done,
        ap_idle => grp_vector_matrix_mul_fu_855_ap_idle,
        ap_ready => grp_vector_matrix_mul_fu_855_ap_ready,
        B_address1 => grp_vector_matrix_mul_fu_855_B_address1,
        B_ce1 => grp_vector_matrix_mul_fu_855_B_ce1,
        B_we1 => grp_vector_matrix_mul_fu_855_B_we1,
        B_d1 => grp_vector_matrix_mul_fu_855_B_d1,
        A_1_address0 => grp_vector_matrix_mul_fu_855_A_1_address0,
        A_1_ce0 => grp_vector_matrix_mul_fu_855_A_1_ce0,
        A_1_we0 => grp_vector_matrix_mul_fu_855_A_1_we0,
        A_1_d0 => grp_vector_matrix_mul_fu_855_A_1_d0,
        A_1_q0 => A_1_q0,
        A_1_address1 => grp_vector_matrix_mul_fu_855_A_1_address1,
        A_1_ce1 => grp_vector_matrix_mul_fu_855_A_1_ce1,
        A_1_we1 => grp_vector_matrix_mul_fu_855_A_1_we1,
        A_1_d1 => grp_vector_matrix_mul_fu_855_A_1_d1,
        A_2_address0 => grp_vector_matrix_mul_fu_855_A_2_address0,
        A_2_ce0 => grp_vector_matrix_mul_fu_855_A_2_ce0,
        A_2_we0 => grp_vector_matrix_mul_fu_855_A_2_we0,
        A_2_d0 => grp_vector_matrix_mul_fu_855_A_2_d0,
        A_2_q0 => A_2_q0,
        A_2_address1 => grp_vector_matrix_mul_fu_855_A_2_address1,
        A_2_ce1 => grp_vector_matrix_mul_fu_855_A_2_ce1,
        A_2_we1 => grp_vector_matrix_mul_fu_855_A_2_we1,
        A_2_d1 => grp_vector_matrix_mul_fu_855_A_2_d1,
        S_address0 => grp_vector_matrix_mul_fu_855_S_address0,
        S_ce0 => grp_vector_matrix_mul_fu_855_S_ce0,
        S_q0 => grp_vector_matrix_mul_fu_855_S_q0,
        seed_A_address0 => grp_vector_matrix_mul_fu_855_seed_A_address0,
        seed_A_ce0 => grp_vector_matrix_mul_fu_855_seed_A_ce0,
        seed_A_we0 => grp_vector_matrix_mul_fu_855_seed_A_we0,
        seed_A_d0 => grp_vector_matrix_mul_fu_855_seed_A_d0,
        seed_A_q0 => seed_A_q0,
        seed_A_address1 => grp_vector_matrix_mul_fu_855_seed_A_address1,
        seed_A_ce1 => grp_vector_matrix_mul_fu_855_seed_A_ce1,
        seed_A_q1 => seed_A_q1,
        offset => reg_952,
        pregen => icmp_ln101_reg_1483,
        begin_r => xor_ln90_reg_1478);

    grp_frodo_pack_16_fu_917 : component frodo_pack_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_pack_16_fu_917_ap_start,
        ap_done => grp_frodo_pack_16_fu_917_ap_done,
        ap_idle => grp_frodo_pack_16_fu_917_ap_idle,
        ap_ready => grp_frodo_pack_16_fu_917_ap_ready,
        pk_address0 => grp_frodo_pack_16_fu_917_pk_address0,
        pk_ce0 => grp_frodo_pack_16_fu_917_pk_ce0,
        pk_we0 => grp_frodo_pack_16_fu_917_pk_we0,
        pk_d0 => grp_frodo_pack_16_fu_917_pk_d0,
        pk_offset => sk_offset_reg_1525,
        sk_address0 => grp_frodo_pack_16_fu_917_sk_address0,
        sk_ce0 => grp_frodo_pack_16_fu_917_sk_ce0,
        sk_we0 => grp_frodo_pack_16_fu_917_sk_we0,
        sk_d0 => grp_frodo_pack_16_fu_917_sk_d0,
        sk_offset => grp_frodo_pack_16_fu_917_sk_offset,
        out_r_address0 => grp_frodo_pack_16_fu_917_out_r_address0,
        out_r_ce0 => grp_frodo_pack_16_fu_917_out_r_ce0,
        out_r_we0 => grp_frodo_pack_16_fu_917_out_r_we0,
        out_r_d0 => grp_frodo_pack_16_fu_917_out_r_d0,
        in_r_address0 => grp_frodo_pack_16_fu_917_in_r_address0,
        in_r_ce0 => grp_frodo_pack_16_fu_917_in_r_ce0,
        in_r_q0 => grp_frodo_pack_16_fu_917_in_r_q0,
        in_r_address1 => grp_frodo_pack_16_fu_917_in_r_address1,
        in_r_ce1 => grp_frodo_pack_16_fu_917_in_r_ce1,
        in_r_q1 => grp_frodo_pack_16_fu_917_in_r_q1,
        begin_r => icmp_ln125_reg_1505);

    grp_add_E_fu_930 : component add_E
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_add_E_fu_930_ap_start,
        ap_done => grp_add_E_fu_930_ap_done,
        ap_idle => grp_add_E_fu_930_ap_idle,
        ap_ready => grp_add_E_fu_930_ap_ready,
        out_r_address0 => grp_add_E_fu_930_out_r_address0,
        out_r_ce0 => grp_add_E_fu_930_out_r_ce0,
        out_r_we0 => grp_add_E_fu_930_out_r_we0,
        out_r_d0 => grp_add_E_fu_930_out_r_d0,
        in1_address0 => grp_add_E_fu_930_in1_address0,
        in1_ce0 => grp_add_E_fu_930_in1_ce0,
        in1_q0 => B_q0,
        in1_offset => add_ln144_reg_1536,
        in2_address0 => grp_add_E_fu_930_in2_address0,
        in2_ce0 => grp_add_E_fu_930_in2_ce0,
        in2_q0 => grp_add_E_fu_930_in2_q0,
        begin_r => icmp_ln130_reg_1510);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_absorb_block_fu_781_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_absorb_block_fu_781_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state5) or ((trunc_ln123_fu_1235_p1 = ap_const_lv1_1) and (icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (trunc_ln123_fu_1235_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln71_fu_1093_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
                    grp_absorb_block_fu_781_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_absorb_block_fu_781_ap_ready = ap_const_logic_1)) then 
                    grp_absorb_block_fu_781_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_add_E_fu_930_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_add_E_fu_930_ap_start_reg <= ap_const_logic_0;
            else
                if ((((trunc_ln123_fu_1235_p1 = ap_const_lv1_1) and (icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (trunc_ln123_fu_1235_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
                    grp_add_E_fu_930_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_add_E_fu_930_ap_ready = ap_const_logic_1)) then 
                    grp_add_E_fu_930_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_pack_16_fu_917_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_pack_16_fu_917_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
                    grp_frodo_pack_16_fu_917_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_pack_16_fu_917_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_pack_16_fu_917_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_gen_S_sample_write_fu_716_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_gen_S_sample_write_fu_716_ap_start_reg <= ap_const_logic_0;
            else
                if ((((trunc_ln123_fu_1235_p1 = ap_const_lv1_1) and (icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (trunc_ln123_fu_1235_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((trunc_ln83_fu_1150_p1 = ap_const_lv1_1) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((trunc_ln83_fu_1150_p1 = ap_const_lv1_0) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
                    grp_gen_S_sample_write_fu_716_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_gen_S_sample_write_fu_716_ap_ready = ap_const_logic_1)) then 
                    grp_gen_S_sample_write_fu_716_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_matrix_mul_fu_855_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_matrix_mul_fu_855_ap_start_reg <= ap_const_logic_0;
            else
                if ((((trunc_ln83_fu_1150_p1 = ap_const_lv1_1) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((trunc_ln83_fu_1150_p1 = ap_const_lv1_0) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then 
                    grp_vector_matrix_mul_fu_855_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_matrix_mul_fu_855_ap_ready = ap_const_logic_1)) then 
                    grp_vector_matrix_mul_fu_855_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_625_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                i_0_reg_625 <= i_reg_1409;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_625 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_637_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i_1_reg_637 <= i_7_reg_1422;
            elsif (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then 
                i_1_reg_637 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_2_reg_648_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                i_2_reg_648 <= i_8_reg_1446;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                i_2_reg_648 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_3_reg_660_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
                i_3_reg_660 <= i_9_reg_1463;
            elsif (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                i_3_reg_660 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_4_reg_671_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_1154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_4_reg_671 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                i_4_reg_671 <= i_11_reg_1500;
            end if; 
        end if;
    end process;

    i_5_reg_693_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
                i_5_reg_693 <= i_10_reg_1554;
            elsif (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                i_5_reg_693 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_6_reg_704_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_1349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then 
                i_6_reg_704 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_6_reg_704 <= i_12_reg_1572;
            end if; 
        end if;
    end process;

    phi_mul_reg_682_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_1154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                phi_mul_reg_682 <= ap_const_lv13_0;
            elsif (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
                phi_mul_reg_682 <= add_ln140_reg_1520;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    add_ln108_1_reg_1488(13 downto 7) <= add_ln108_1_fu_1224_p2(13 downto 7);
                icmp_ln101_reg_1483 <= icmp_ln101_fu_1187_p2;
                icmp_ln85_reg_1468 <= icmp_ln85_fu_1166_p2;
                icmp_ln90_reg_1473 <= icmp_ln90_fu_1173_p2;
                xor_ln90_reg_1478 <= xor_ln90_fu_1180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                add_ln140_reg_1520 <= add_ln140_fu_1281_p2;
                    add_ln144_reg_1536(12 downto 7) <= add_ln144_fu_1317_p2(12 downto 7);
                icmp_ln125_reg_1505 <= icmp_ln125_fu_1251_p2;
                icmp_ln130_reg_1510 <= icmp_ln130_fu_1257_p2;
                icmp_ln135_reg_1515 <= icmp_ln135_fu_1274_p2;
                sext_ln140_reg_1530 <= sext_ln140_fu_1293_p1;
                sk_offset_reg_1525 <= sk_offset_fu_1287_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                add_ln146_reg_1541 <= add_ln146_fu_1332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                add_ln154_reg_1546 <= add_ln154_fu_1342_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state26)) then
                i_10_reg_1554 <= i_10_fu_1355_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then
                i_11_reg_1500 <= i_11_fu_1245_p2;
                trunc_ln123_reg_1493 <= trunc_ln123_fu_1235_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                i_12_reg_1572 <= i_12_fu_1372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                i_7_reg_1422 <= i_7_fu_1021_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                i_8_reg_1446 <= i_8_fu_1099_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                i_9_reg_1463 <= i_9_fu_1160_p2;
                trunc_ln83_reg_1456 <= trunc_ln83_fu_1150_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_1409 <= i_fu_968_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln83_fu_1150_p1 = ap_const_lv1_1) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)) or ((trunc_ln83_fu_1150_p1 = ap_const_lv1_0) and (icmp_ln83_fu_1154_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state15)))) then
                reg_952 <= grp_fu_939_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((trunc_ln123_fu_1235_p1 = ap_const_lv1_1) and (icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (trunc_ln123_fu_1235_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then
                    reg_957(13 downto 7) <= grp_fu_946_p2(13 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln71_fu_1093_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                seed_A_addr_reg_1451 <= zext_ln73_fu_1105_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln168_fu_1349_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    zext_ln170_reg_1559(3 downto 0) <= zext_ln170_fu_1361_p1(3 downto 0);
            end if;
        end if;
    end process;
    reg_957(6 downto 0) <= "1010000";
    add_ln108_1_reg_1488(6 downto 0) <= "1010000";
    add_ln144_reg_1536(6 downto 0) <= "0000000";
    zext_ln170_reg_1559(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state15, icmp_ln83_fu_1154_p2, ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, trunc_ln123_fu_1235_p1, ap_CS_fsm_state2, icmp_ln47_fu_962_p2, ap_CS_fsm_state7, icmp_ln61_fu_1015_p2, ap_CS_fsm_state12, icmp_ln71_fu_1093_p2, ap_CS_fsm_state26, icmp_ln168_fu_1349_p2, ap_CS_fsm_state28, icmp_ln174_fu_1366_p2, grp_absorb_block_fu_781_ap_done, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_block_state16_on_subcall_done, ap_CS_fsm_state20, ap_block_state20_on_subcall_done, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_block_state18_on_subcall_done, ap_block_state21_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln47_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((icmp_ln61_fu_1015_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if (((icmp_ln71_fu_1093_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state14 => 
                if (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state14))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state14;
                end if;
            when ap_ST_fsm_state15 => 
                if (((icmp_ln83_fu_1154_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_boolean_0 = ap_block_state16_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state16))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((trunc_ln123_fu_1235_p1 = ap_const_lv1_1) and (icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                elsif (((icmp_ln123_fu_1239_p2 = ap_const_lv1_0) and (trunc_ln123_fu_1235_p1 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_boolean_0 = ap_block_state18_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state18))) then
                    ap_NS_fsm <= ap_ST_fsm_state19;
                else
                    ap_NS_fsm <= ap_ST_fsm_state18;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_boolean_0 = ap_block_state20_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state20))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                if (((ap_const_boolean_0 = ap_block_state21_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state21))) then
                    ap_NS_fsm <= ap_ST_fsm_state22;
                else
                    ap_NS_fsm <= ap_ST_fsm_state21;
                end if;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                if (((grp_absorb_block_fu_781_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state25))) then
                    ap_NS_fsm <= ap_ST_fsm_state26;
                else
                    ap_NS_fsm <= ap_ST_fsm_state25;
                end if;
            when ap_ST_fsm_state26 => 
                if (((icmp_ln168_fu_1349_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state26))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state28 => 
                if (((icmp_ln174_fu_1366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_1_address0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_1_address0, grp_frodo_pack_16_fu_917_in_r_address0, grp_add_E_fu_930_out_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_1_address0 <= grp_add_E_fu_930_out_r_address0;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_1_address0 <= grp_frodo_pack_16_fu_917_in_r_address0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_address0 <= grp_vector_matrix_mul_fu_855_A_1_address0;
        else 
            A_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_1_address1_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_1_address1, grp_frodo_pack_16_fu_917_in_r_address1, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_1_address1 <= grp_frodo_pack_16_fu_917_in_r_address1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_address1 <= grp_vector_matrix_mul_fu_855_A_1_address1;
        else 
            A_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_1_ce0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_1_ce0, grp_frodo_pack_16_fu_917_in_r_ce0, grp_add_E_fu_930_out_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_1_ce0 <= grp_add_E_fu_930_out_r_ce0;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_1_ce0 <= grp_frodo_pack_16_fu_917_in_r_ce0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_ce0 <= grp_vector_matrix_mul_fu_855_A_1_ce0;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_1_ce1, grp_frodo_pack_16_fu_917_in_r_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_1_ce1 <= grp_frodo_pack_16_fu_917_in_r_ce1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_ce1 <= grp_vector_matrix_mul_fu_855_A_1_ce1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_d0_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_1_d0, grp_add_E_fu_930_out_r_d0, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_1_d0 <= grp_add_E_fu_930_out_r_d0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_d0 <= grp_vector_matrix_mul_fu_855_A_1_d0;
        else 
            A_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_1_we0_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_1_we0, grp_add_E_fu_930_out_r_we0, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            A_1_we0 <= grp_add_E_fu_930_out_r_we0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_we0 <= grp_vector_matrix_mul_fu_855_A_1_we0;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we1_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_1_we1, ap_CS_fsm_state16)
    begin
        if ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_1_we1 <= grp_vector_matrix_mul_fu_855_A_1_we1;
        else 
            A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_address0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_2_address0, grp_frodo_pack_16_fu_917_in_r_address0, grp_add_E_fu_930_out_r_address0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_address0 <= grp_add_E_fu_930_out_r_address0;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_2_address0 <= grp_frodo_pack_16_fu_917_in_r_address0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_address0 <= grp_vector_matrix_mul_fu_855_A_2_address0;
        else 
            A_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_2_address1_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_2_address1, grp_frodo_pack_16_fu_917_in_r_address1, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_2_address1 <= grp_frodo_pack_16_fu_917_in_r_address1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_address1 <= grp_vector_matrix_mul_fu_855_A_2_address1;
        else 
            A_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    A_2_ce0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_2_ce0, grp_frodo_pack_16_fu_917_in_r_ce0, grp_add_E_fu_930_out_r_ce0, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_ce0 <= grp_add_E_fu_930_out_r_ce0;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_2_ce0 <= grp_frodo_pack_16_fu_917_in_r_ce0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_ce0 <= grp_vector_matrix_mul_fu_855_A_2_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce1_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_vector_matrix_mul_fu_855_A_2_ce1, grp_frodo_pack_16_fu_917_in_r_ce1, ap_CS_fsm_state16, ap_CS_fsm_state20)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            A_2_ce1 <= grp_frodo_pack_16_fu_917_in_r_ce1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_ce1 <= grp_vector_matrix_mul_fu_855_A_2_ce1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_d0_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_2_d0, grp_add_E_fu_930_out_r_d0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_d0 <= grp_add_E_fu_930_out_r_d0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_d0 <= grp_vector_matrix_mul_fu_855_A_2_d0;
        else 
            A_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    A_2_we0_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_2_we0, grp_add_E_fu_930_out_r_we0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            A_2_we0 <= grp_add_E_fu_930_out_r_we0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_we0 <= grp_vector_matrix_mul_fu_855_A_2_we0;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we1_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_A_2_we1, ap_CS_fsm_state16)
    begin
        if ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            A_2_we1 <= grp_vector_matrix_mul_fu_855_A_2_we1;
        else 
            A_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce0_assign_proc : process(grp_add_E_fu_930_in1_ce0, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            B_ce0 <= grp_add_E_fu_930_in1_ce0;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_B_ce1, ap_CS_fsm_state16)
    begin
        if ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            B_ce1 <= grp_vector_matrix_mul_fu_855_B_ce1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_B_we1, ap_CS_fsm_state16)
    begin
        if ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            B_we1 <= grp_vector_matrix_mul_fu_855_B_we1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_address0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_address0, grp_vector_matrix_mul_fu_855_S_address0, grp_add_E_fu_930_in2_address0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            S_1_address0 <= grp_add_E_fu_930_in2_address0;
        elsif (((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            S_1_address0 <= grp_vector_matrix_mul_fu_855_S_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_1_address0 <= grp_gen_S_sample_write_fu_716_S_address0;
        else 
            S_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_1_ce0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_ce0, grp_vector_matrix_mul_fu_855_S_ce0, grp_add_E_fu_930_in2_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            S_1_ce0 <= grp_add_E_fu_930_in2_ce0;
        elsif (((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            S_1_ce0 <= grp_vector_matrix_mul_fu_855_S_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_1_ce0 <= grp_gen_S_sample_write_fu_716_S_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_we0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_we0, ap_CS_fsm_state16, ap_CS_fsm_state18)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_1_we0 <= grp_gen_S_sample_write_fu_716_S_we0;
        else 
            S_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_address0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_address0, grp_vector_matrix_mul_fu_855_S_address0, grp_add_E_fu_930_in2_address0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            S_2_address0 <= grp_add_E_fu_930_in2_address0;
        elsif (((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            S_2_address0 <= grp_vector_matrix_mul_fu_855_S_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_2_address0 <= grp_gen_S_sample_write_fu_716_S_address0;
        else 
            S_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_2_ce0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_ce0, grp_vector_matrix_mul_fu_855_S_ce0, grp_add_E_fu_930_in2_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            S_2_ce0 <= grp_add_E_fu_930_in2_ce0;
        elsif (((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16))) then 
            S_2_ce0 <= grp_vector_matrix_mul_fu_855_S_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_2_ce0 <= grp_gen_S_sample_write_fu_716_S_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_we0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_S_we0, ap_CS_fsm_state16, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            S_2_we0 <= grp_gen_S_sample_write_fu_716_S_we0;
        else 
            S_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_1_address0_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, trunc_ln123_reg_1493, grp_absorb_block_fu_781_input_r_address0, grp_frodo_pack_16_fu_917_out_r_address0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state21, zext_ln49_fu_987_p1, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_1_address0 <= ap_const_lv64_25A(10 - 1 downto 0);
        elsif (((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            X_1_address0 <= ap_const_lv64_258(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_1_address0 <= ap_const_lv64_B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_1_address0 <= zext_ln49_fu_987_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_1_address0 <= ap_const_lv64_8(10 - 1 downto 0);
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_1_address0 <= grp_frodo_pack_16_fu_917_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_1_address0 <= grp_absorb_block_fu_781_input_r_address0;
        else 
            X_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_1_address1_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, grp_absorb_block_fu_781_input_r_address1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state4, zext_ln73_1_fu_1110_p1, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            X_1_address1 <= ap_const_lv64_25B(10 - 1 downto 0);
        elsif (((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            X_1_address1 <= ap_const_lv64_259(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            X_1_address1 <= zext_ln73_1_fu_1110_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            X_1_address1 <= ap_const_lv64_A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            X_1_address1 <= ap_const_lv64_9(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_1_address1 <= grp_absorb_block_fu_781_input_r_address1;
        else 
            X_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_1_ce0_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, trunc_ln123_reg_1493, grp_absorb_block_fu_781_input_r_ce0, grp_frodo_pack_16_fu_917_out_r_ce0, ap_CS_fsm_state3, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state20, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            X_1_ce0 <= ap_const_logic_1;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_1_ce0 <= grp_frodo_pack_16_fu_917_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_1_ce0 <= grp_absorb_block_fu_781_input_r_ce0;
        else 
            X_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_1_ce1_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, grp_absorb_block_fu_781_input_r_ce1, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state21, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            X_1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            X_1_ce1 <= grp_absorb_block_fu_781_input_r_ce1;
        else 
            X_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_1_d0_assign_proc : process(randomness_q0, ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_out_r_d0, ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            X_1_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            X_1_d0 <= randomness_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            X_1_d0 <= ap_const_lv16_1F00;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_1_d0 <= grp_frodo_pack_16_fu_917_out_r_d0;
        else 
            X_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_1_d1_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, seed_A_q0, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            X_1_d1 <= seed_A_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            X_1_d1 <= ap_const_lv16_0;
        else 
            X_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    X_1_we0_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, icmp_ln47_fu_962_p2, trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_out_r_we0, ap_CS_fsm_state3, ap_CS_fsm_state20, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln47_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            X_1_we0 <= ap_const_logic_1;
        elsif (((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_1_we0 <= grp_frodo_pack_16_fu_917_out_r_we0;
        else 
            X_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    X_1_we1_assign_proc : process(ap_CS_fsm_state17, icmp_ln123_fu_1239_p2, ap_CS_fsm_state2, icmp_ln47_fu_962_p2, ap_CS_fsm_state13, ap_CS_fsm_state4, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state13) or ((icmp_ln123_fu_1239_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state17)) or ((icmp_ln47_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            X_1_we1 <= ap_const_logic_1;
        else 
            X_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    X_2_address0_assign_proc : process(trunc_ln123_reg_1493, grp_absorb_block_fu_781_input_r_address0, grp_frodo_pack_16_fu_917_out_r_address0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_2_address0 <= grp_frodo_pack_16_fu_917_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            X_2_address0 <= grp_absorb_block_fu_781_input_r_address0;
        else 
            X_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    X_2_ce0_assign_proc : process(trunc_ln123_reg_1493, grp_absorb_block_fu_781_input_r_ce0, grp_frodo_pack_16_fu_917_out_r_ce0, ap_CS_fsm_state20, ap_CS_fsm_state18)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_2_ce0 <= grp_frodo_pack_16_fu_917_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            X_2_ce0 <= grp_absorb_block_fu_781_input_r_ce0;
        else 
            X_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    X_2_ce1_assign_proc : process(grp_absorb_block_fu_781_input_r_ce1, ap_CS_fsm_state18)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            X_2_ce1 <= grp_absorb_block_fu_781_input_r_ce1;
        else 
            X_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    X_2_we0_assign_proc : process(trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_out_r_we0, ap_CS_fsm_state20)
    begin
        if (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20))) then 
            X_2_we0 <= grp_frodo_pack_16_fu_917_out_r_we0;
        else 
            X_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln108_1_fu_1224_p2 <= std_logic_vector(unsigned(zext_ln108_1_fu_1220_p1) + unsigned(ap_const_lv14_12D0));
    add_ln108_fu_1214_p2 <= std_logic_vector(unsigned(zext_ln108_fu_1210_p1) + unsigned(shl_ln1_fu_1194_p3));
    add_ln140_fu_1281_p2 <= std_logic_vector(unsigned(phi_mul_reg_682) + unsigned(ap_const_lv13_258));
    add_ln144_fu_1317_p2 <= std_logic_vector(unsigned(zext_ln144_fu_1313_p1) + unsigned(shl_ln2_fu_1297_p3));
    add_ln146_fu_1332_p2 <= std_logic_vector(unsigned(zext_ln146_fu_1329_p1) + unsigned(ap_const_lv17_8));
    add_ln154_fu_1342_p2 <= std_logic_vector(unsigned(zext_ln154_fu_1339_p1) + unsigned(ap_const_lv17_8));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state16_on_subcall_done_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_ap_done, grp_vector_matrix_mul_fu_855_ap_done)
    begin
                ap_block_state16_on_subcall_done <= (((trunc_ln83_reg_1456 = ap_const_lv1_1) and (grp_vector_matrix_mul_fu_855_ap_done = ap_const_logic_0)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (grp_vector_matrix_mul_fu_855_ap_done = ap_const_logic_0)) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (grp_gen_S_sample_write_fu_716_ap_done = ap_const_logic_0)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (grp_gen_S_sample_write_fu_716_ap_done = ap_const_logic_0)));
    end process;


    ap_block_state18_on_subcall_done_assign_proc : process(grp_gen_S_sample_write_fu_716_ap_done, grp_absorb_block_fu_781_ap_done, grp_add_E_fu_930_ap_done)
    begin
                ap_block_state18_on_subcall_done <= ((grp_add_E_fu_930_ap_done = ap_const_logic_0) or (grp_absorb_block_fu_781_ap_done = ap_const_logic_0) or (grp_gen_S_sample_write_fu_716_ap_done = ap_const_logic_0));
    end process;


    ap_block_state20_on_subcall_done_assign_proc : process(trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_ap_done)
    begin
                ap_block_state20_on_subcall_done <= (((trunc_ln123_reg_1493 = ap_const_lv1_1) and (grp_frodo_pack_16_fu_917_ap_done = ap_const_logic_0)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (grp_frodo_pack_16_fu_917_ap_done = ap_const_logic_0)));
    end process;


    ap_block_state21_on_subcall_done_assign_proc : process(grp_gen_S_sample_write_fu_716_ap_done, grp_absorb_block_fu_781_ap_done, grp_add_E_fu_930_ap_done)
    begin
                ap_block_state21_on_subcall_done <= ((grp_add_E_fu_930_ap_done = ap_const_logic_0) or (grp_absorb_block_fu_781_ap_done = ap_const_logic_0) or (grp_gen_S_sample_write_fu_716_ap_done = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state28, icmp_ln174_fu_1366_p2)
    begin
        if (((icmp_ln174_fu_1366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state28, icmp_ln174_fu_1366_p2)
    begin
        if (((icmp_ln174_fu_1366_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    empty_fu_1127_p1 <= seed_A_q0(8 - 1 downto 0);
    grp_absorb_block_fu_781_ap_start <= grp_absorb_block_fu_781_ap_start_reg;

    grp_absorb_block_fu_781_begin_r_assign_proc : process(icmp_ln135_reg_1515, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_absorb_block_fu_781_begin_r <= icmp_ln135_reg_1515;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_absorb_block_fu_781_begin_r <= ap_const_lv1_1;
        else 
            grp_absorb_block_fu_781_begin_r <= "X";
        end if; 
    end process;


    grp_absorb_block_fu_781_inlen_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            grp_absorb_block_fu_781_inlen <= ap_const_lv9_97;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_absorb_block_fu_781_inlen <= ap_const_lv9_96;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            grp_absorb_block_fu_781_inlen <= ap_const_lv9_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_absorb_block_fu_781_inlen <= ap_const_lv9_3;
        else 
            grp_absorb_block_fu_781_inlen <= "XXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_781_input_r_q0_assign_proc : process(X_1_q0, X_2_q0, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_absorb_block_fu_781_input_r_q0 <= X_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_absorb_block_fu_781_input_r_q0 <= X_1_q0;
        else 
            grp_absorb_block_fu_781_input_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_781_input_r_q1_assign_proc : process(X_1_q1, X_2_q1, ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_absorb_block_fu_781_input_r_q1 <= X_2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_absorb_block_fu_781_input_r_q1 <= X_1_q1;
        else 
            grp_absorb_block_fu_781_input_r_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_781_outlen_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_absorb_block_fu_781_outlen <= ap_const_lv6_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_absorb_block_fu_781_outlen <= ap_const_lv6_10;
        else 
            grp_absorb_block_fu_781_outlen <= "XXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_781_output_offset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
            grp_absorb_block_fu_781_output_offset <= ap_const_lv1_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_absorb_block_fu_781_output_offset <= ap_const_lv1_1;
        else 
            grp_absorb_block_fu_781_output_offset <= "X";
        end if; 
    end process;


    grp_absorb_block_fu_781_reset_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state14, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
            grp_absorb_block_fu_781_reset <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            grp_absorb_block_fu_781_reset <= ap_const_lv1_1;
        else 
            grp_absorb_block_fu_781_reset <= "X";
        end if; 
    end process;

    grp_add_E_fu_930_ap_start <= grp_add_E_fu_930_ap_start_reg;

    grp_add_E_fu_930_in2_q0_assign_proc : process(S_1_q0, S_2_q0, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            grp_add_E_fu_930_in2_q0 <= S_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            grp_add_E_fu_930_in2_q0 <= S_2_q0;
        else 
            grp_add_E_fu_930_in2_q0 <= "XXXXXXX";
        end if; 
    end process;

    grp_frodo_pack_16_fu_917_ap_start <= grp_frodo_pack_16_fu_917_ap_start_reg;

    grp_frodo_pack_16_fu_917_in_r_q0_assign_proc : process(trunc_ln123_reg_1493, A_1_q0, A_2_q0, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
            if ((trunc_ln123_reg_1493 = ap_const_lv1_1)) then 
                grp_frodo_pack_16_fu_917_in_r_q0 <= A_2_q0;
            elsif ((trunc_ln123_reg_1493 = ap_const_lv1_0)) then 
                grp_frodo_pack_16_fu_917_in_r_q0 <= A_1_q0;
            else 
                grp_frodo_pack_16_fu_917_in_r_q0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_frodo_pack_16_fu_917_in_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_frodo_pack_16_fu_917_in_r_q1_assign_proc : process(trunc_ln123_reg_1493, A_1_q1, A_2_q1, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
            if ((trunc_ln123_reg_1493 = ap_const_lv1_1)) then 
                grp_frodo_pack_16_fu_917_in_r_q1 <= A_2_q1;
            elsif ((trunc_ln123_reg_1493 = ap_const_lv1_0)) then 
                grp_frodo_pack_16_fu_917_in_r_q1 <= A_1_q1;
            else 
                grp_frodo_pack_16_fu_917_in_r_q1 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_frodo_pack_16_fu_917_in_r_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_frodo_pack_16_fu_917_sk_offset_assign_proc : process(trunc_ln123_reg_1493, add_ln146_reg_1541, add_ln154_reg_1546, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then
            if ((trunc_ln123_reg_1493 = ap_const_lv1_1)) then 
                grp_frodo_pack_16_fu_917_sk_offset <= add_ln154_reg_1546;
            elsif ((trunc_ln123_reg_1493 = ap_const_lv1_0)) then 
                grp_frodo_pack_16_fu_917_sk_offset <= add_ln146_reg_1541;
            else 
                grp_frodo_pack_16_fu_917_sk_offset <= "XXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_frodo_pack_16_fu_917_sk_offset <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_939_p2 <= std_logic_vector(unsigned(i_3_reg_660) + unsigned(ap_const_lv4_F));
    grp_fu_946_p2 <= std_logic_vector(unsigned(zext_ln142_fu_1324_p1) + unsigned(ap_const_lv14_12D0));

    grp_gen_S_sample_write_fu_716_S_q0_assign_proc : process(trunc_ln83_reg_1456, S_1_q0, S_2_q0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_gen_S_sample_write_fu_716_S_q0 <= S_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_gen_S_sample_write_fu_716_S_q0 <= S_2_q0;
        else 
            grp_gen_S_sample_write_fu_716_S_q0 <= "XXXXXXX";
        end if; 
    end process;

    grp_gen_S_sample_write_fu_716_ap_start <= grp_gen_S_sample_write_fu_716_ap_start_reg;

    grp_gen_S_sample_write_fu_716_begin_write_assign_proc : process(trunc_ln83_reg_1456, icmp_ln85_reg_1468, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_gen_S_sample_write_fu_716_begin_write <= ap_const_lv1_0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_gen_S_sample_write_fu_716_begin_write <= icmp_ln85_reg_1468;
        else 
            grp_gen_S_sample_write_fu_716_begin_write <= "X";
        end if; 
    end process;


    grp_gen_S_sample_write_fu_716_reset_assign_proc : process(trunc_ln83_reg_1456, icmp_ln90_reg_1473, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_gen_S_sample_write_fu_716_reset <= ap_const_lv1_0;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_gen_S_sample_write_fu_716_reset <= icmp_ln90_reg_1473;
        else 
            grp_gen_S_sample_write_fu_716_reset <= "X";
        end if; 
    end process;


    grp_gen_S_sample_write_fu_716_sk_offset_assign_proc : process(reg_957, trunc_ln83_reg_1456, add_ln108_1_reg_1488, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18))) then 
            grp_gen_S_sample_write_fu_716_sk_offset <= reg_957;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            grp_gen_S_sample_write_fu_716_sk_offset <= add_ln108_1_reg_1488;
        else 
            grp_gen_S_sample_write_fu_716_sk_offset <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_855_S_q0_assign_proc : process(trunc_ln83_reg_1456, S_1_q0, S_2_q0, ap_CS_fsm_state16)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
            if ((trunc_ln83_reg_1456 = ap_const_lv1_1)) then 
                grp_vector_matrix_mul_fu_855_S_q0 <= S_2_q0;
            elsif ((trunc_ln83_reg_1456 = ap_const_lv1_0)) then 
                grp_vector_matrix_mul_fu_855_S_q0 <= S_1_q0;
            else 
                grp_vector_matrix_mul_fu_855_S_q0 <= "XXXXXXX";
            end if;
        else 
            grp_vector_matrix_mul_fu_855_S_q0 <= "XXXXXXX";
        end if; 
    end process;

    grp_vector_matrix_mul_fu_855_ap_start <= grp_vector_matrix_mul_fu_855_ap_start_reg;
    i_10_fu_1355_p2 <= std_logic_vector(unsigned(i_5_reg_693) + unsigned(ap_const_lv4_1));
    i_11_fu_1245_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_4_reg_671));
    i_12_fu_1372_p2 <= std_logic_vector(unsigned(i_6_reg_704) + unsigned(ap_const_lv4_1));
    i_7_fu_1021_p2 <= std_logic_vector(unsigned(i_1_reg_637) + unsigned(ap_const_lv3_1));
    i_8_fu_1099_p2 <= std_logic_vector(unsigned(i_2_reg_648) + unsigned(ap_const_lv4_1));
    i_9_fu_1160_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_3_reg_660));
    i_fu_968_p2 <= std_logic_vector(unsigned(i_0_reg_625) + unsigned(ap_const_lv4_1));
    icmp_ln101_fu_1187_p2 <= "1" when (i_3_reg_660 = ap_const_lv4_1) else "0";
    icmp_ln123_fu_1239_p2 <= "1" when (i_4_reg_671 = ap_const_lv4_9) else "0";
    icmp_ln125_fu_1251_p2 <= "0" when (i_4_reg_671 = ap_const_lv4_0) else "1";
    icmp_ln130_fu_1257_p2 <= "0" when (i_4_reg_671 = ap_const_lv4_8) else "1";
    icmp_ln135_fu_1274_p2 <= "0" when (tmp_5_fu_1264_p4 = ap_const_lv3_0) else "1";
    icmp_ln168_fu_1349_p2 <= "1" when (i_5_reg_693 = ap_const_lv4_8) else "0";
    icmp_ln174_fu_1366_p2 <= "1" when (i_6_reg_704 = ap_const_lv4_8) else "0";
    icmp_ln47_fu_962_p2 <= "1" when (i_0_reg_625 = ap_const_lv4_8) else "0";
    icmp_ln61_fu_1015_p2 <= "1" when (i_1_reg_637 = ap_const_lv3_7) else "0";
    icmp_ln71_fu_1093_p2 <= "1" when (i_2_reg_648 = ap_const_lv4_8) else "0";
    icmp_ln83_fu_1154_p2 <= "1" when (i_3_reg_660 = ap_const_lv4_9) else "0";
    icmp_ln85_fu_1166_p2 <= "0" when (i_3_reg_660 = ap_const_lv4_8) else "1";
    icmp_ln90_fu_1173_p2 <= "1" when (i_3_reg_660 = ap_const_lv4_0) else "0";
    lshr_ln_fu_1061_p4 <= randomness_q1(15 downto 8);
    or_ln1_fu_974_p3 <= (ap_const_lv1_1 & i_0_reg_625);
    or_ln2_fu_1071_p3 <= (trunc_ln63_fu_1053_p1 & lshr_ln_fu_1061_p4);
    or_ln3_fu_1383_p3 <= (ap_const_lv10_26D & i_6_reg_704);
    or_ln63_1_fu_1027_p3 <= (ap_const_lv1_1 & i_1_reg_637);
    or_ln63_2_fu_1040_p3 <= (ap_const_lv1_1 & i_7_fu_1021_p2);
    or_ln65_fu_1086_p2 <= (shl_ln65_fu_1080_p2 or ap_const_lv16_1F);
    or_ln_fu_1002_p3 <= (ap_const_lv7_5F & tmp_fu_992_p4);
    p_1_fu_1131_p4 <= seed_A_q0(15 downto 8);

    pk_address0_assign_proc : process(trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_pk_address0, ap_CS_fsm_state13, ap_CS_fsm_state20, zext_ln73_1_fu_1110_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_address0 <= zext_ln73_1_fu_1110_p1(13 - 1 downto 0);
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            pk_address0 <= grp_frodo_pack_16_fu_917_pk_address0;
        else 
            pk_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    pk_ce0_assign_proc : process(trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_pk_ce0, ap_CS_fsm_state13, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_ce0 <= ap_const_logic_1;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            pk_ce0 <= grp_frodo_pack_16_fu_917_pk_ce0;
        else 
            pk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    pk_d0_assign_proc : process(trunc_ln123_reg_1493, seed_A_q0, grp_frodo_pack_16_fu_917_pk_d0, ap_CS_fsm_state13, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_d0 <= seed_A_q0;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            pk_d0 <= grp_frodo_pack_16_fu_917_pk_d0;
        else 
            pk_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk_we0_assign_proc : process(trunc_ln123_reg_1493, grp_frodo_pack_16_fu_917_pk_we0, ap_CS_fsm_state13, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            pk_we0 <= ap_const_logic_1;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            pk_we0 <= grp_frodo_pack_16_fu_917_pk_we0;
        else 
            pk_we0 <= ap_const_logic_0;
        end if; 
    end process;


    randomness_address0_assign_proc : process(ap_CS_fsm_state2, icmp_ln47_fu_962_p2, ap_CS_fsm_state7, zext_ln49_1_fu_982_p1, zext_ln63_fu_1035_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            randomness_address0 <= zext_ln63_fu_1035_p1(5 - 1 downto 0);
        elsif (((icmp_ln47_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            randomness_address0 <= ap_const_lv64_8(5 - 1 downto 0);
        elsif (((icmp_ln47_fu_962_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            randomness_address0 <= zext_ln49_1_fu_982_p1(5 - 1 downto 0);
        else 
            randomness_address0 <= "XXXXX";
        end if; 
    end process;


    randomness_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state26, zext_ln170_fu_1361_p1, zext_ln63_2_fu_1048_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            randomness_address1 <= zext_ln170_fu_1361_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            randomness_address1 <= ap_const_lv64_F(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            randomness_address1 <= zext_ln63_2_fu_1048_p1(5 - 1 downto 0);
        else 
            randomness_address1 <= "XXXXX";
        end if; 
    end process;


    randomness_ce0_assign_proc : process(ap_CS_fsm_state2, icmp_ln47_fu_962_p2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((icmp_ln47_fu_962_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((icmp_ln47_fu_962_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2)))) then 
            randomness_ce0 <= ap_const_logic_1;
        else 
            randomness_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    randomness_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state26)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            randomness_ce1 <= ap_const_logic_1;
        else 
            randomness_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_address0_assign_proc : process(ap_CS_fsm_state12, seed_A_addr_reg_1451, icmp_ln71_fu_1093_p2, trunc_ln83_reg_1456, ap_CS_fsm_state28, grp_absorb_block_fu_781_output_r_address0, grp_vector_matrix_mul_fu_855_seed_A_address0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21, zext_ln73_fu_1105_p1, zext_ln176_fu_1378_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            seed_A_address0 <= zext_ln176_fu_1378_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            seed_A_address0 <= seed_A_addr_reg_1451;
        elsif (((icmp_ln71_fu_1093_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            seed_A_address0 <= zext_ln73_fu_1105_p1(4 - 1 downto 0);
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_A_address0 <= grp_vector_matrix_mul_fu_855_seed_A_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seed_A_address0 <= grp_absorb_block_fu_781_output_r_address0;
        else 
            seed_A_address0 <= "XXXX";
        end if; 
    end process;


    seed_A_ce0_assign_proc : process(ap_CS_fsm_state12, icmp_ln71_fu_1093_p2, trunc_ln83_reg_1456, ap_CS_fsm_state28, grp_absorb_block_fu_781_output_r_ce0, grp_vector_matrix_mul_fu_855_seed_A_ce0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((icmp_ln71_fu_1093_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state12)))) then 
            seed_A_ce0 <= ap_const_logic_1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_A_ce0 <= grp_vector_matrix_mul_fu_855_seed_A_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seed_A_ce0 <= grp_absorb_block_fu_781_output_r_ce0;
        else 
            seed_A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_ce1_assign_proc : process(trunc_ln83_reg_1456, grp_vector_matrix_mul_fu_855_seed_A_ce1, ap_CS_fsm_state16)
    begin
        if ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_A_ce1 <= grp_vector_matrix_mul_fu_855_seed_A_ce1;
        else 
            seed_A_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_d0_assign_proc : process(trunc_ln83_reg_1456, grp_absorb_block_fu_781_output_r_d0, grp_vector_matrix_mul_fu_855_seed_A_d0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21, tmp_2_fu_1141_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            seed_A_d0 <= tmp_2_fu_1141_p3;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_A_d0 <= grp_vector_matrix_mul_fu_855_seed_A_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seed_A_d0 <= grp_absorb_block_fu_781_output_r_d0;
        else 
            seed_A_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_we0_assign_proc : process(trunc_ln83_reg_1456, grp_absorb_block_fu_781_output_r_we0, grp_vector_matrix_mul_fu_855_seed_A_we0, ap_CS_fsm_state6, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state16, ap_CS_fsm_state25, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            seed_A_we0 <= ap_const_logic_1;
        elsif ((((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_A_we0 <= grp_vector_matrix_mul_fu_855_seed_A_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            seed_A_we0 <= grp_absorb_block_fu_781_output_r_we0;
        else 
            seed_A_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_address1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_seed_address1, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state4, zext_ln63_1_fu_1057_p1, ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seed_SE_address1 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            seed_SE_address1 <= ap_const_lv64_B(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            seed_SE_address1 <= ap_const_lv64_A(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seed_SE_address1 <= zext_ln63_1_fu_1057_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            seed_SE_address1 <= ap_const_lv64_9(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_SE_address1 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_SE_address1 <= grp_gen_S_sample_write_fu_716_seed_address1;
        else 
            seed_SE_address1 <= "XXXX";
        end if; 
    end process;


    seed_SE_ce0_assign_proc : process(trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_seed_ce0, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_SE_ce0 <= grp_gen_S_sample_write_fu_716_seed_ce0;
        else 
            seed_SE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_ce1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, trunc_ln83_reg_1456, grp_gen_S_sample_write_fu_716_seed_ce1, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state16, ap_CS_fsm_state18, ap_CS_fsm_state21, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seed_SE_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            seed_SE_ce1 <= grp_gen_S_sample_write_fu_716_seed_ce1;
        else 
            seed_SE_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_d1_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9, zext_ln60_fu_1010_p1, or_ln2_fu_1071_p3, or_ln65_fu_1086_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            seed_SE_d1 <= or_ln65_fu_1086_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            seed_SE_d1 <= or_ln2_fu_1071_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            seed_SE_d1 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            seed_SE_d1 <= zext_ln60_fu_1010_p1;
        else 
            seed_SE_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_SE_we1_assign_proc : process(ap_CS_fsm_state7, icmp_ln61_fu_1015_p2, ap_CS_fsm_state10, ap_CS_fsm_state8, ap_CS_fsm_state11, ap_CS_fsm_state4, ap_CS_fsm_state9)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state10) or ((icmp_ln61_fu_1015_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7)))) then 
            seed_SE_we1 <= ap_const_logic_1;
        else 
            seed_SE_we1 <= ap_const_logic_0;
        end if; 
    end process;

        sext_ln140_fu_1293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sk_offset_fu_1287_p2),16));

    shl_ln108_1_fu_1202_p3 <= (i_3_reg_660 & ap_const_lv7_0);
    shl_ln144_1_fu_1305_p3 <= (i_4_reg_671 & ap_const_lv7_0);
    shl_ln1_fu_1194_p3 <= (i_3_reg_660 & ap_const_lv9_0);
    shl_ln2_fu_1297_p3 <= (i_4_reg_671 & ap_const_lv9_0);
    shl_ln65_fu_1080_p2 <= std_logic_vector(shift_left(unsigned(randomness_q1),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));

    sk_address0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, zext_ln170_reg_1559, grp_gen_S_sample_write_fu_716_sk_address0, grp_frodo_pack_16_fu_917_sk_address0, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state18, ap_CS_fsm_state21, zext_ln74_fu_1122_p1, zext_ln176_1_fu_1391_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            sk_address0 <= zext_ln176_1_fu_1391_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_address0 <= zext_ln170_reg_1559(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            sk_address0 <= zext_ln74_fu_1122_p1(14 - 1 downto 0);
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            sk_address0 <= grp_frodo_pack_16_fu_917_sk_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sk_address0 <= grp_gen_S_sample_write_fu_716_sk_address0;
        else 
            sk_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    sk_ce0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_gen_S_sample_write_fu_716_sk_ce0, grp_frodo_pack_16_fu_917_sk_ce0, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sk_ce0 <= ap_const_logic_1;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            sk_ce0 <= grp_frodo_pack_16_fu_917_sk_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sk_ce0 <= grp_gen_S_sample_write_fu_716_sk_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sk_d0_assign_proc : process(randomness_q1, trunc_ln83_reg_1456, trunc_ln123_reg_1493, seed_A_q0, grp_gen_S_sample_write_fu_716_sk_d0, grp_frodo_pack_16_fu_917_sk_d0, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            sk_d0 <= randomness_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sk_d0 <= seed_A_q0;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            sk_d0 <= grp_frodo_pack_16_fu_917_sk_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sk_d0 <= grp_gen_S_sample_write_fu_716_sk_d0;
        else 
            sk_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    sk_offset_fu_1287_p2 <= std_logic_vector(unsigned(zext_ln123_fu_1231_p1) + unsigned(ap_const_lv14_3DB0));

    sk_we0_assign_proc : process(trunc_ln83_reg_1456, trunc_ln123_reg_1493, grp_gen_S_sample_write_fu_716_sk_we0, grp_frodo_pack_16_fu_917_sk_we0, ap_CS_fsm_state13, ap_CS_fsm_state16, ap_CS_fsm_state20, ap_CS_fsm_state27, ap_CS_fsm_state29, ap_CS_fsm_state18, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            sk_we0 <= ap_const_logic_1;
        elsif ((((trunc_ln123_reg_1493 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state20)) or ((trunc_ln123_reg_1493 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state20)))) then 
            sk_we0 <= grp_frodo_pack_16_fu_917_sk_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((trunc_ln83_reg_1456 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state16)) or ((trunc_ln83_reg_1456 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state16)))) then 
            sk_we0 <= grp_gen_S_sample_write_fu_716_sk_we0;
        else 
            sk_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_2_fu_1141_p3 <= (empty_fu_1127_p1 & p_1_fu_1131_p4);
    tmp_5_fu_1264_p4 <= i_4_reg_671(3 downto 1);
    tmp_fu_992_p4 <= randomness_q0(15 downto 8);
    trunc_ln123_fu_1235_p1 <= i_4_reg_671(1 - 1 downto 0);
    trunc_ln63_fu_1053_p1 <= randomness_q0(8 - 1 downto 0);
    trunc_ln83_fu_1150_p1 <= i_3_reg_660(1 - 1 downto 0);
    xor_ln74_fu_1116_p2 <= (i_2_reg_648 xor ap_const_lv4_8);
    xor_ln90_fu_1180_p2 <= (icmp_ln90_fu_1173_p2 xor ap_const_lv1_1);
    zext_ln108_1_fu_1220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln108_fu_1214_p2),14));
    zext_ln108_fu_1210_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln108_1_fu_1202_p3),13));
    zext_ln123_fu_1231_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_682),14));
    zext_ln142_fu_1324_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln144_fu_1317_p2),14));
    zext_ln144_fu_1313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln144_1_fu_1305_p3),13));
    zext_ln146_fu_1329_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln140_reg_1530),17));
    zext_ln154_fu_1339_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln140_reg_1530),17));
    zext_ln170_fu_1361_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_693),64));
    zext_ln176_1_fu_1391_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln3_fu_1383_p3),64));
    zext_ln176_fu_1378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_704),64));
    zext_ln49_1_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln1_fu_974_p3),64));
    zext_ln49_fu_987_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_625),64));
    zext_ln60_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1002_p3),16));
    zext_ln63_1_fu_1057_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_1422),64));
    zext_ln63_2_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln63_2_fu_1040_p3),64));
    zext_ln63_fu_1035_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln63_1_fu_1027_p3),64));
    zext_ln73_1_fu_1110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_648),64));
    zext_ln73_fu_1105_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_fu_1099_p2),64));
    zext_ln74_fu_1122_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln74_fu_1116_p2),64));
end behav;
