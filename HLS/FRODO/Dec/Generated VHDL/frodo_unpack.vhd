-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_unpack is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (14 downto 0);
    outlen : IN STD_LOGIC_VECTOR (10 downto 0) );
end;


architecture behav of frodo_unpack is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv16_F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv11_7FF : STD_LOGIC_VECTOR (10 downto 0) := "11111111111";
    constant ap_const_lv16_10 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_const_lv17_10 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000010000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal j_0_reg_114 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_0_reg_126 : STD_LOGIC_VECTOR (31 downto 0);
    signal outlen_assign_1_reg_138 : STD_LOGIC_VECTOR (10 downto 0);
    signal in_index_0_reg_147 : STD_LOGIC_VECTOR (15 downto 0);
    signal out_index_0_reg_158 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_index_0_reg_158_pp0_iter1_reg : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal trunc_ln32_fu_170_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal trunc_ln32_reg_319 : STD_LOGIC_VECTOR (13 downto 0);
    signal icmp_ln25_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_324 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_324_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal out_index_fu_180_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal out_index_reg_328 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal icmp_ln30_fu_186_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_333 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_reg_333_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal in_index_1_fu_212_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln41_fu_226_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal icmp_ln44_fu_232_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_353 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_reg_353_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln44_fu_238_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln44_reg_358 : STD_LOGIC_VECTOR (15 downto 0);
    signal in_load_reg_363 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln32_fu_250_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln32_reg_368 : STD_LOGIC_VECTOR (16 downto 0);
    signal select_ln44_1_fu_307_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_j_0_phi_fu_118_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_out_index_0_phi_fu_162_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln32_fu_201_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln38_fu_296_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_1_fu_192_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln32_fu_196_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal in_index_fu_206_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_fu_220_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln32_2_fu_246_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln32_1_fu_256_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln32_fu_259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln32_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln30_fu_268_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_275_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Result_s_fu_281_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_fu_301_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    in_index_0_reg_147_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_174_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                in_index_0_reg_147 <= in_index_1_fu_212_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                in_index_0_reg_147 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    j_0_reg_114_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                j_0_reg_114 <= select_ln44_reg_358;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_114 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    out_index_0_reg_158_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                out_index_0_reg_158 <= out_index_reg_328;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                out_index_0_reg_158 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;

    outlen_assign_1_reg_138_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_174_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                outlen_assign_1_reg_138 <= add_ln41_fu_226_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                outlen_assign_1_reg_138 <= outlen;
            end if; 
        end if;
    end process;

    temp_0_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_324_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                                temp_0_reg_126(31 downto 15) <= select_ln44_1_fu_307_p3(31 downto 15);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                temp_0_reg_126(15) <= '0';
                temp_0_reg_126(16) <= '0';
                temp_0_reg_126(17) <= '0';
                temp_0_reg_126(18) <= '0';
                temp_0_reg_126(19) <= '0';
                temp_0_reg_126(20) <= '0';
                temp_0_reg_126(21) <= '0';
                temp_0_reg_126(22) <= '0';
                temp_0_reg_126(23) <= '0';
                temp_0_reg_126(24) <= '0';
                temp_0_reg_126(25) <= '0';
                temp_0_reg_126(26) <= '0';
                temp_0_reg_126(27) <= '0';
                temp_0_reg_126(28) <= '0';
                temp_0_reg_126(29) <= '0';
                temp_0_reg_126(30) <= '0';
                temp_0_reg_126(31) <= '0';
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln25_reg_324 <= icmp_ln25_fu_174_p2;
                icmp_ln25_reg_324_pp0_iter1_reg <= icmp_ln25_reg_324;
                icmp_ln30_reg_333_pp0_iter1_reg <= icmp_ln30_reg_333;
                icmp_ln44_reg_353_pp0_iter1_reg <= icmp_ln44_reg_353;
                out_index_0_reg_158_pp0_iter1_reg <= out_index_0_reg_158;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_174_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln30_reg_333 <= icmp_ln30_fu_186_p2;
                icmp_ln44_reg_353 <= icmp_ln44_fu_232_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                in_load_reg_363 <= in_r_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                out_index_reg_328 <= out_index_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln25_fu_174_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                select_ln44_reg_358 <= select_ln44_fu_238_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln30_reg_333 = ap_const_lv1_1) and (icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                sub_ln32_reg_368 <= sub_ln32_fu_250_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln32_reg_319 <= trunc_ln32_fu_170_p1;
            end if;
        end if;
    end process;
    temp_0_reg_126(14 downto 0) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln25_fu_174_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln25_fu_174_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln25_fu_174_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln32_fu_196_p2 <= std_logic_vector(unsigned(trunc_ln32_1_fu_192_p1) + unsigned(trunc_ln32_reg_319));
    add_ln41_fu_226_p2 <= std_logic_vector(signed(ap_const_lv11_7FF) + signed(outlen_assign_1_reg_138));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln25_fu_174_p2)
    begin
        if ((icmp_ln25_fu_174_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_118_p4_assign_proc : process(j_0_reg_114, ap_CS_fsm_pp0_stage0, icmp_ln25_reg_324, select_ln44_reg_358, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_118_p4 <= select_ln44_reg_358;
        else 
            ap_phi_mux_j_0_phi_fu_118_p4 <= j_0_reg_114;
        end if; 
    end process;


    ap_phi_mux_out_index_0_phi_fu_162_p4_assign_proc : process(out_index_0_reg_158, ap_CS_fsm_pp0_stage0, icmp_ln25_reg_324, out_index_reg_328, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln25_reg_324 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_out_index_0_phi_fu_162_p4 <= out_index_reg_328;
        else 
            ap_phi_mux_out_index_0_phi_fu_162_p4 <= out_index_0_reg_158;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln25_fu_174_p2 <= "1" when (outlen_assign_1_reg_138 = ap_const_lv11_0) else "0";
    icmp_ln30_fu_186_p2 <= "1" when (unsigned(ap_phi_mux_j_0_phi_fu_118_p4) < unsigned(ap_const_lv16_F)) else "0";
    icmp_ln44_fu_232_p2 <= "1" when (j_fu_220_p2 = ap_const_lv16_10) else "0";
    in_index_1_fu_212_p3 <= 
        in_index_fu_206_p2 when (icmp_ln30_fu_186_p2(0) = '1') else 
        in_index_0_reg_147;
    in_index_fu_206_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(in_index_0_reg_147));
    in_r_address0 <= zext_ln32_fu_201_p1(13 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_220_p2 <= std_logic_vector(unsigned(ap_const_lv16_1) + unsigned(ap_phi_mux_j_0_phi_fu_118_p4));
    out_index_fu_180_p2 <= std_logic_vector(unsigned(ap_phi_mux_out_index_0_phi_fu_162_p4) + unsigned(ap_const_lv10_1));
    out_r_address0 <= zext_ln38_fu_296_p1(10 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_fu_281_p4),16));

    out_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln25_reg_324_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln25_reg_324_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Result_s_fu_281_p4 <= p_Val2_s_fu_275_p2(31 downto 17);
    p_Val2_s_fu_275_p2 <= (temp_0_reg_126 or select_ln30_fu_268_p3);
    select_ln30_fu_268_p3 <= 
        shl_ln32_fu_262_p2 when (icmp_ln30_reg_333_pp0_iter1_reg(0) = '1') else 
        ap_const_lv32_0;
    select_ln44_1_fu_307_p3 <= 
        ap_const_lv32_0 when (icmp_ln44_reg_353_pp0_iter1_reg(0) = '1') else 
        temp_fu_301_p2;
    select_ln44_fu_238_p3 <= 
        ap_const_lv16_0 when (icmp_ln44_fu_232_p2(0) = '1') else 
        j_fu_220_p2;
        sext_ln32_fu_259_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln32_reg_368),32));

    shl_ln32_fu_262_p2 <= std_logic_vector(shift_left(unsigned(zext_ln32_1_fu_256_p1),to_integer(unsigned('0' & sext_ln32_fu_259_p1(31-1 downto 0)))));
    sub_ln32_fu_250_p2 <= std_logic_vector(unsigned(ap_const_lv17_10) - unsigned(zext_ln32_2_fu_246_p1));
    temp_fu_301_p2 <= std_logic_vector(shift_left(unsigned(p_Val2_s_fu_275_p2),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    trunc_ln32_1_fu_192_p1 <= in_index_0_reg_147(14 - 1 downto 0);
    trunc_ln32_fu_170_p1 <= in_offset(14 - 1 downto 0);
    zext_ln32_1_fu_256_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_load_reg_363),32));
    zext_ln32_2_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_114),17));
    zext_ln32_fu_201_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln32_fu_196_p2),64));
    zext_ln38_fu_296_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_index_0_reg_158_pp0_iter1_reg),64));
end behav;
