-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity shake_gen_S_E is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    S_ce0 : OUT STD_LOGIC;
    S_we0 : OUT STD_LOGIC;
    S_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    E_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    E_ce0 : OUT STD_LOGIC;
    E_we0 : OUT STD_LOGIC;
    E_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    outlen : IN STD_LOGIC_VECTOR (12 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    low1 : IN STD_LOGIC_VECTOR (10 downto 0);
    high1 : IN STD_LOGIC_VECTOR (11 downto 0);
    low2 : IN STD_LOGIC_VECTOR (12 downto 0);
    high2 : IN STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of shake_gen_S_E is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (10 downto 0) := "00000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (10 downto 0) := "00000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (10 downto 0) := "00000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (10 downto 0) := "00000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (10 downto 0) := "00010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (10 downto 0) := "00100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (10 downto 0) := "01000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_3 : STD_LOGIC_VECTOR (4 downto 0) := "00011";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_const_lv5_5 : STD_LOGIC_VECTOR (4 downto 0) := "00101";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv5_7 : STD_LOGIC_VECTOR (4 downto 0) := "00111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_B : STD_LOGIC_VECTOR (4 downto 0) := "01011";
    constant ap_const_lv5_C : STD_LOGIC_VECTOR (4 downto 0) := "01100";
    constant ap_const_lv5_D : STD_LOGIC_VECTOR (4 downto 0) := "01101";
    constant ap_const_lv5_E : STD_LOGIC_VECTOR (4 downto 0) := "01110";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_12 : STD_LOGIC_VECTOR (4 downto 0) := "10010";
    constant ap_const_lv5_13 : STD_LOGIC_VECTOR (4 downto 0) := "10011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000101";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv64_8000000000000000 : STD_LOGIC_VECTOR (63 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_14 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010100";
    constant ap_const_lv5_15 : STD_LOGIC_VECTOR (4 downto 0) := "10101";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv15_7F0D : STD_LOGIC_VECTOR (14 downto 0) := "111111100001101";
    constant ap_const_lv15_7FFA : STD_LOGIC_VECTOR (14 downto 0) := "111111111111010";
    constant ap_const_lv15_64F3 : STD_LOGIC_VECTOR (14 downto 0) := "110010011110011";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv15_7FB1 : STD_LOGIC_VECTOR (14 downto 0) := "111111110110001";
    constant ap_const_lv15_79A9 : STD_LOGIC_VECTOR (14 downto 0) := "111100110101001";
    constant ap_const_lv15_3433 : STD_LOGIC_VECTOR (14 downto 0) := "011010000110011";
    constant ap_const_lv15_7FE9 : STD_LOGIC_VECTOR (14 downto 0) := "111111111101001";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv15_7D67 : STD_LOGIC_VECTOR (14 downto 0) := "111110101100111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv15_722B : STD_LOGIC_VECTOR (14 downto 0) := "111001000101011";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv15_5063 : STD_LOGIC_VECTOR (14 downto 0) := "101000001100011";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv15_1223 : STD_LOGIC_VECTOR (14 downto 0) := "001001000100011";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_FFF8 : STD_LOGIC_VECTOR (15 downto 0) := "1111111111111000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal t_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_5 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_9 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_14 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_15 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_16 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_17 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_18 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_19 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_21 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_22 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_23 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_24 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal t_20 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal r_0_reg_500 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_reg_510 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fu_575_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_598 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_fu_585_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_602 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_fu_748_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_reg_1468 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_12_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_12_reg_1473 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_15_fu_788_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_15_reg_1498 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_16_fu_792_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_16_reg_1503 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal high2_cast_fu_832_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal high2_cast_reg_1523 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal low2_cast_fu_836_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal low2_cast_reg_1528 : STD_LOGIC_VECTOR (15 downto 0);
    signal high1_cast_fu_840_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal high1_cast_reg_1533 : STD_LOGIC_VECTOR (15 downto 0);
    signal low1_cast_fu_844_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal low1_cast_reg_1538 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln463_fu_901_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln463_reg_1546 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln459_fu_879_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal index_fu_912_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal index_reg_1552 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_KeccakF1600_StatePer_1_fu_521_ap_ready : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_ap_done : STD_LOGIC;
    signal icmp_ln468_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_fu_923_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_1561 : STD_LOGIC_VECTOR (4 downto 0);
    signal true_1_fu_945_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal true_1_reg_1566 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln472_fu_973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln472_reg_1570 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln475_fu_1084_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal j_fu_1090_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal sign_fu_1096_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_reg_1583 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln37_1_fu_1338_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_1_reg_1588 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_1_fu_1356_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln496_fu_1431_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal grp_KeccakF1600_StatePer_1_fu_521_ap_start : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_ap_idle : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_0_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_0_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_5_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_5_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_10_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_10_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_15_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_15_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_20_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_20_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_1_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_1_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_6_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_6_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_11_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_11_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_16_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_16_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_21_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_21_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_2_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_2_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_7_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_7_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_12_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_12_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_17_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_17_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_22_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_22_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_3_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_3_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_8_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_8_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_13_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_13_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_18_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_18_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_23_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_23_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_4_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_4_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_9_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_9_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_14_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_14_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_19_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_19_o_ap_vld : STD_LOGIC;
    signal grp_KeccakF1600_StatePer_1_fu_521_t_24_o : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_t_24_o_ap_vld : STD_LOGIC;
    signal index_0_reg_418 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_i_1_phi_fu_434_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_1_reg_430 : STD_LOGIC_VECTOR (4 downto 0);
    signal index_1_reg_441 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_r_0_ph_phi_fu_455_p42 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln489_fu_1385_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln484_fu_1404_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_s_fu_764_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_1_fu_804_p9 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_Result_2_fu_864_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal e_index_1_fu_260 : STD_LOGIC_VECTOR (15 downto 0);
    signal e_index_fu_1390_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_index_1_fu_264 : STD_LOGIC_VECTOR (15 downto 0);
    signal s_index_fu_1409_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_0_fu_268 : STD_LOGIC_VECTOR (15 downto 0);
    signal outlen_cast_fu_848_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln493_fu_1420_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln83_fu_1376_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_14_fu_760_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_13_fu_756_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_18_fu_800_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_17_fu_796_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal outlen_cast1_fu_828_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_19_fu_852_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_Repl2_8_trunc_fu_856_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln463_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_891_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_20_fu_909_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln470_1_fu_934_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln470_fu_929_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln470_fu_939_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln471_1_fu_956_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln471_fu_951_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln471_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal true_2_fu_967_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal prnd_fu_1100_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln32_fu_1128_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln39_fu_1160_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln51_fu_1174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_1188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln68_fu_1202_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_fu_1216_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln30_fu_1116_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln32_fu_1134_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln30_fu_1222_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln28_fu_1110_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln30_fu_1234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln30_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln37_fu_1142_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_fu_1246_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln39_fu_1166_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln30_fu_1226_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln47_fu_1122_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln28_fu_1260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln47_fu_1266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_1148_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln51_fu_1180_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln37_fu_1252_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln49_fu_1286_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln49_1_fu_1292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln58_fu_1194_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln49_fu_1278_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln66_fu_1154_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln47_fu_1306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln66_fu_1312_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln68_fu_1208_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln49_1_fu_1298_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln37_fu_1326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln37_1_fu_1332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln66_fu_1318_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal r_fu_1346_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal zext_ln37_fu_1360_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_fu_1363_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_1_fu_1369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_1044 : BOOLEAN;
    signal ap_condition_232 : BOOLEAN;

    component KeccakF1600_StatePer_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_0_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_0_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_0_o_ap_vld : OUT STD_LOGIC;
        t_5_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_5_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_5_o_ap_vld : OUT STD_LOGIC;
        t_10_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_10_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_10_o_ap_vld : OUT STD_LOGIC;
        t_15_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_15_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_15_o_ap_vld : OUT STD_LOGIC;
        t_20_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_20_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_20_o_ap_vld : OUT STD_LOGIC;
        t_1_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_1_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_1_o_ap_vld : OUT STD_LOGIC;
        t_6_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_6_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_6_o_ap_vld : OUT STD_LOGIC;
        t_11_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_11_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_11_o_ap_vld : OUT STD_LOGIC;
        t_16_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_16_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_16_o_ap_vld : OUT STD_LOGIC;
        t_21_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_21_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_21_o_ap_vld : OUT STD_LOGIC;
        t_2_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_2_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_2_o_ap_vld : OUT STD_LOGIC;
        t_7_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_7_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_7_o_ap_vld : OUT STD_LOGIC;
        t_12_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_12_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_12_o_ap_vld : OUT STD_LOGIC;
        t_17_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_17_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_17_o_ap_vld : OUT STD_LOGIC;
        t_22_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_22_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_22_o_ap_vld : OUT STD_LOGIC;
        t_3_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_3_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_3_o_ap_vld : OUT STD_LOGIC;
        t_8_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_8_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_8_o_ap_vld : OUT STD_LOGIC;
        t_13_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_13_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_13_o_ap_vld : OUT STD_LOGIC;
        t_18_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_18_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_18_o_ap_vld : OUT STD_LOGIC;
        t_23_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_23_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_23_o_ap_vld : OUT STD_LOGIC;
        t_4_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_4_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_4_o_ap_vld : OUT STD_LOGIC;
        t_9_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_9_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_9_o_ap_vld : OUT STD_LOGIC;
        t_14_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_14_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_14_o_ap_vld : OUT STD_LOGIC;
        t_19_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_19_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_19_o_ap_vld : OUT STD_LOGIC;
        t_24_i : IN STD_LOGIC_VECTOR (63 downto 0);
        t_24_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        t_24_o_ap_vld : OUT STD_LOGIC );
    end component;



begin
    grp_KeccakF1600_StatePer_1_fu_521 : component KeccakF1600_StatePer_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_KeccakF1600_StatePer_1_fu_521_ap_start,
        ap_done => grp_KeccakF1600_StatePer_1_fu_521_ap_done,
        ap_idle => grp_KeccakF1600_StatePer_1_fu_521_ap_idle,
        ap_ready => grp_KeccakF1600_StatePer_1_fu_521_ap_ready,
        t_0_i => t_0,
        t_0_o => grp_KeccakF1600_StatePer_1_fu_521_t_0_o,
        t_0_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_0_o_ap_vld,
        t_5_i => t_5,
        t_5_o => grp_KeccakF1600_StatePer_1_fu_521_t_5_o,
        t_5_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_5_o_ap_vld,
        t_10_i => t_10,
        t_10_o => grp_KeccakF1600_StatePer_1_fu_521_t_10_o,
        t_10_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_10_o_ap_vld,
        t_15_i => t_15,
        t_15_o => grp_KeccakF1600_StatePer_1_fu_521_t_15_o,
        t_15_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_15_o_ap_vld,
        t_20_i => t_20,
        t_20_o => grp_KeccakF1600_StatePer_1_fu_521_t_20_o,
        t_20_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_20_o_ap_vld,
        t_1_i => t_1,
        t_1_o => grp_KeccakF1600_StatePer_1_fu_521_t_1_o,
        t_1_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_1_o_ap_vld,
        t_6_i => t_6,
        t_6_o => grp_KeccakF1600_StatePer_1_fu_521_t_6_o,
        t_6_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_6_o_ap_vld,
        t_11_i => t_11,
        t_11_o => grp_KeccakF1600_StatePer_1_fu_521_t_11_o,
        t_11_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_11_o_ap_vld,
        t_16_i => t_16,
        t_16_o => grp_KeccakF1600_StatePer_1_fu_521_t_16_o,
        t_16_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_16_o_ap_vld,
        t_21_i => t_21,
        t_21_o => grp_KeccakF1600_StatePer_1_fu_521_t_21_o,
        t_21_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_21_o_ap_vld,
        t_2_i => t_2,
        t_2_o => grp_KeccakF1600_StatePer_1_fu_521_t_2_o,
        t_2_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_2_o_ap_vld,
        t_7_i => t_7,
        t_7_o => grp_KeccakF1600_StatePer_1_fu_521_t_7_o,
        t_7_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_7_o_ap_vld,
        t_12_i => t_12,
        t_12_o => grp_KeccakF1600_StatePer_1_fu_521_t_12_o,
        t_12_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_12_o_ap_vld,
        t_17_i => t_17,
        t_17_o => grp_KeccakF1600_StatePer_1_fu_521_t_17_o,
        t_17_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_17_o_ap_vld,
        t_22_i => t_22,
        t_22_o => grp_KeccakF1600_StatePer_1_fu_521_t_22_o,
        t_22_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_22_o_ap_vld,
        t_3_i => t_3,
        t_3_o => grp_KeccakF1600_StatePer_1_fu_521_t_3_o,
        t_3_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_3_o_ap_vld,
        t_8_i => t_8,
        t_8_o => grp_KeccakF1600_StatePer_1_fu_521_t_8_o,
        t_8_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_8_o_ap_vld,
        t_13_i => t_13,
        t_13_o => grp_KeccakF1600_StatePer_1_fu_521_t_13_o,
        t_13_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_13_o_ap_vld,
        t_18_i => t_18,
        t_18_o => grp_KeccakF1600_StatePer_1_fu_521_t_18_o,
        t_18_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_18_o_ap_vld,
        t_23_i => t_23,
        t_23_o => grp_KeccakF1600_StatePer_1_fu_521_t_23_o,
        t_23_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_23_o_ap_vld,
        t_4_i => t_4,
        t_4_o => grp_KeccakF1600_StatePer_1_fu_521_t_4_o,
        t_4_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_4_o_ap_vld,
        t_9_i => t_9,
        t_9_o => grp_KeccakF1600_StatePer_1_fu_521_t_9_o,
        t_9_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_9_o_ap_vld,
        t_14_i => t_14,
        t_14_o => grp_KeccakF1600_StatePer_1_fu_521_t_14_o,
        t_14_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_14_o_ap_vld,
        t_19_i => t_19,
        t_19_o => grp_KeccakF1600_StatePer_1_fu_521_t_19_o,
        t_19_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_19_o_ap_vld,
        t_24_i => t_24,
        t_24_o => grp_KeccakF1600_StatePer_1_fu_521_t_24_o,
        t_24_o_ap_vld => grp_KeccakF1600_StatePer_1_fu_521_t_24_o_ap_vld);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln459_fu_879_p2 = ap_const_lv1_0))) then 
                    grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_KeccakF1600_StatePer_1_fu_521_ap_ready = ap_const_logic_1)) then 
                    grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    e_index_1_fu_260_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (true_1_reg_1566 = ap_const_lv1_0))) then 
                e_index_1_fu_260 <= e_index_fu_1390_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                e_index_1_fu_260 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    i_1_reg_430_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_1_reg_430 <= i_reg_1561;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_1_fu_521_ap_done = ap_const_logic_1))) then 
                i_1_reg_430 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    index_0_reg_418_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln468_fu_918_p2 = ap_const_lv1_1))) then 
                index_0_reg_418 <= index_reg_1552;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                index_0_reg_418 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    index_1_reg_441_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                index_1_reg_441 <= add_ln496_fu_1431_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_1_fu_521_ap_done = ap_const_logic_1))) then 
                index_1_reg_441 <= index_0_reg_418;
            end if; 
        end if;
    end process;

    j_0_reg_510_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then 
                j_0_reg_510 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln475_fu_1084_p2 = ap_const_lv1_0))) then 
                j_0_reg_510 <= j_fu_1090_p2;
            end if; 
        end if;
    end process;

    p_0_fu_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (or_ln472_reg_1570 = ap_const_lv1_1))) then 
                p_0_fu_268 <= add_ln493_fu_1420_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                p_0_fu_268 <= outlen_cast_fu_848_p1;
            end if; 
        end if;
    end process;

    r_0_reg_500_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then 
                r_0_reg_500 <= ap_phi_mux_r_0_ph_phi_fu_455_p42;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln475_fu_1084_p2 = ap_const_lv1_0))) then 
                r_0_reg_500 <= r_1_fu_1356_p1;
            end if; 
        end if;
    end process;

    s_index_1_fu_264_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (true_1_reg_1566 = ap_const_lv1_1))) then 
                s_index_1_fu_264 <= s_index_fu_1409_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                s_index_1_fu_264 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    t_0_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                t_0 <= p_Result_s_fu_764_p9;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_0_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_0 <= grp_KeccakF1600_StatePer_1_fu_521_t_0_o;
            end if; 
        end if;
    end process;

    t_1_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                t_1 <= p_Result_1_fu_804_p9;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_1_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_1 <= grp_KeccakF1600_StatePer_1_fu_521_t_1_o;
            end if; 
        end if;
    end process;

    t_10_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_10 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_10_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_10 <= grp_KeccakF1600_StatePer_1_fu_521_t_10_o;
            end if; 
        end if;
    end process;

    t_11_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_11 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_11_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_11 <= grp_KeccakF1600_StatePer_1_fu_521_t_11_o;
            end if; 
        end if;
    end process;

    t_12_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_12 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_12_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_12 <= grp_KeccakF1600_StatePer_1_fu_521_t_12_o;
            end if; 
        end if;
    end process;

    t_13_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_13 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_13_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_13 <= grp_KeccakF1600_StatePer_1_fu_521_t_13_o;
            end if; 
        end if;
    end process;

    t_14_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_14 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_14_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_14 <= grp_KeccakF1600_StatePer_1_fu_521_t_14_o;
            end if; 
        end if;
    end process;

    t_15_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_15 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_15_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_15 <= grp_KeccakF1600_StatePer_1_fu_521_t_15_o;
            end if; 
        end if;
    end process;

    t_16_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_16 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_16_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_16 <= grp_KeccakF1600_StatePer_1_fu_521_t_16_o;
            end if; 
        end if;
    end process;

    t_17_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_17 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_17_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_17 <= grp_KeccakF1600_StatePer_1_fu_521_t_17_o;
            end if; 
        end if;
    end process;

    t_18_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_18 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_18_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_18 <= grp_KeccakF1600_StatePer_1_fu_521_t_18_o;
            end if; 
        end if;
    end process;

    t_19_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_19 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_19_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_19 <= grp_KeccakF1600_StatePer_1_fu_521_t_19_o;
            end if; 
        end if;
    end process;

    t_2_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                t_2 <= p_Result_2_fu_864_p1;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_2_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_2 <= grp_KeccakF1600_StatePer_1_fu_521_t_2_o;
            end if; 
        end if;
    end process;

    t_20_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_20 <= ap_const_lv64_8000000000000000;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_20_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_20 <= grp_KeccakF1600_StatePer_1_fu_521_t_20_o;
            end if; 
        end if;
    end process;

    t_21_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_21 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_21_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_21 <= grp_KeccakF1600_StatePer_1_fu_521_t_21_o;
            end if; 
        end if;
    end process;

    t_22_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_22 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_22_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_22 <= grp_KeccakF1600_StatePer_1_fu_521_t_22_o;
            end if; 
        end if;
    end process;

    t_23_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_23 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_23_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_23 <= grp_KeccakF1600_StatePer_1_fu_521_t_23_o;
            end if; 
        end if;
    end process;

    t_24_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_24 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_24_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_24 <= grp_KeccakF1600_StatePer_1_fu_521_t_24_o;
            end if; 
        end if;
    end process;

    t_3_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_3 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_3_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_3 <= grp_KeccakF1600_StatePer_1_fu_521_t_3_o;
            end if; 
        end if;
    end process;

    t_4_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_4 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_4_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_4 <= grp_KeccakF1600_StatePer_1_fu_521_t_4_o;
            end if; 
        end if;
    end process;

    t_5_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_5 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_5_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_5 <= grp_KeccakF1600_StatePer_1_fu_521_t_5_o;
            end if; 
        end if;
    end process;

    t_6_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_6 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_6_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_6 <= grp_KeccakF1600_StatePer_1_fu_521_t_6_o;
            end if; 
        end if;
    end process;

    t_7_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_7 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_7_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_7 <= grp_KeccakF1600_StatePer_1_fu_521_t_7_o;
            end if; 
        end if;
    end process;

    t_8_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_8 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_8_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_8 <= grp_KeccakF1600_StatePer_1_fu_521_t_8_o;
            end if; 
        end if;
    end process;

    t_9_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                t_9 <= ap_const_lv64_0;
            elsif (((grp_KeccakF1600_StatePer_1_fu_521_t_9_o_ap_vld = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                t_9 <= grp_KeccakF1600_StatePer_1_fu_521_t_9_o;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                empty_12_reg_1473 <= empty_12_fu_752_p1;
                empty_reg_1468 <= empty_fu_748_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                empty_15_reg_1498 <= empty_15_fu_788_p1;
                empty_16_reg_1503 <= empty_16_fu_792_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                    high1_cast_reg_1533(11 downto 0) <= high1_cast_fu_840_p1(11 downto 0);
                    high2_cast_reg_1523(12 downto 0) <= high2_cast_fu_832_p1(12 downto 0);
                    low1_cast_reg_1538(10 downto 0) <= low1_cast_fu_844_p1(10 downto 0);
                    low2_cast_reg_1528(12 downto 0) <= low2_cast_fu_836_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_reg_1561 <= i_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_1_fu_521_ap_done = ap_const_logic_1))) then
                index_reg_1552 <= index_fu_912_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then
                or_ln472_reg_1570 <= or_ln472_fu_973_p2;
                true_1_reg_1566 <= true_1_fu_945_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2))) then
                reg_598 <= input_r_q0(15 downto 8);
                reg_602 <= input_r_q1(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln475_fu_1084_p2 = ap_const_lv1_0))) then
                select_ln37_1_reg_1588 <= select_ln37_1_fu_1338_p3;
                sign_reg_1583 <= sign_fu_1096_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln459_fu_879_p2 = ap_const_lv1_0))) then
                select_ln463_reg_1546 <= select_ln463_fu_901_p3;
            end if;
        end if;
    end process;
    high2_cast_reg_1523(15 downto 13) <= "000";
    low2_cast_reg_1528(15 downto 13) <= "000";
    high1_cast_reg_1533(15 downto 12) <= "0000";
    low1_cast_reg_1538(15 downto 11) <= "00000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln459_fu_879_p2, ap_CS_fsm_state8, grp_KeccakF1600_StatePer_1_fu_521_ap_done, icmp_ln468_fu_918_p2, ap_CS_fsm_state9, or_ln472_fu_973_p2, icmp_ln475_fu_1084_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln459_fu_879_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (grp_KeccakF1600_StatePer_1_fu_521_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (icmp_ln468_fu_918_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln475_fu_1084_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln475_fu_1084_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXX";
        end case;
    end process;
    E_address0 <= zext_ln489_fu_1385_p1(10 - 1 downto 0);

    E_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            E_ce0 <= ap_const_logic_1;
        else 
            E_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    E_d0 <= sext_ln83_fu_1376_p1;

    E_we0_assign_proc : process(true_1_reg_1566, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (true_1_reg_1566 = ap_const_lv1_0))) then 
            E_we0 <= ap_const_logic_1;
        else 
            E_we0 <= ap_const_logic_0;
        end if; 
    end process;

    S_address0 <= zext_ln484_fu_1404_p1(10 - 1 downto 0);

    S_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            S_ce0 <= ap_const_logic_1;
        else 
            S_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    S_d0 <= sext_ln83_fu_1376_p1;

    S_we0_assign_proc : process(true_1_reg_1566, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (true_1_reg_1566 = ap_const_lv1_1))) then 
            S_we0 <= ap_const_logic_1;
        else 
            S_we0 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln493_fu_1420_p2 <= std_logic_vector(unsigned(p_0_fu_268) + unsigned(ap_const_lv16_FFF8));
    add_ln496_fu_1431_p2 <= std_logic_vector(unsigned(index_1_reg_441) + unsigned(ap_const_lv16_1));
    and_ln30_fu_1240_p2 <= (xor_ln30_fu_1234_p2 and icmp_ln28_fu_1110_p2);
    and_ln37_1_fu_1332_p2 <= (xor_ln37_fu_1326_p2 and and_ln30_fu_1240_p2);
    and_ln37_fu_1246_p2 <= (icmp_ln37_fu_1142_p2 and and_ln30_fu_1240_p2);
    and_ln47_fu_1266_p2 <= (xor_ln28_fu_1260_p2 and icmp_ln47_fu_1122_p2);
    and_ln49_1_fu_1292_p2 <= (xor_ln49_fu_1286_p2 and and_ln47_fu_1266_p2);
    and_ln49_fu_1272_p2 <= (icmp_ln49_fu_1148_p2 and and_ln47_fu_1266_p2);
    and_ln66_fu_1312_p2 <= (xor_ln47_fu_1306_p2 and icmp_ln66_fu_1154_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_1044_assign_proc : process(ap_phi_mux_i_1_phi_fu_434_p4)
    begin
                ap_condition_1044 <= (not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_13)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_12)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_11)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_10)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_F)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_E)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_D)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_C)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_B)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_A)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_9)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_8)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_7)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_6)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_5)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_4)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_3)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_2)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_1)) and not((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_0)));
    end process;


    ap_condition_232_assign_proc : process(icmp_ln468_fu_918_p2, ap_CS_fsm_state9, or_ln472_fu_973_p2)
    begin
                ap_condition_232 <= ((ap_const_logic_1 = ap_CS_fsm_state9) and (or_ln472_fu_973_p2 = ap_const_lv1_1) and (icmp_ln468_fu_918_p2 = ap_const_lv1_0));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln475_fu_1084_p2)
    begin
        if ((icmp_ln475_fu_1084_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state7, icmp_ln459_fu_879_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln459_fu_879_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_phi_mux_i_1_phi_fu_434_p4 <= i_1_reg_430;

    ap_phi_mux_r_0_ph_phi_fu_455_p42_assign_proc : process(t_3, t_4, t_5, t_6, t_7, t_8, t_9, t_10, t_11, t_12, t_13, t_14, t_15, t_16, t_17, t_18, t_19, t_0, t_1, t_2, t_20, ap_phi_mux_i_1_phi_fu_434_p4, ap_condition_1044, ap_condition_232)
    begin
        if ((ap_const_boolean_1 = ap_condition_232)) then
            if ((ap_const_boolean_1 = ap_condition_1044)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_20;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_13)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_19;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_12)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_18;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_11)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_17;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_10)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_16;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_F)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_15;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_E)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_14;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_D)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_13;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_C)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_12;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_B)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_11;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_A)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_10;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_9)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_9;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_8)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_8;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_7)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_7;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_6)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_6;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_5)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_5;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_4)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_4;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_3)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_3;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_2)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_2;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_1)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_1;
            elsif ((ap_phi_mux_i_1_phi_fu_434_p4 = ap_const_lv5_0)) then 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= t_0;
            else 
                ap_phi_mux_r_0_ph_phi_fu_455_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            ap_phi_mux_r_0_ph_phi_fu_455_p42 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state7, icmp_ln459_fu_879_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln459_fu_879_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    e_index_fu_1390_p2 <= std_logic_vector(unsigned(e_index_1_fu_260) + unsigned(ap_const_lv16_1));
    empty_12_fu_752_p1 <= input_r_q1(8 - 1 downto 0);
    empty_13_fu_756_p1 <= input_r_q0(8 - 1 downto 0);
    empty_14_fu_760_p1 <= input_r_q1(8 - 1 downto 0);
    empty_15_fu_788_p1 <= input_r_q0(8 - 1 downto 0);
    empty_16_fu_792_p1 <= input_r_q1(8 - 1 downto 0);
    empty_17_fu_796_p1 <= input_r_q0(8 - 1 downto 0);
    empty_18_fu_800_p1 <= input_r_q1(8 - 1 downto 0);
    empty_19_fu_852_p1 <= input_r_q0(8 - 1 downto 0);
    empty_20_fu_909_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln463_reg_1546),16));
    empty_fu_748_p1 <= input_r_q0(8 - 1 downto 0);
    grp_KeccakF1600_StatePer_1_fu_521_ap_start <= grp_KeccakF1600_StatePer_1_fu_521_ap_start_reg;
    grp_fu_575_p4 <= input_r_q0(15 downto 8);
    grp_fu_585_p4 <= input_r_q1(15 downto 8);
    high1_cast_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(high1),16));
    high2_cast_fu_832_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(high2),16));
    i_fu_923_p2 <= std_logic_vector(unsigned(i_1_reg_430) + unsigned(ap_const_lv5_1));
    icmp_ln28_fu_1110_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_7F0D)) else "0";
    icmp_ln30_fu_1116_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_7FFA)) else "0";
    icmp_ln32_fu_1128_p2 <= "1" when (prnd_fu_1100_p4 = ap_const_lv15_7FFF) else "0";
    icmp_ln37_fu_1142_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_7FB1)) else "0";
    icmp_ln39_fu_1160_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_7FE9)) else "0";
    icmp_ln459_fu_879_p2 <= "1" when (p_0_fu_268 = ap_const_lv16_0) else "0";
    icmp_ln463_fu_885_p2 <= "1" when (unsigned(p_0_fu_268) > unsigned(ap_const_lv16_14)) else "0";
    icmp_ln468_fu_918_p2 <= "1" when (i_1_reg_430 = select_ln463_reg_1546) else "0";
    icmp_ln470_1_fu_934_p2 <= "1" when (unsigned(index_1_reg_441) < unsigned(low1_cast_reg_1538)) else "0";
    icmp_ln470_fu_929_p2 <= "1" when (unsigned(index_1_reg_441) < unsigned(high1_cast_reg_1533)) else "0";
    icmp_ln471_1_fu_956_p2 <= "1" when (unsigned(index_1_reg_441) < unsigned(low2_cast_reg_1528)) else "0";
    icmp_ln471_fu_951_p2 <= "1" when (unsigned(index_1_reg_441) < unsigned(high2_cast_reg_1523)) else "0";
    icmp_ln475_fu_1084_p2 <= "1" when (j_0_reg_510 = ap_const_lv3_4) else "0";
    icmp_ln47_fu_1122_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_64F3)) else "0";
    icmp_ln49_fu_1148_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_79A9)) else "0";
    icmp_ln51_fu_1174_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_7D67)) else "0";
    icmp_ln58_fu_1188_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_722B)) else "0";
    icmp_ln66_fu_1154_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_3433)) else "0";
    icmp_ln68_fu_1202_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_5063)) else "0";
    icmp_ln75_fu_1216_p2 <= "1" when (unsigned(prnd_fu_1100_p4) > unsigned(ap_const_lv15_1223)) else "0";
    index_fu_912_p2 <= std_logic_vector(unsigned(index_0_reg_418) + unsigned(empty_20_fu_909_p1));

    input_r_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            input_r_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= ap_const_lv64_6(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address0 <= ap_const_lv64_4(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= ap_const_lv64_2(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        else 
            input_r_address0 <= "XXXX";
        end if; 
    end process;


    input_r_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address1 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            input_r_address1 <= ap_const_lv64_5(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address1 <= ap_const_lv64_3(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            input_r_address1 <= ap_const_lv64_1(4 - 1 downto 0);
        else 
            input_r_address1 <= "XXXX";
        end if; 
    end process;


    input_r_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, ap_CS_fsm_state4, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            input_r_ce1 <= ap_const_logic_1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_1090_p2 <= std_logic_vector(unsigned(j_0_reg_510) + unsigned(ap_const_lv3_1));
    low1_cast_fu_844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low1),16));
    low2_cast_fu_836_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(low2),16));
    or_ln472_fu_973_p2 <= (true_2_fu_967_p2 or true_1_fu_945_p2);
        outlen_cast1_fu_828_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(outlen),14));

    outlen_cast_fu_848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outlen_cast1_fu_828_p1),16));
    p_Repl2_8_trunc_fu_856_p3 <= (empty_19_fu_852_p1 & grp_fu_575_p4);
    p_Result_1_fu_804_p9 <= (((((((empty_18_fu_800_p1 & grp_fu_585_p4) & empty_17_fu_796_p1) & grp_fu_575_p4) & empty_16_reg_1503) & reg_602) & empty_15_reg_1498) & reg_598);
    p_Result_2_fu_864_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Repl2_8_trunc_fu_856_p3),64));
    p_Result_s_fu_764_p9 <= (((((((empty_14_fu_760_p1 & grp_fu_585_p4) & empty_13_fu_756_p1) & grp_fu_575_p4) & empty_12_reg_1473) & reg_602) & empty_reg_1468) & reg_598);
    prnd_fu_1100_p4 <= r_0_reg_500(15 downto 1);
    r_1_fu_1356_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(r_fu_1346_p4),64));
    r_fu_1346_p4 <= r_0_reg_500(63 downto 16);
    s_index_fu_1409_p2 <= std_logic_vector(unsigned(s_index_1_fu_264) + unsigned(ap_const_lv16_1));
    sample_1_fu_1369_p3 <= 
        sample_fu_1363_p2 when (sign_reg_1583(0) = '1') else 
        zext_ln37_fu_1360_p1;
    sample_fu_1363_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(zext_ln37_fu_1360_p1));
    select_ln30_fu_1226_p3 <= 
        select_ln32_fu_1134_p3 when (icmp_ln30_fu_1116_p2(0) = '1') else 
        zext_ln30_fu_1222_p1;
    select_ln32_fu_1134_p3 <= 
        ap_const_lv4_C when (icmp_ln32_fu_1128_p2(0) = '1') else 
        ap_const_lv4_B;
    select_ln37_1_fu_1338_p3 <= 
        ap_const_lv4_8 when (and_ln37_1_fu_1332_p2(0) = '1') else 
        select_ln66_fu_1318_p3;
    select_ln37_fu_1252_p3 <= 
        select_ln39_fu_1166_p3 when (and_ln37_fu_1246_p2(0) = '1') else 
        select_ln30_fu_1226_p3;
    select_ln39_fu_1166_p3 <= 
        ap_const_lv4_A when (icmp_ln39_fu_1160_p2(0) = '1') else 
        ap_const_lv4_9;
    select_ln463_fu_901_p3 <= 
        ap_const_lv5_15 when (icmp_ln463_fu_885_p2(0) = '1') else 
        trunc_ln_fu_891_p4;
    select_ln49_1_fu_1298_p3 <= 
        select_ln58_fu_1194_p3 when (and_ln49_1_fu_1292_p2(0) = '1') else 
        select_ln49_fu_1278_p3;
    select_ln49_fu_1278_p3 <= 
        select_ln51_fu_1180_p3 when (and_ln49_fu_1272_p2(0) = '1') else 
        select_ln37_fu_1252_p3;
    select_ln51_fu_1180_p3 <= 
        ap_const_lv4_7 when (icmp_ln51_fu_1174_p2(0) = '1') else 
        ap_const_lv4_6;
    select_ln58_fu_1194_p3 <= 
        ap_const_lv4_5 when (icmp_ln58_fu_1188_p2(0) = '1') else 
        ap_const_lv4_4;
    select_ln66_fu_1318_p3 <= 
        select_ln68_fu_1208_p3 when (and_ln66_fu_1312_p2(0) = '1') else 
        select_ln49_1_fu_1298_p3;
    select_ln68_fu_1208_p3 <= 
        ap_const_lv4_3 when (icmp_ln68_fu_1202_p2(0) = '1') else 
        ap_const_lv4_2;
        sext_ln83_fu_1376_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_1_fu_1369_p3),16));

    sign_fu_1096_p1 <= r_0_reg_500(1 - 1 downto 0);
    true_1_fu_945_p2 <= (xor_ln470_fu_939_p2 and icmp_ln470_fu_929_p2);
    true_2_fu_967_p2 <= (xor_ln471_fu_961_p2 and icmp_ln471_fu_951_p2);
    trunc_ln_fu_891_p4 <= p_0_fu_268(7 downto 3);
    xor_ln28_fu_1260_p2 <= (icmp_ln28_fu_1110_p2 xor ap_const_lv1_1);
    xor_ln30_fu_1234_p2 <= (icmp_ln30_fu_1116_p2 xor ap_const_lv1_1);
    xor_ln37_fu_1326_p2 <= (icmp_ln37_fu_1142_p2 xor ap_const_lv1_1);
    xor_ln470_fu_939_p2 <= (icmp_ln470_1_fu_934_p2 xor ap_const_lv1_1);
    xor_ln471_fu_961_p2 <= (icmp_ln471_1_fu_956_p2 xor ap_const_lv1_1);
    xor_ln47_fu_1306_p2 <= (icmp_ln47_fu_1122_p2 xor ap_const_lv1_1);
    xor_ln49_fu_1286_p2 <= (icmp_ln49_fu_1148_p2 xor ap_const_lv1_1);
    zext_ln30_fu_1222_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln75_fu_1216_p2),4));
    zext_ln37_fu_1360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln37_1_reg_1588),5));
    zext_ln484_fu_1404_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(s_index_1_fu_264),64));
    zext_ln489_fu_1385_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(e_index_1_fu_260),64));
end behav;
