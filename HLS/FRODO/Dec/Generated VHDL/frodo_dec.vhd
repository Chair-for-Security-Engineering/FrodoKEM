-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_dec is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ss_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    ss_ce0 : OUT STD_LOGIC;
    ss_we0 : OUT STD_LOGIC;
    ss_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    ct_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    ct_ce0 : OUT STD_LOGIC;
    ct_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    sk_ce0 : OUT STD_LOGIC;
    sk_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of frodo_dec is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_dec,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=7.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.014200,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=1,HLS_SYN_FF=7142,HLS_SYN_LUT=33706,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (47 downto 0) := "000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (47 downto 0) := "000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (47 downto 0) := "000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (47 downto 0) := "000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (47 downto 0) := "000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (47 downto 0) := "000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (47 downto 0) := "000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (47 downto 0) := "000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (47 downto 0) := "000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (47 downto 0) := "000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (47 downto 0) := "001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (47 downto 0) := "010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (47 downto 0) := "100000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv9_62 : STD_LOGIC_VECTOR (8 downto 0) := "001100010";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv11_8 : STD_LOGIC_VECTOR (10 downto 0) := "00000001000";
    constant ap_const_lv11_280 : STD_LOGIC_VECTOR (10 downto 0) := "01010000000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv13_A00 : STD_LOGIC_VECTOR (12 downto 0) := "0101000000000";
    constant ap_const_lv13_580 : STD_LOGIC_VECTOR (12 downto 0) := "0010110000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv12_A0 : STD_LOGIC_VECTOR (11 downto 0) := "000010100000";
    constant ap_const_lv13_500 : STD_LOGIC_VECTOR (12 downto 0) := "0010100000000";
    constant ap_const_lv13_5A0 : STD_LOGIC_VECTOR (12 downto 0) := "0010110100000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv15_12C0 : STD_LOGIC_VECTOR (14 downto 0) := "001001011000000";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv64_184 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000110000100";
    constant ap_const_lv64_185 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000110000101";
    constant ap_const_lv64_186 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000110000110";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv64_187 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000110000111";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1F00 : STD_LOGIC_VECTOR (15 downto 0) := "0001111100000000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv13_258 : STD_LOGIC_VECTOR (12 downto 0) := "0001001011000";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv10_26D : STD_LOGIC_VECTOR (9 downto 0) := "1001101101";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv11_A0 : STD_LOGIC_VECTOR (10 downto 0) := "00010100000";
    constant ap_const_lv11_140 : STD_LOGIC_VECTOR (10 downto 0) := "00101000000";
    constant ap_const_lv12_5A0 : STD_LOGIC_VECTOR (11 downto 0) := "010110100000";
    constant ap_const_lv12_640 : STD_LOGIC_VECTOR (11 downto 0) := "011001000000";
    constant ap_const_lv12_A00 : STD_LOGIC_VECTOR (11 downto 0) := "101000000000";
    constant ap_const_lv12_A10 : STD_LOGIC_VECTOR (11 downto 0) := "101000010000";
    constant ap_const_lv10_17C : STD_LOGIC_VECTOR (9 downto 0) := "0101111100";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv12_A02 : STD_LOGIC_VECTOR (11 downto 0) := "101000000010";
    constant ap_const_lv12_A12 : STD_LOGIC_VECTOR (11 downto 0) := "101000010010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv9_17C : STD_LOGIC_VECTOR (8 downto 0) := "101111100";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (47 downto 0) := "000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_2_reg_826 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_reg_936 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_compare_fu_1172_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal reg_1207 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal grp_shake_gen_S_E_fu_1092_ap_ready : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_ap_done : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_ap_ready : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_ap_done : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_ap_ready : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_ap_done : STD_LOGIC;
    signal grp_compare_fu_1172_ap_ready : STD_LOGIC;
    signal grp_compare_fu_1172_ap_done : STD_LOGIC;
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_block_state30_on_subcall_done : BOOLEAN;
    signal i_fu_1218_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln62_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln73_fu_1230_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln73_reg_2047 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln73_fu_1236_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln73_reg_2052 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln73_fu_1240_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_12_fu_1246_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_12_reg_2060 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln75_fu_1252_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln75_reg_2065 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln75_fu_1258_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln75_reg_2069 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln80_reg_2074 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln98_fu_1286_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln98_reg_2079 : STD_LOGIC_VECTOR (14 downto 0);
    signal shl_ln_fu_1291_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal shl_ln_reg_2084 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal j_fu_1305_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_reg_2092 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal icmp_ln109_fu_1299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_reg_2107 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal trunc_ln7_reg_2112 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln125_fu_1413_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln125_reg_2118 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state10_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_9_fu_1419_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln128_fu_1425_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_reg_2127 : STD_LOGIC_VECTOR (63 downto 0);
    signal xor_ln129_fu_1443_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln129_reg_2142 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_fu_1482_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_10_reg_2150 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal icmp_ln144_fu_1476_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1551_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_11_reg_2164 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal icmp_ln150_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln152_1_fu_1562_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_1_reg_2174 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln168_fu_1603_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln168_reg_2189 : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal i_13_fu_1617_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_2200 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln170_fu_1623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_reg_2205 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln168_fu_1611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln175_fu_1697_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln175_reg_2210 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln175_4_fu_1729_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln175_4_reg_2215 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln192_fu_1743_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln192_reg_2220 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln195_fu_1751_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln195_reg_2225 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln209_fu_1757_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln209_reg_2230 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln209_1_fu_1761_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln209_1_reg_2235 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln209_2_fu_1765_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln209_2_reg_2240 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_block_state28_on_subcall_done : BOOLEAN;
    signal check1_fu_1769_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal trunc_ln229_fu_1774_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln229_reg_2255 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal i_14_fu_1784_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_14_reg_2262 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln229_fu_1778_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln231_fu_1795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln231_reg_2272 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal xor_ln231_fu_1801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln231_reg_2277 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln242_fu_1807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln242_reg_2282 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln247_fu_1819_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln247_reg_2287 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln253_fu_1827_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln253_reg_2292 : STD_LOGIC_VECTOR (2 downto 0);
    signal start1_1_fu_1865_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal start1_1_reg_2298 : STD_LOGIC_VECTOR (10 downto 0);
    signal ct_offset_1_fu_1911_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ct_offset_1_reg_2303 : STD_LOGIC_VECTOR (12 downto 0);
    signal mu_prime_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_reg_2308 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln271_fu_1917_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln271_reg_2313 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln271_1_fu_1921_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln271_1_reg_2318 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln271_2_fu_1925_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln271_2_reg_2323 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln7_fu_1929_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln7_reg_2328 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal shl_ln6_fu_1937_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln6_reg_2333 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal icmp_ln286_fu_1957_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln286_reg_2338 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal i_16_fu_1969_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_16_reg_2345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal icmp_ln284_fu_1963_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal G2out_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal icmp_ln302_fu_2006_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln302_reg_2370 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state48_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state49_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal i_15_fu_2012_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal zext_ln305_fu_2018_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln305_reg_2379 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state10 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_absorb_block_fu_947_ap_ready : STD_LOGIC;
    signal grp_absorb_block_fu_947_ap_done : STD_LOGIC;
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state48 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal seed_SE_prime_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_SE_prime_ce0 : STD_LOGIC;
    signal seed_SE_prime_we0 : STD_LOGIC;
    signal seed_SE_prime_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_prime_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_prime_ce1 : STD_LOGIC;
    signal seed_SE_prime_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce0 : STD_LOGIC;
    signal G2out_we0 : STD_LOGIC;
    signal G2out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce1 : STD_LOGIC;
    signal shake_input_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_1_ce0 : STD_LOGIC;
    signal shake_input_1_we0 : STD_LOGIC;
    signal shake_input_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_1_ce1 : STD_LOGIC;
    signal shake_input_1_we1 : STD_LOGIC;
    signal shake_input_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_2_ce0 : STD_LOGIC;
    signal shake_input_2_we0 : STD_LOGIC;
    signal shake_input_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_2_ce1 : STD_LOGIC;
    signal shake_input_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mu_prime_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal mu_prime_ce0 : STD_LOGIC;
    signal mu_prime_we0 : STD_LOGIC;
    signal mu_prime_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_1_ce0 : STD_LOGIC;
    signal B_1_we0 : STD_LOGIC;
    signal B_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_2_ce0 : STD_LOGIC;
    signal B_2_we0 : STD_LOGIC;
    signal B_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal W_1_ce0 : STD_LOGIC;
    signal W_1_we0 : STD_LOGIC;
    signal W_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_1_ce1 : STD_LOGIC;
    signal W_1_we1 : STD_LOGIC;
    signal W_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal W_2_ce0 : STD_LOGIC;
    signal W_2_we0 : STD_LOGIC;
    signal W_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_2_ce1 : STD_LOGIC;
    signal W_2_we1 : STD_LOGIC;
    signal S_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_1_ce0 : STD_LOGIC;
    signal S_1_we0 : STD_LOGIC;
    signal S_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_2_ce0 : STD_LOGIC;
    signal S_2_we0 : STD_LOGIC;
    signal S_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal E_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal E_1_ce0 : STD_LOGIC;
    signal E_1_we0 : STD_LOGIC;
    signal E_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal E_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal E_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal E_2_ce0 : STD_LOGIC;
    signal E_2_we0 : STD_LOGIC;
    signal E_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal E_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_ce1 : STD_LOGIC;
    signal A_1_we1 : STD_LOGIC;
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_2_ce1 : STD_LOGIC;
    signal A_2_we1 : STD_LOGIC;
    signal seed_A_separated_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_A_separated_ce0 : STD_LOGIC;
    signal seed_A_separated_we0 : STD_LOGIC;
    signal seed_A_separated_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_separated_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_separated_ce1 : STD_LOGIC;
    signal seed_A_separated_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_947_ap_start : STD_LOGIC;
    signal grp_absorb_block_fu_947_ap_idle : STD_LOGIC;
    signal grp_absorb_block_fu_947_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_absorb_block_fu_947_output_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_947_output_r_we0 : STD_LOGIC;
    signal grp_absorb_block_fu_947_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_947_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_947_input_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_947_input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_947_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_947_input_r_ce1 : STD_LOGIC;
    signal grp_absorb_block_fu_947_input_r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_947_outlen : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_absorb_block_fu_947_inlen : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_absorb_block_fu_947_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_fu_947_begin_r : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_vector_matrix_mul_fu_1018_ap_start : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_ap_idle : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_output_vec_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_output_vec_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_output_vec_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_output_vec_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_output_vec_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_output_vec_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_output_vec_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_S_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_S_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_1_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_1_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_1_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_1_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_2_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_2_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_A_2_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_2_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_A_2_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_E_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1018_E_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_E_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_sk_address0 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_vector_matrix_mul_fu_1018_sk_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_1018_seed_A_separated_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1018_pregen : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_vector_matrix_mul_fu_1018_n : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_vector_matrix_mul_fu_1018_use_A : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_1018_begin_r : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_shake_gen_S_E_fu_1092_ap_start : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_ap_idle : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake_gen_S_E_fu_1092_S_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_S_we0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_S_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake_gen_S_E_fu_1092_E_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake_gen_S_E_fu_1092_E_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_E_we0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_E_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_shake_gen_S_E_fu_1092_outlen : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1092_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_E_fu_1092_input_r_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_E_fu_1092_input_r_ce1 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1092_low1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_shake_gen_S_E_fu_1092_high1 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_shake_gen_S_E_fu_1092_low2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1092_high2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_fu_1160_ap_start : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_ap_idle : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_unpack_fu_1160_out_r_ce0 : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_out_r_we0 : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_unpack_fu_1160_in_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_frodo_unpack_fu_1160_in_r_ce0 : STD_LOGIC;
    signal grp_frodo_unpack_fu_1160_in_offset : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_frodo_unpack_fu_1160_outlen : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_compare_fu_1172_ap_start : STD_LOGIC;
    signal grp_compare_fu_1172_ap_idle : STD_LOGIC;
    signal grp_compare_fu_1172_in_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compare_fu_1172_in_1_ce0 : STD_LOGIC;
    signal grp_compare_fu_1172_in_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compare_fu_1172_in_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_compare_fu_1172_in_2_ce0 : STD_LOGIC;
    signal grp_compare_fu_1172_in_2_we0 : STD_LOGIC;
    signal grp_compare_fu_1172_in_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compare_fu_1172_in_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_compare_fu_1172_n : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_encode_fu_1181_ap_start : STD_LOGIC;
    signal grp_encode_fu_1181_ap_done : STD_LOGIC;
    signal grp_encode_fu_1181_ap_idle : STD_LOGIC;
    signal grp_encode_fu_1181_ap_ready : STD_LOGIC;
    signal grp_encode_fu_1181_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_encode_fu_1181_out_r_ce0 : STD_LOGIC;
    signal grp_encode_fu_1181_out_r_we0 : STD_LOGIC;
    signal grp_encode_fu_1181_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_encode_fu_1181_out_offset : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_encode_fu_1181_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_encode_fu_1181_in_r_ce0 : STD_LOGIC;
    signal grp_encode_fu_1181_in_r_we0 : STD_LOGIC;
    signal grp_encode_fu_1181_in_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_fu_1189_ap_start : STD_LOGIC;
    signal grp_read_input_fu_1189_ap_done : STD_LOGIC;
    signal grp_read_input_fu_1189_ap_idle : STD_LOGIC;
    signal grp_read_input_fu_1189_ap_ready : STD_LOGIC;
    signal grp_read_input_fu_1189_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_input_fu_1189_out_r_ce0 : STD_LOGIC;
    signal grp_read_input_fu_1189_out_r_we0 : STD_LOGIC;
    signal grp_read_input_fu_1189_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_fu_1189_in_r_address0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_read_input_fu_1189_in_r_ce0 : STD_LOGIC;
    signal grp_reset_vector_fu_1198_ap_start : STD_LOGIC;
    signal grp_reset_vector_fu_1198_ap_done : STD_LOGIC;
    signal grp_reset_vector_fu_1198_ap_idle : STD_LOGIC;
    signal grp_reset_vector_fu_1198_ap_ready : STD_LOGIC;
    signal grp_reset_vector_fu_1198_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_reset_vector_fu_1198_in_r_ce0 : STD_LOGIC;
    signal grp_reset_vector_fu_1198_in_r_we0 : STD_LOGIC;
    signal grp_reset_vector_fu_1198_in_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_781 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_reg_792 : STD_LOGIC_VECTOR (3 downto 0);
    signal phi_mul_reg_804 : STD_LOGIC_VECTOR (12 downto 0);
    signal j_0_reg_815 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal i_3_reg_837 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal i_4_reg_848 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal check1_0_reg_859 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_block_state23_on_subcall_done : BOOLEAN;
    signal i_5_reg_871 : STD_LOGIC_VECTOR (3 downto 0);
    signal ct_offset_reg_882 : STD_LOGIC_VECTOR (12 downto 0);
    signal p_pn_reg_893 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_6_reg_902 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_block_state36_on_subcall_done : BOOLEAN;
    signal i_7_reg_914 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal temp_1_reg_926 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_947_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_block_state34_on_subcall_done : BOOLEAN;
    signal ap_block_state38_on_subcall_done : BOOLEAN;
    signal grp_vector_matrix_mul_fu_1018_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_shake_gen_S_E_fu_1092_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal grp_frodo_unpack_fu_1160_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal grp_compare_fu_1172_ap_start_reg : STD_LOGIC := '0';
    signal grp_encode_fu_1181_ap_start_reg : STD_LOGIC := '0';
    signal grp_read_input_fu_1189_ap_start_reg : STD_LOGIC := '0';
    signal grp_reset_vector_fu_1198_ap_start_reg : STD_LOGIC := '0';
    signal zext_ln64_fu_1224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_fu_1326_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln111_1_fu_1331_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln120_fu_1342_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln128_1_fu_1438_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln129_fu_1472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal zext_ln146_fu_1494_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln146_1_fu_1522_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln152_fu_1557_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal zext_ln258_fu_1790_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_fu_1975_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln287_1_fu_1986_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln291_1_fu_2001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal p_Val2_s_fu_464 : STD_LOGIC_VECTOR (15 downto 0);
    signal templong_fu_1400_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_2_fu_1463_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_4_fu_1513_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1_fu_1536_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln2_fu_1581_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln154_fu_1596_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln85_fu_1272_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln85_fu_1278_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln111_fu_1311_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sext_ln111_fu_1317_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln111_fu_1321_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln120_fu_1336_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln111_fu_1347_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln111_2_fu_1351_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal inter_fu_1355_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln113_fu_1379_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal select_ln113_fu_1384_p3 : STD_LOGIC_VECTOR (1 downto 0);
    signal lshr_ln1_fu_1390_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal or_ln_fu_1430_p3 : STD_LOGIC_VECTOR (13 downto 0);
    signal empty_27_fu_1449_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_fu_1453_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln146_fu_1488_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_29_fu_1499_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_fu_1503_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln_fu_1526_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln152_fu_1567_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln2_fu_1571_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln154_fu_1590_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln185_fu_1635_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln2_fu_1639_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln185_1_fu_1651_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln185_fu_1647_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln185_1_fu_1659_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln185_fu_1663_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln185_2_fu_1669_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln175_fu_1629_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal start1_fu_1673_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal end1_fu_1679_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal start2_fu_1685_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal end2_fu_1691_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln192_fu_1737_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln175_1_fu_1705_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal select_ln175_2_fu_1713_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln175_3_fu_1721_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln247_fu_1813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln3_fu_1831_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln253_1_fu_1847_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln253_1_fu_1843_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln253_2_fu_1855_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln253_fu_1859_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal shl_ln255_fu_1877_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln255_fu_1883_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln5_fu_1899_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln257_fu_1907_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln253_fu_1839_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal end1_1_fu_1871_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal start2_1_fu_1887_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal end2_1_fu_1893_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal or_ln286_1_fu_1945_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln286_fu_1951_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln287_fu_1980_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln291_fu_1991_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal add_ln291_fu_1995_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal trunc_ln168_fu_1607_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (47 downto 0);
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component absorb_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        outlen : IN STD_LOGIC_VECTOR (6 downto 0);
        inlen : IN STD_LOGIC_VECTOR (8 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component vector_matrix_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_vec_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_vec_ce0 : OUT STD_LOGIC;
        output_vec_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_vec_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_vec_ce1 : OUT STD_LOGIC;
        output_vec_we1 : OUT STD_LOGIC;
        output_vec_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_we1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_we0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_we1 : OUT STD_LOGIC;
        A_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        sk_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
        sk_ce0 : OUT STD_LOGIC;
        sk_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        seed_A_separated_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_separated_ce0 : OUT STD_LOGIC;
        seed_A_separated_we0 : OUT STD_LOGIC;
        seed_A_separated_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        seed_A_separated_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        seed_A_separated_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_separated_ce1 : OUT STD_LOGIC;
        seed_A_separated_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        pregen : IN STD_LOGIC_VECTOR (0 downto 0);
        n : IN STD_LOGIC_VECTOR (10 downto 0);
        use_A : IN STD_LOGIC_VECTOR (3 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component shake_gen_S_E IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_we0 : OUT STD_LOGIC;
        E_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        outlen : IN STD_LOGIC_VECTOR (12 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        low1 : IN STD_LOGIC_VECTOR (10 downto 0);
        high1 : IN STD_LOGIC_VECTOR (11 downto 0);
        low2 : IN STD_LOGIC_VECTOR (12 downto 0);
        high2 : IN STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component frodo_unpack IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        outlen : IN STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component compare IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_1_ce0 : OUT STD_LOGIC;
        in_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_2_ce0 : OUT STD_LOGIC;
        in_2_we0 : OUT STD_LOGIC;
        in_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        n : IN STD_LOGIC_VECTOR (10 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component encode IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_offset : IN STD_LOGIC_VECTOR (5 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_we0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        mu : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component read_input IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        n : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component reset_vector IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_we0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_seed_SEcud IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_G2out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_shake_idEe IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_shake_ieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_mu_prime IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_B_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_W_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_dec_A_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    seed_SE_prime_U : component frodo_dec_seed_SEcud
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_SE_prime_address0,
        ce0 => seed_SE_prime_ce0,
        we0 => seed_SE_prime_we0,
        d0 => seed_SE_prime_d0,
        q0 => seed_SE_prime_q0,
        address1 => grp_shake_gen_S_E_fu_1092_input_r_address1,
        ce1 => seed_SE_prime_ce1,
        q1 => seed_SE_prime_q1);

    G2out_U : component frodo_dec_G2out
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G2out_address0,
        ce0 => G2out_ce0,
        we0 => G2out_we0,
        d0 => grp_absorb_block_fu_947_output_r_d0,
        q0 => G2out_q0,
        address1 => G2out_address1,
        ce1 => G2out_ce1,
        q1 => G2out_q1);

    shake_input_1_U : component frodo_dec_shake_idEe
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shake_input_1_address0,
        ce0 => shake_input_1_ce0,
        we0 => shake_input_1_we0,
        d0 => shake_input_1_d0,
        q0 => shake_input_1_q0,
        address1 => shake_input_1_address1,
        ce1 => shake_input_1_ce1,
        we1 => shake_input_1_we1,
        d1 => shake_input_1_d1,
        q1 => shake_input_1_q1);

    shake_input_2_U : component frodo_dec_shake_ieOg
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shake_input_2_address0,
        ce0 => shake_input_2_ce0,
        we0 => shake_input_2_we0,
        d0 => grp_read_input_fu_1189_out_r_d0,
        q0 => shake_input_2_q0,
        address1 => grp_absorb_block_fu_947_input_r_address1,
        ce1 => shake_input_2_ce1,
        q1 => shake_input_2_q1);

    mu_prime_U : component frodo_dec_mu_prime
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mu_prime_address0,
        ce0 => mu_prime_ce0,
        we0 => mu_prime_we0,
        d0 => mu_prime_d0,
        q0 => mu_prime_q0);

    B_1_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_1_address0,
        ce0 => B_1_ce0,
        we0 => B_1_we0,
        d0 => B_1_d0,
        q0 => B_1_q0);

    B_2_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_2_address0,
        ce0 => B_2_ce0,
        we0 => B_2_we0,
        d0 => grp_frodo_unpack_fu_1160_out_r_d0,
        q0 => B_2_q0);

    W_1_U : component frodo_dec_W_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_1_address0,
        ce0 => W_1_ce0,
        we0 => W_1_we0,
        d0 => W_1_d0,
        q0 => W_1_q0,
        address1 => grp_vector_matrix_mul_fu_1018_output_vec_address1,
        ce1 => W_1_ce1,
        we1 => W_1_we1,
        d1 => grp_vector_matrix_mul_fu_1018_output_vec_d1);

    W_2_U : component frodo_dec_W_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => W_2_address0,
        ce0 => W_2_ce0,
        we0 => W_2_we0,
        d0 => W_2_d0,
        q0 => W_2_q0,
        address1 => grp_vector_matrix_mul_fu_1018_output_vec_address1,
        ce1 => W_2_ce1,
        we1 => W_2_we1,
        d1 => grp_vector_matrix_mul_fu_1018_output_vec_d1);

    S_1_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_1_address0,
        ce0 => S_1_ce0,
        we0 => S_1_we0,
        d0 => S_1_d0,
        q0 => S_1_q0);

    S_2_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_2_address0,
        ce0 => S_2_ce0,
        we0 => S_2_we0,
        d0 => S_2_d0,
        q0 => S_2_q0);

    E_1_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_1_address0,
        ce0 => E_1_ce0,
        we0 => E_1_we0,
        d0 => E_1_d0,
        q0 => E_1_q0);

    E_2_U : component frodo_dec_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_2_address0,
        ce0 => E_2_ce0,
        we0 => E_2_we0,
        d0 => E_2_d0,
        q0 => E_2_q0);

    A_1_U : component frodo_dec_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_vector_matrix_mul_fu_1018_A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => grp_vector_matrix_mul_fu_1018_A_1_d0,
        q0 => A_1_q0,
        address1 => grp_vector_matrix_mul_fu_1018_A_1_address1,
        ce1 => A_1_ce1,
        we1 => A_1_we1,
        d1 => grp_vector_matrix_mul_fu_1018_A_1_d1);

    A_2_U : component frodo_dec_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_vector_matrix_mul_fu_1018_A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => grp_vector_matrix_mul_fu_1018_A_2_d0,
        q0 => A_2_q0,
        address1 => grp_vector_matrix_mul_fu_1018_A_2_address1,
        ce1 => A_2_ce1,
        we1 => A_2_we1,
        d1 => grp_vector_matrix_mul_fu_1018_A_2_d1);

    seed_A_separated_U : component frodo_dec_seed_SEcud
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_A_separated_address0,
        ce0 => seed_A_separated_ce0,
        we0 => seed_A_separated_we0,
        d0 => seed_A_separated_d0,
        q0 => seed_A_separated_q0,
        address1 => grp_vector_matrix_mul_fu_1018_seed_A_separated_address1,
        ce1 => seed_A_separated_ce1,
        q1 => seed_A_separated_q1);

    grp_absorb_block_fu_947 : component absorb_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_absorb_block_fu_947_ap_start,
        ap_done => grp_absorb_block_fu_947_ap_done,
        ap_idle => grp_absorb_block_fu_947_ap_idle,
        ap_ready => grp_absorb_block_fu_947_ap_ready,
        output_r_address0 => grp_absorb_block_fu_947_output_r_address0,
        output_r_ce0 => grp_absorb_block_fu_947_output_r_ce0,
        output_r_we0 => grp_absorb_block_fu_947_output_r_we0,
        output_r_d0 => grp_absorb_block_fu_947_output_r_d0,
        input_r_address0 => grp_absorb_block_fu_947_input_r_address0,
        input_r_ce0 => grp_absorb_block_fu_947_input_r_ce0,
        input_r_q0 => grp_absorb_block_fu_947_input_r_q0,
        input_r_address1 => grp_absorb_block_fu_947_input_r_address1,
        input_r_ce1 => grp_absorb_block_fu_947_input_r_ce1,
        input_r_q1 => grp_absorb_block_fu_947_input_r_q1,
        outlen => grp_absorb_block_fu_947_outlen,
        inlen => grp_absorb_block_fu_947_inlen,
        reset => grp_absorb_block_fu_947_reset,
        begin_r => grp_absorb_block_fu_947_begin_r);

    grp_vector_matrix_mul_fu_1018 : component vector_matrix_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_matrix_mul_fu_1018_ap_start,
        ap_done => grp_vector_matrix_mul_fu_1018_ap_done,
        ap_idle => grp_vector_matrix_mul_fu_1018_ap_idle,
        ap_ready => grp_vector_matrix_mul_fu_1018_ap_ready,
        output_vec_address0 => grp_vector_matrix_mul_fu_1018_output_vec_address0,
        output_vec_ce0 => grp_vector_matrix_mul_fu_1018_output_vec_ce0,
        output_vec_q0 => grp_vector_matrix_mul_fu_1018_output_vec_q0,
        output_vec_address1 => grp_vector_matrix_mul_fu_1018_output_vec_address1,
        output_vec_ce1 => grp_vector_matrix_mul_fu_1018_output_vec_ce1,
        output_vec_we1 => grp_vector_matrix_mul_fu_1018_output_vec_we1,
        output_vec_d1 => grp_vector_matrix_mul_fu_1018_output_vec_d1,
        S_address0 => grp_vector_matrix_mul_fu_1018_S_address0,
        S_ce0 => grp_vector_matrix_mul_fu_1018_S_ce0,
        S_q0 => grp_vector_matrix_mul_fu_1018_S_q0,
        A_1_address0 => grp_vector_matrix_mul_fu_1018_A_1_address0,
        A_1_ce0 => grp_vector_matrix_mul_fu_1018_A_1_ce0,
        A_1_we0 => grp_vector_matrix_mul_fu_1018_A_1_we0,
        A_1_d0 => grp_vector_matrix_mul_fu_1018_A_1_d0,
        A_1_q0 => A_1_q0,
        A_1_address1 => grp_vector_matrix_mul_fu_1018_A_1_address1,
        A_1_ce1 => grp_vector_matrix_mul_fu_1018_A_1_ce1,
        A_1_we1 => grp_vector_matrix_mul_fu_1018_A_1_we1,
        A_1_d1 => grp_vector_matrix_mul_fu_1018_A_1_d1,
        A_2_address0 => grp_vector_matrix_mul_fu_1018_A_2_address0,
        A_2_ce0 => grp_vector_matrix_mul_fu_1018_A_2_ce0,
        A_2_we0 => grp_vector_matrix_mul_fu_1018_A_2_we0,
        A_2_d0 => grp_vector_matrix_mul_fu_1018_A_2_d0,
        A_2_q0 => A_2_q0,
        A_2_address1 => grp_vector_matrix_mul_fu_1018_A_2_address1,
        A_2_ce1 => grp_vector_matrix_mul_fu_1018_A_2_ce1,
        A_2_we1 => grp_vector_matrix_mul_fu_1018_A_2_we1,
        A_2_d1 => grp_vector_matrix_mul_fu_1018_A_2_d1,
        E_address0 => grp_vector_matrix_mul_fu_1018_E_address0,
        E_ce0 => grp_vector_matrix_mul_fu_1018_E_ce0,
        E_q0 => grp_vector_matrix_mul_fu_1018_E_q0,
        sk_address0 => grp_vector_matrix_mul_fu_1018_sk_address0,
        sk_ce0 => grp_vector_matrix_mul_fu_1018_sk_ce0,
        sk_q0 => sk_q0,
        seed_A_separated_address0 => grp_vector_matrix_mul_fu_1018_seed_A_separated_address0,
        seed_A_separated_ce0 => grp_vector_matrix_mul_fu_1018_seed_A_separated_ce0,
        seed_A_separated_we0 => grp_vector_matrix_mul_fu_1018_seed_A_separated_we0,
        seed_A_separated_d0 => grp_vector_matrix_mul_fu_1018_seed_A_separated_d0,
        seed_A_separated_q0 => seed_A_separated_q0,
        seed_A_separated_address1 => grp_vector_matrix_mul_fu_1018_seed_A_separated_address1,
        seed_A_separated_ce1 => grp_vector_matrix_mul_fu_1018_seed_A_separated_ce1,
        seed_A_separated_q1 => seed_A_separated_q1,
        pregen => grp_vector_matrix_mul_fu_1018_pregen,
        n => grp_vector_matrix_mul_fu_1018_n,
        use_A => grp_vector_matrix_mul_fu_1018_use_A,
        begin_r => grp_vector_matrix_mul_fu_1018_begin_r);

    grp_shake_gen_S_E_fu_1092 : component shake_gen_S_E
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_gen_S_E_fu_1092_ap_start,
        ap_done => grp_shake_gen_S_E_fu_1092_ap_done,
        ap_idle => grp_shake_gen_S_E_fu_1092_ap_idle,
        ap_ready => grp_shake_gen_S_E_fu_1092_ap_ready,
        S_address0 => grp_shake_gen_S_E_fu_1092_S_address0,
        S_ce0 => grp_shake_gen_S_E_fu_1092_S_ce0,
        S_we0 => grp_shake_gen_S_E_fu_1092_S_we0,
        S_d0 => grp_shake_gen_S_E_fu_1092_S_d0,
        E_address0 => grp_shake_gen_S_E_fu_1092_E_address0,
        E_ce0 => grp_shake_gen_S_E_fu_1092_E_ce0,
        E_we0 => grp_shake_gen_S_E_fu_1092_E_we0,
        E_d0 => grp_shake_gen_S_E_fu_1092_E_d0,
        outlen => grp_shake_gen_S_E_fu_1092_outlen,
        input_r_address0 => grp_shake_gen_S_E_fu_1092_input_r_address0,
        input_r_ce0 => grp_shake_gen_S_E_fu_1092_input_r_ce0,
        input_r_q0 => seed_SE_prime_q0,
        input_r_address1 => grp_shake_gen_S_E_fu_1092_input_r_address1,
        input_r_ce1 => grp_shake_gen_S_E_fu_1092_input_r_ce1,
        input_r_q1 => seed_SE_prime_q1,
        low1 => grp_shake_gen_S_E_fu_1092_low1,
        high1 => grp_shake_gen_S_E_fu_1092_high1,
        low2 => grp_shake_gen_S_E_fu_1092_low2,
        high2 => grp_shake_gen_S_E_fu_1092_high2);

    grp_frodo_unpack_fu_1160 : component frodo_unpack
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_unpack_fu_1160_ap_start,
        ap_done => grp_frodo_unpack_fu_1160_ap_done,
        ap_idle => grp_frodo_unpack_fu_1160_ap_idle,
        ap_ready => grp_frodo_unpack_fu_1160_ap_ready,
        out_r_address0 => grp_frodo_unpack_fu_1160_out_r_address0,
        out_r_ce0 => grp_frodo_unpack_fu_1160_out_r_ce0,
        out_r_we0 => grp_frodo_unpack_fu_1160_out_r_we0,
        out_r_d0 => grp_frodo_unpack_fu_1160_out_r_d0,
        in_r_address0 => grp_frodo_unpack_fu_1160_in_r_address0,
        in_r_ce0 => grp_frodo_unpack_fu_1160_in_r_ce0,
        in_r_q0 => ct_q0,
        in_offset => grp_frodo_unpack_fu_1160_in_offset,
        outlen => grp_frodo_unpack_fu_1160_outlen);

    grp_compare_fu_1172 : component compare
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_compare_fu_1172_ap_start,
        ap_done => grp_compare_fu_1172_ap_done,
        ap_idle => grp_compare_fu_1172_ap_idle,
        ap_ready => grp_compare_fu_1172_ap_ready,
        in_1_address0 => grp_compare_fu_1172_in_1_address0,
        in_1_ce0 => grp_compare_fu_1172_in_1_ce0,
        in_1_q0 => grp_compare_fu_1172_in_1_q0,
        in_2_address0 => grp_compare_fu_1172_in_2_address0,
        in_2_ce0 => grp_compare_fu_1172_in_2_ce0,
        in_2_we0 => grp_compare_fu_1172_in_2_we0,
        in_2_d0 => grp_compare_fu_1172_in_2_d0,
        in_2_q0 => grp_compare_fu_1172_in_2_q0,
        n => grp_compare_fu_1172_n,
        ap_return => grp_compare_fu_1172_ap_return);

    grp_encode_fu_1181 : component encode
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_encode_fu_1181_ap_start,
        ap_done => grp_encode_fu_1181_ap_done,
        ap_idle => grp_encode_fu_1181_ap_idle,
        ap_ready => grp_encode_fu_1181_ap_ready,
        out_r_address0 => grp_encode_fu_1181_out_r_address0,
        out_r_ce0 => grp_encode_fu_1181_out_r_ce0,
        out_r_we0 => grp_encode_fu_1181_out_r_we0,
        out_r_d0 => grp_encode_fu_1181_out_r_d0,
        out_offset => grp_encode_fu_1181_out_offset,
        in_r_address0 => grp_encode_fu_1181_in_r_address0,
        in_r_ce0 => grp_encode_fu_1181_in_r_ce0,
        in_r_we0 => grp_encode_fu_1181_in_r_we0,
        in_r_d0 => grp_encode_fu_1181_in_r_d0,
        in_r_q0 => W_1_q0,
        mu => temp_reg_2308);

    grp_read_input_fu_1189 : component read_input
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_input_fu_1189_ap_start,
        ap_done => grp_read_input_fu_1189_ap_done,
        ap_idle => grp_read_input_fu_1189_ap_idle,
        ap_ready => grp_read_input_fu_1189_ap_ready,
        out_r_address0 => grp_read_input_fu_1189_out_r_address0,
        out_r_ce0 => grp_read_input_fu_1189_out_r_ce0,
        out_r_we0 => grp_read_input_fu_1189_out_r_we0,
        out_r_d0 => grp_read_input_fu_1189_out_r_d0,
        in_r_address0 => grp_read_input_fu_1189_in_r_address0,
        in_r_ce0 => grp_read_input_fu_1189_in_r_ce0,
        in_r_q0 => ct_q0,
        in_offset => ct_offset_1_reg_2303,
        n => select_ln247_reg_2287);

    grp_reset_vector_fu_1198 : component reset_vector
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reset_vector_fu_1198_ap_start,
        ap_done => grp_reset_vector_fu_1198_ap_done,
        ap_idle => grp_reset_vector_fu_1198_ap_idle,
        ap_ready => grp_reset_vector_fu_1198_ap_ready,
        in_r_address0 => grp_reset_vector_fu_1198_in_r_address0,
        in_r_ce0 => grp_reset_vector_fu_1198_in_r_ce0,
        in_r_we0 => grp_reset_vector_fu_1198_in_r_we0,
        in_r_d0 => grp_reset_vector_fu_1198_in_r_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state10))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state10);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state48) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state48))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state48);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_absorb_block_fu_947_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_absorb_block_fu_947_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state14))) then 
                    grp_absorb_block_fu_947_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_absorb_block_fu_947_ap_ready = ap_const_logic_1)) then 
                    grp_absorb_block_fu_947_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_compare_fu_1172_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_compare_fu_1172_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln229_fu_1778_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln168_fu_1611_p2 = ap_const_lv1_1)))) then 
                    grp_compare_fu_1172_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_compare_fu_1172_ap_ready = ap_const_logic_1)) then 
                    grp_compare_fu_1172_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_encode_fu_1181_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_encode_fu_1181_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state35))) then 
                    grp_encode_fu_1181_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_encode_fu_1181_ap_ready = ap_const_logic_1)) then 
                    grp_encode_fu_1181_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_frodo_unpack_fu_1160_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_unpack_fu_1160_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln168_fu_1611_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_0) and (trunc_ln73_fu_1236_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_0) and (trunc_ln73_fu_1236_p1 = ap_const_lv1_0)))) then 
                    grp_frodo_unpack_fu_1160_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_unpack_fu_1160_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_unpack_fu_1160_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_input_fu_1189_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_input_fu_1189_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
                    grp_read_input_fu_1189_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_input_fu_1189_ap_ready = ap_const_logic_1)) then 
                    grp_read_input_fu_1189_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reset_vector_fu_1198_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reset_vector_fu_1198_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
                    grp_reset_vector_fu_1198_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reset_vector_fu_1198_ap_ready = ap_const_logic_1)) then 
                    grp_reset_vector_fu_1198_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_gen_S_E_fu_1092_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_gen_S_E_fu_1092_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    grp_shake_gen_S_E_fu_1092_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_gen_S_E_fu_1092_ap_ready = ap_const_logic_1)) then 
                    grp_shake_gen_S_E_fu_1092_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_matrix_mul_fu_1018_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_matrix_mul_fu_1018_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_0) and (trunc_ln73_fu_1236_p1 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_0) and (trunc_ln73_fu_1236_p1 = ap_const_lv1_0)))) then 
                    grp_vector_matrix_mul_fu_1018_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_matrix_mul_fu_1018_ap_ready = ap_const_logic_1)) then 
                    grp_vector_matrix_mul_fu_1018_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    check1_0_reg_859_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                check1_0_reg_859 <= check1_fu_1769_p2;
            elsif (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                check1_0_reg_859 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    ct_offset_reg_882_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                ct_offset_reg_882 <= add_ln195_reg_2225;
            elsif (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                ct_offset_reg_882 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    i_0_reg_781_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_0))) then 
                i_0_reg_781 <= i_fu_1218_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_781 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_792_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_1))) then 
                i_1_reg_792 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln109_fu_1299_p2 = ap_const_lv1_1) or (icmp_ln75_reg_2065 = ap_const_lv1_1)))) then 
                i_1_reg_792 <= i_12_reg_2060;
            end if; 
        end if;
    end process;

    i_2_reg_826_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_1))) then 
                i_2_reg_826 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln125_fu_1413_p2 = ap_const_lv1_0))) then 
                i_2_reg_826 <= i_9_fu_1419_p2;
            end if; 
        end if;
    end process;

    i_3_reg_837_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
                i_3_reg_837 <= i_10_reg_2150;
            elsif (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then 
                i_3_reg_837 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_4_reg_848_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
                i_4_reg_848 <= i_11_reg_2164;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
                i_4_reg_848 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_871_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
                i_5_reg_871 <= i_13_reg_2200;
            elsif (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then 
                i_5_reg_871 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_6_reg_902_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then 
                i_6_reg_902 <= i_14_reg_2262;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then 
                i_6_reg_902 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_7_reg_914_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
                i_7_reg_914 <= i_16_reg_2345;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_compare_fu_1172_ap_done = ap_const_logic_1))) then 
                i_7_reg_914 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_8_reg_936_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln302_fu_2006_p2 = ap_const_lv1_0))) then 
                i_8_reg_936 <= i_15_fu_2012_p2;
            elsif (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then 
                i_8_reg_936 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_815_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln75_reg_2065 = ap_const_lv1_0) and (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_1))) then 
                j_0_reg_815 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                j_0_reg_815 <= j_reg_2092;
            end if; 
        end if;
    end process;

    phi_mul_reg_804_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_1))) then 
                phi_mul_reg_804 <= ap_const_lv13_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln109_fu_1299_p2 = ap_const_lv1_1) or (icmp_ln75_reg_2065 = ap_const_lv1_1)))) then 
                phi_mul_reg_804 <= add_ln73_reg_2047;
            end if; 
        end if;
    end process;

    temp_1_reg_926_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
                temp_1_reg_926 <= sk_q0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
                temp_1_reg_926 <= G2out_q1;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln168_fu_1611_p2 = ap_const_lv1_0))) then
                add_ln195_reg_2225 <= add_ln195_fu_1751_p2;
                icmp_ln170_reg_2205 <= icmp_ln170_fu_1623_p2;
                    select_ln175_4_reg_2215(11 downto 7) <= select_ln175_4_fu_1729_p3(11 downto 7);
                    select_ln175_reg_2210(10 downto 5) <= select_ln175_fu_1697_p3(10 downto 5);
                select_ln192_reg_2220 <= select_ln192_fu_1743_p3;
                    zext_ln209_1_reg_2235(11 downto 5) <= zext_ln209_1_fu_1761_p1(11 downto 5);
                    zext_ln209_2_reg_2240(11 downto 4) <= zext_ln209_2_fu_1765_p1(11 downto 4);
                    zext_ln209_reg_2230(10 downto 5) <= zext_ln209_fu_1757_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                add_ln73_reg_2047 <= add_ln73_fu_1230_p2;
                i_12_reg_2060 <= i_12_fu_1246_p2;
                trunc_ln73_reg_2052 <= trunc_ln73_fu_1236_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                    ct_offset_1_reg_2303(12 downto 7) <= ct_offset_1_fu_1911_p2(12 downto 7);
                icmp_ln231_reg_2272 <= icmp_ln231_fu_1795_p2;
                icmp_ln242_reg_2282 <= icmp_ln242_fu_1807_p2;
                    select_ln247_reg_2287(9 downto 2) <= select_ln247_fu_1819_p3(9 downto 2);
                    start1_1_reg_2298(10 downto 5) <= start1_1_fu_1865_p2(10 downto 5);
                temp_reg_2308 <= mu_prime_q0;
                trunc_ln253_reg_2292 <= trunc_ln253_fu_1827_p1;
                xor_ln231_reg_2277 <= xor_ln231_fu_1801_p2;
                    zext_ln271_1_reg_2318(11 downto 1) <= zext_ln271_1_fu_1921_p1(11 downto 1);
                    zext_ln271_2_reg_2323(11 downto 1) <= zext_ln271_2_fu_1925_p1(11 downto 1);
                    zext_ln271_reg_2313(10 downto 5) <= zext_ln271_fu_1917_p1(10 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state16)) then
                i_10_reg_2150 <= i_10_fu_1482_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                i_11_reg_2164 <= i_11_fu_1551_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state24)) then
                i_13_reg_2200 <= i_13_fu_1617_p2;
                    zext_ln168_reg_2189(12 downto 0) <= zext_ln168_fu_1603_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
                i_14_reg_2262 <= i_14_fu_1784_p2;
                trunc_ln229_reg_2255 <= trunc_ln229_fu_1774_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state41)) then
                i_16_reg_2345 <= i_16_fu_1969_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln125_reg_2118 <= icmp_ln125_fu_1413_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_compare_fu_1172_ap_done = ap_const_logic_1))) then
                icmp_ln286_reg_2338 <= icmp_ln286_fu_1957_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                icmp_ln302_reg_2370 <= icmp_ln302_fu_2006_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_0))) then
                icmp_ln75_reg_2065 <= icmp_ln75_fu_1252_p2;
                icmp_ln80_reg_2074 <= icmp_ln80_fu_1265_p2;
                xor_ln75_reg_2069 <= xor_ln75_fu_1258_p2;
                    zext_ln98_reg_2079(12 downto 0) <= zext_ln98_fu_1286_p1(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln75_reg_2065 = ap_const_lv1_0))) then
                j_reg_2092 <= j_fu_1305_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                p_Val2_s_fu_464 <= templong_fu_1400_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done)) or ((ap_const_boolean_0 = ap_block_state28_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state28)))) then
                p_pn_reg_893 <= grp_compare_fu_1172_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done)))) then
                reg_1207 <= grp_compare_fu_1172_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state39)) then
                    shl_ln6_reg_2333(5 downto 3) <= shl_ln6_fu_1937_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                    shl_ln7_reg_2328(5 downto 3) <= shl_ln7_fu_1929_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln75_reg_2065 = ap_const_lv1_0) and (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_1))) then
                    shl_ln_reg_2084(6 downto 3) <= shl_ln_fu_1291_p3(6 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                tmp_1_reg_2107 <= inter_fu_1355_p2(12 downto 12);
                trunc_ln7_reg_2112 <= inter_fu_1355_p2(14 downto 13);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln125_fu_1413_p2 = ap_const_lv1_0))) then
                xor_ln129_reg_2142 <= xor_ln129_fu_1443_p2;
                    zext_ln128_reg_2127(3 downto 0) <= zext_ln128_fu_1425_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_0))) then
                    zext_ln152_1_reg_2174(2 downto 0) <= zext_ln152_1_fu_1562_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln302_fu_2006_p2 = ap_const_lv1_0))) then
                    zext_ln305_reg_2379(3 downto 0) <= zext_ln305_fu_2018_p1(3 downto 0);
            end if;
        end if;
    end process;
    zext_ln98_reg_2079(14 downto 13) <= "00";
    shl_ln_reg_2084(2 downto 0) <= "000";
    zext_ln128_reg_2127(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln152_1_reg_2174(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln168_reg_2189(14 downto 13) <= "00";
    select_ln175_reg_2210(4 downto 0) <= "00000";
    select_ln175_4_reg_2215(6 downto 0) <= "0000000";
    select_ln175_4_reg_2215(12) <= '0';
    zext_ln209_reg_2230(4 downto 0) <= "00000";
    zext_ln209_reg_2230(11) <= '0';
    zext_ln209_1_reg_2235(4 downto 0) <= "00000";
    zext_ln209_1_reg_2235(12) <= '0';
    zext_ln209_2_reg_2240(3 downto 0) <= "0000";
    zext_ln209_2_reg_2240(12) <= '0';
    select_ln247_reg_2287(1 downto 0) <= "00";
    start1_1_reg_2298(4 downto 0) <= "00000";
    ct_offset_1_reg_2303(6 downto 0) <= "0000000";
    zext_ln271_reg_2313(4 downto 0) <= "00000";
    zext_ln271_reg_2313(11) <= '0';
    zext_ln271_1_reg_2318(0) <= '0';
    zext_ln271_1_reg_2318(12) <= '0';
    zext_ln271_2_reg_2323(0) <= '0';
    zext_ln271_2_reg_2323(12) <= '0';
    shl_ln7_reg_2328(2 downto 0) <= "000";
    shl_ln6_reg_2333(2 downto 0) <= "000";
    zext_ln305_reg_2379(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state26, grp_frodo_unpack_fu_1160_ap_done, grp_compare_fu_1172_ap_done, ap_block_state26_on_subcall_done, ap_CS_fsm_state30, ap_block_state30_on_subcall_done, ap_CS_fsm_state2, icmp_ln62_fu_1212_p2, ap_CS_fsm_state3, icmp_ln73_fu_1240_p2, icmp_ln75_reg_2065, ap_CS_fsm_state6, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, icmp_ln125_fu_1413_p2, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, icmp_ln144_fu_1476_p2, ap_CS_fsm_state19, icmp_ln150_fu_1545_p2, ap_CS_fsm_state24, icmp_ln168_fu_1611_p2, ap_CS_fsm_state28, ap_block_state28_on_subcall_done, trunc_ln229_reg_2255, ap_CS_fsm_state31, icmp_ln229_fu_1778_p2, ap_CS_fsm_state32, icmp_ln286_reg_2338, ap_CS_fsm_state40, ap_CS_fsm_state41, icmp_ln284_fu_1963_p2, icmp_ln302_fu_2006_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_CS_fsm_state47, grp_absorb_block_fu_947_ap_done, ap_block_pp1_stage0_subdone, ap_CS_fsm_state15, ap_CS_fsm_state23, ap_block_state23_on_subcall_done, ap_CS_fsm_state36, ap_block_state36_on_subcall_done, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_block_state34_on_subcall_done, ap_block_state38_on_subcall_done, ap_CS_fsm_state4, trunc_ln168_fu_1607_p1, ap_block_state4_on_subcall_done)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (icmp_ln73_fu_1240_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_boolean_0 = ap_block_state4_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and ((icmp_ln109_fu_1299_p2 = ap_const_lv1_1) or (icmp_ln75_reg_2065 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln125_fu_1413_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln125_fu_1413_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                if (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state15))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (icmp_ln144_fu_1476_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                if (((ap_const_boolean_0 = ap_block_state23_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state23))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state24 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln168_fu_1611_p2 = ap_const_lv1_0) and (trunc_ln168_fu_1607_p1 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state24) and (icmp_ln168_fu_1611_p2 = ap_const_lv1_0) and (trunc_ln168_fu_1607_p1 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state25;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                if (((ap_const_boolean_0 = ap_block_state28_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state28))) then
                    ap_NS_fsm <= ap_ST_fsm_state29;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state30 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state30) and (ap_const_boolean_0 = ap_block_state30_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state30;
                end if;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (icmp_ln229_fu_1778_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state32) and (trunc_ln229_reg_2255 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                if (((ap_const_boolean_0 = ap_block_state34_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state34))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                else
                    ap_NS_fsm <= ap_ST_fsm_state34;
                end if;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                if (((ap_const_boolean_0 = ap_block_state36_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state36))) then
                    ap_NS_fsm <= ap_ST_fsm_state31;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                if (((ap_const_boolean_0 = ap_block_state38_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state38))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_state38;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state40 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state40) and (grp_compare_fu_1172_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln284_fu_1963_p2 = ap_const_lv1_0) and (icmp_ln286_reg_2338 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state43;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln284_fu_1963_p2 = ap_const_lv1_0) and (icmp_ln286_reg_2338 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state42;
                else
                    ap_NS_fsm <= ap_ST_fsm_state45;
                end if;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                if (((grp_absorb_block_fu_947_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state47))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state47;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln302_fu_2006_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (icmp_ln302_fu_2006_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state50;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_1_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_1_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_1_ce0 <= grp_vector_matrix_mul_fu_1018_A_1_ce0;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_1_ce1, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_1_ce1 <= grp_vector_matrix_mul_fu_1018_A_1_ce1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_1_we0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_1_we0 <= grp_vector_matrix_mul_fu_1018_A_1_we0;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_1_we1, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_1_we1 <= grp_vector_matrix_mul_fu_1018_A_1_we1;
        else 
            A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_2_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_2_ce0 <= grp_vector_matrix_mul_fu_1018_A_2_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_2_ce1, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_2_ce1 <= grp_vector_matrix_mul_fu_1018_A_2_ce1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_2_we0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_2_we0 <= grp_vector_matrix_mul_fu_1018_A_2_we0;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_A_2_we1, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            A_2_we1 <= grp_vector_matrix_mul_fu_1018_A_2_we1;
        else 
            A_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, trunc_ln229_reg_2255, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_address0, grp_compare_fu_1172_in_1_address0, grp_compare_fu_1172_in_2_address0, grp_encode_fu_1181_out_r_address0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            B_1_address0 <= grp_encode_fu_1181_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            B_1_address0 <= grp_compare_fu_1172_in_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_1_address0 <= grp_compare_fu_1172_in_1_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            B_1_address0 <= grp_frodo_unpack_fu_1160_out_r_address0;
        else 
            B_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, trunc_ln229_reg_2255, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_ce0, grp_compare_fu_1172_in_1_ce0, grp_compare_fu_1172_in_2_ce0, grp_encode_fu_1181_out_r_ce0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            B_1_ce0 <= grp_encode_fu_1181_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            B_1_ce0 <= grp_compare_fu_1172_in_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_1_ce0 <= grp_compare_fu_1172_in_1_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            B_1_ce0 <= grp_frodo_unpack_fu_1160_out_r_ce0;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(ap_CS_fsm_state28, trunc_ln229_reg_2255, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_d0, grp_compare_fu_1172_in_2_d0, grp_encode_fu_1181_out_r_d0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            B_1_d0 <= grp_encode_fu_1181_out_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            B_1_d0 <= grp_compare_fu_1172_in_2_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            B_1_d0 <= grp_frodo_unpack_fu_1160_out_r_d0;
        else 
            B_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(ap_CS_fsm_state28, trunc_ln229_reg_2255, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_we0, grp_compare_fu_1172_in_2_we0, grp_encode_fu_1181_out_r_we0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            B_1_we0 <= grp_encode_fu_1181_out_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            B_1_we0 <= grp_compare_fu_1172_in_2_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            B_1_we0 <= grp_frodo_unpack_fu_1160_out_r_we0;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_address0, grp_compare_fu_1172_in_1_address0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            B_2_address0 <= grp_compare_fu_1172_in_1_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_2_address0 <= grp_frodo_unpack_fu_1160_out_r_address0;
        else 
            B_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_2_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state40, grp_frodo_unpack_fu_1160_out_r_ce0, grp_compare_fu_1172_in_1_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            B_2_ce0 <= grp_compare_fu_1172_in_1_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_2_ce0 <= grp_frodo_unpack_fu_1160_out_r_ce0;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, grp_frodo_unpack_fu_1160_out_r_we0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            B_2_we0 <= grp_frodo_unpack_fu_1160_out_r_we0;
        else 
            B_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    E_1_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_E_address0, grp_shake_gen_S_E_fu_1092_E_address0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, zext_ln64_fu_1224_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            E_1_address0 <= zext_ln64_fu_1224_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_1_address0 <= grp_shake_gen_S_E_fu_1092_E_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            E_1_address0 <= grp_vector_matrix_mul_fu_1018_E_address0;
        else 
            E_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    E_1_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_E_ce0, grp_shake_gen_S_E_fu_1092_E_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            E_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_1_ce0 <= grp_shake_gen_S_E_fu_1092_E_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            E_1_ce0 <= grp_vector_matrix_mul_fu_1018_E_ce0;
        else 
            E_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_1_d0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, grp_shake_gen_S_E_fu_1092_E_d0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            E_1_d0 <= ap_const_lv16_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_1_d0 <= grp_shake_gen_S_E_fu_1092_E_d0;
        else 
            E_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    E_1_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, icmp_ln62_fu_1212_p2, grp_shake_gen_S_E_fu_1092_E_we0, ap_CS_fsm_state34)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_0))) then 
            E_1_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_1_we0 <= grp_shake_gen_S_E_fu_1092_E_we0;
        else 
            E_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    E_2_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_E_address0, grp_shake_gen_S_E_fu_1092_E_address0, grp_frodo_unpack_fu_1160_out_r_address0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38, zext_ln111_fu_1326_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            E_2_address0 <= zext_ln111_fu_1326_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            E_2_address0 <= grp_frodo_unpack_fu_1160_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            E_2_address0 <= grp_shake_gen_S_E_fu_1092_E_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_2_address0 <= grp_vector_matrix_mul_fu_1018_E_address0;
        else 
            E_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    E_2_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_E_ce0, grp_shake_gen_S_E_fu_1092_E_ce0, grp_frodo_unpack_fu_1160_out_r_ce0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            E_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            E_2_ce0 <= grp_frodo_unpack_fu_1160_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            E_2_ce0 <= grp_shake_gen_S_E_fu_1092_E_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            E_2_ce0 <= grp_vector_matrix_mul_fu_1018_E_ce0;
        else 
            E_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_2_d0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_E_d0, grp_frodo_unpack_fu_1160_out_r_d0, ap_CS_fsm_state23, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            E_2_d0 <= grp_frodo_unpack_fu_1160_out_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            E_2_d0 <= grp_shake_gen_S_E_fu_1092_E_d0;
        else 
            E_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    E_2_we0_assign_proc : process(ap_CS_fsm_state6, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_E_we0, grp_frodo_unpack_fu_1160_out_r_we0, ap_CS_fsm_state23, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            E_2_we0 <= grp_frodo_unpack_fu_1160_out_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            E_2_we0 <= grp_shake_gen_S_E_fu_1092_E_we0;
        else 
            E_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_address0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, icmp_ln150_fu_1545_p2, grp_absorb_block_fu_947_output_r_address0, ap_CS_fsm_state15, zext_ln152_fu_1557_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_1))) then 
            G2out_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_0))) then 
            G2out_address0 <= zext_ln152_fu_1557_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            G2out_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_address0 <= grp_absorb_block_fu_947_output_r_address0;
        else 
            G2out_address0 <= "XXXX";
        end if; 
    end process;


    G2out_address1_assign_proc : process(ap_CS_fsm_state19, zext_ln152_1_fu_1562_p1, ap_CS_fsm_state41, zext_ln287_1_fu_1986_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            G2out_address1 <= zext_ln287_1_fu_1986_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G2out_address1 <= zext_ln152_1_fu_1562_p1(4 - 1 downto 0);
        else 
            G2out_address1 <= "XXXX";
        end if; 
    end process;


    G2out_ce0_assign_proc : process(ap_CS_fsm_state16, ap_CS_fsm_state19, icmp_ln150_fu_1545_p2, grp_absorb_block_fu_947_output_r_ce0, ap_CS_fsm_state15)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state19) and (icmp_ln150_fu_1545_p2 = ap_const_lv1_0)))) then 
            G2out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_ce0 <= grp_absorb_block_fu_947_output_r_ce0;
        else 
            G2out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_ce1_assign_proc : process(ap_CS_fsm_state19, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            G2out_ce1 <= ap_const_logic_1;
        else 
            G2out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_we0_assign_proc : process(grp_absorb_block_fu_947_output_r_we0, ap_CS_fsm_state15)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            G2out_we0 <= grp_absorb_block_fu_947_output_r_we0;
        else 
            G2out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_address0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_S_address0, grp_shake_gen_S_E_fu_1092_S_address0, grp_frodo_unpack_fu_1160_out_r_address0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0))) then 
            S_1_address0 <= grp_frodo_unpack_fu_1160_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            S_1_address0 <= grp_shake_gen_S_E_fu_1092_S_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)))) then 
            S_1_address0 <= grp_vector_matrix_mul_fu_1018_S_address0;
        else 
            S_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_1_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_S_ce0, grp_shake_gen_S_E_fu_1092_S_ce0, grp_frodo_unpack_fu_1160_out_r_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0))) then 
            S_1_ce0 <= grp_frodo_unpack_fu_1160_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            S_1_ce0 <= grp_shake_gen_S_E_fu_1092_S_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)))) then 
            S_1_ce0 <= grp_vector_matrix_mul_fu_1018_S_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_d0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, grp_shake_gen_S_E_fu_1092_S_d0, grp_frodo_unpack_fu_1160_out_r_d0, ap_CS_fsm_state34, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0))) then 
            S_1_d0 <= grp_frodo_unpack_fu_1160_out_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            S_1_d0 <= grp_shake_gen_S_E_fu_1092_S_d0;
        else 
            S_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    S_1_we0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, grp_shake_gen_S_E_fu_1092_S_we0, grp_frodo_unpack_fu_1160_out_r_we0, ap_CS_fsm_state34, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0))) then 
            S_1_we0 <= grp_frodo_unpack_fu_1160_out_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            S_1_we0 <= grp_shake_gen_S_E_fu_1092_S_we0;
        else 
            S_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_address0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_S_address0, grp_shake_gen_S_E_fu_1092_S_address0, grp_frodo_unpack_fu_1160_out_r_address0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1))) then 
            S_2_address0 <= grp_frodo_unpack_fu_1160_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            S_2_address0 <= grp_shake_gen_S_E_fu_1092_S_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            S_2_address0 <= grp_vector_matrix_mul_fu_1018_S_address0;
        else 
            S_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_2_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_S_ce0, grp_shake_gen_S_E_fu_1092_S_ce0, grp_frodo_unpack_fu_1160_out_r_ce0, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1))) then 
            S_2_ce0 <= grp_frodo_unpack_fu_1160_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            S_2_ce0 <= grp_shake_gen_S_E_fu_1092_S_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            S_2_ce0 <= grp_vector_matrix_mul_fu_1018_S_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_d0_assign_proc : process(trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_S_d0, grp_frodo_unpack_fu_1160_out_r_d0, ap_CS_fsm_state23, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1))) then 
            S_2_d0 <= grp_frodo_unpack_fu_1160_out_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            S_2_d0 <= grp_shake_gen_S_E_fu_1092_S_d0;
        else 
            S_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    S_2_we0_assign_proc : process(trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_S_we0, grp_frodo_unpack_fu_1160_out_r_we0, ap_CS_fsm_state23, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1))) then 
            S_2_we0 <= grp_frodo_unpack_fu_1160_out_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            S_2_we0 <= grp_shake_gen_S_E_fu_1092_S_we0;
        else 
            S_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_1_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, trunc_ln229_reg_2255, grp_vector_matrix_mul_fu_1018_output_vec_address0, grp_compare_fu_1172_in_2_address0, grp_encode_fu_1181_in_r_address0, ap_CS_fsm_state36, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            W_1_address0 <= grp_encode_fu_1181_in_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            W_1_address0 <= grp_compare_fu_1172_in_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            W_1_address0 <= grp_vector_matrix_mul_fu_1018_output_vec_address0;
        else 
            W_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    W_1_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, trunc_ln229_reg_2255, grp_vector_matrix_mul_fu_1018_output_vec_ce0, grp_compare_fu_1172_in_2_ce0, grp_encode_fu_1181_in_r_ce0, ap_CS_fsm_state36, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            W_1_ce0 <= grp_encode_fu_1181_in_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            W_1_ce0 <= grp_compare_fu_1172_in_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            W_1_ce0 <= grp_vector_matrix_mul_fu_1018_output_vec_ce0;
        else 
            W_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_1_ce1_assign_proc : process(ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_output_vec_ce1, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            W_1_ce1 <= grp_vector_matrix_mul_fu_1018_output_vec_ce1;
        else 
            W_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_1_d0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln229_reg_2255, grp_compare_fu_1172_in_2_d0, grp_encode_fu_1181_in_r_d0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            W_1_d0 <= grp_encode_fu_1181_in_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            W_1_d0 <= grp_compare_fu_1172_in_2_d0;
        else 
            W_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    W_1_we0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln229_reg_2255, grp_compare_fu_1172_in_2_we0, grp_encode_fu_1181_in_r_we0, ap_CS_fsm_state36)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state36) and (trunc_ln229_reg_2255 = ap_const_lv1_0)))) then 
            W_1_we0 <= grp_encode_fu_1181_in_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            W_1_we0 <= grp_compare_fu_1172_in_2_we0;
        else 
            W_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_1_we1_assign_proc : process(ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_output_vec_we1, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            W_1_we1 <= grp_vector_matrix_mul_fu_1018_output_vec_we1;
        else 
            W_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    W_2_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, trunc_ln73_reg_2052, icmp_ln75_reg_2065, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_output_vec_address0, grp_compare_fu_1172_in_2_address0, grp_reset_vector_fu_1198_in_r_address0, ap_CS_fsm_state23, ap_CS_fsm_state4, zext_ln64_fu_1224_p1, zext_ln111_1_fu_1331_p1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln109_fu_1299_p2 = ap_const_lv1_0) and (icmp_ln75_reg_2065 = ap_const_lv1_0))) then 
            W_2_address0 <= zext_ln111_1_fu_1331_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            W_2_address0 <= zext_ln64_fu_1224_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            W_2_address0 <= grp_reset_vector_fu_1198_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            W_2_address0 <= grp_compare_fu_1172_in_2_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            W_2_address0 <= grp_vector_matrix_mul_fu_1018_output_vec_address0;
        else 
            W_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    W_2_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state2, trunc_ln73_reg_2052, icmp_ln75_reg_2065, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_output_vec_ce0, grp_compare_fu_1172_in_2_ce0, grp_reset_vector_fu_1198_in_r_ce0, ap_CS_fsm_state23, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln109_fu_1299_p2 = ap_const_lv1_0) and (icmp_ln75_reg_2065 = ap_const_lv1_0)))) then 
            W_2_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            W_2_ce0 <= grp_reset_vector_fu_1198_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            W_2_ce0 <= grp_compare_fu_1172_in_2_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            W_2_ce0 <= grp_vector_matrix_mul_fu_1018_output_vec_ce0;
        else 
            W_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    W_2_ce1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, grp_vector_matrix_mul_fu_1018_output_vec_ce1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            W_2_ce1 <= grp_vector_matrix_mul_fu_1018_output_vec_ce1;
        else 
            W_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    W_2_d0_assign_proc : process(ap_CS_fsm_state2, icmp_ln75_reg_2065, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, ap_CS_fsm_state28, grp_compare_fu_1172_in_2_d0, grp_reset_vector_fu_1198_in_r_d0, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln109_fu_1299_p2 = ap_const_lv1_0) and (icmp_ln75_reg_2065 = ap_const_lv1_0)))) then 
            W_2_d0 <= ap_const_lv16_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            W_2_d0 <= grp_reset_vector_fu_1198_in_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            W_2_d0 <= grp_compare_fu_1172_in_2_d0;
        else 
            W_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    W_2_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln62_fu_1212_p2, icmp_ln75_reg_2065, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, ap_CS_fsm_state28, grp_compare_fu_1172_in_2_we0, grp_reset_vector_fu_1198_in_r_we0, ap_CS_fsm_state23)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln109_fu_1299_p2 = ap_const_lv1_0) and (icmp_ln75_reg_2065 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln62_fu_1212_p2 = ap_const_lv1_0)))) then 
            W_2_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            W_2_we0 <= grp_reset_vector_fu_1198_in_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            W_2_we0 <= grp_compare_fu_1172_in_2_we0;
        else 
            W_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    W_2_we1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, grp_vector_matrix_mul_fu_1018_output_vec_we1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            W_2_we1 <= grp_vector_matrix_mul_fu_1018_output_vec_we1;
        else 
            W_2_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln111_fu_1321_p2 <= std_logic_vector(signed(sext_ln111_fu_1317_p1) + signed(shl_ln_reg_2084));
    add_ln113_fu_1379_p2 <= std_logic_vector(unsigned(ap_const_lv2_1) + unsigned(trunc_ln7_reg_2112));
    add_ln120_fu_1336_p2 <= std_logic_vector(unsigned(i_1_reg_792) + unsigned(ap_const_lv4_F));
    add_ln185_fu_1663_p2 <= std_logic_vector(unsigned(zext_ln185_fu_1647_p1) + unsigned(zext_ln185_1_fu_1659_p1));
    add_ln195_fu_1751_p2 <= std_logic_vector(unsigned(ap_const_lv13_258) + unsigned(ct_offset_reg_882));
    add_ln253_fu_1859_p2 <= std_logic_vector(unsigned(zext_ln253_1_fu_1843_p1) + unsigned(zext_ln253_2_fu_1855_p1));
    add_ln291_fu_1995_p2 <= std_logic_vector(unsigned(zext_ln291_fu_1991_p1) + unsigned(ap_const_lv9_17C));
    add_ln73_fu_1230_p2 <= std_logic_vector(unsigned(ap_const_lv13_258) + unsigned(phi_mul_reg_804));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(9);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(46);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state15 <= ap_CS_fsm(13);
    ap_CS_fsm_state16 <= ap_CS_fsm(14);
    ap_CS_fsm_state17 <= ap_CS_fsm(15);
    ap_CS_fsm_state18 <= ap_CS_fsm(16);
    ap_CS_fsm_state19 <= ap_CS_fsm(17);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(18);
    ap_CS_fsm_state21 <= ap_CS_fsm(19);
    ap_CS_fsm_state22 <= ap_CS_fsm(20);
    ap_CS_fsm_state23 <= ap_CS_fsm(21);
    ap_CS_fsm_state24 <= ap_CS_fsm(22);
    ap_CS_fsm_state25 <= ap_CS_fsm(23);
    ap_CS_fsm_state26 <= ap_CS_fsm(24);
    ap_CS_fsm_state27 <= ap_CS_fsm(25);
    ap_CS_fsm_state28 <= ap_CS_fsm(26);
    ap_CS_fsm_state29 <= ap_CS_fsm(27);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(28);
    ap_CS_fsm_state31 <= ap_CS_fsm(29);
    ap_CS_fsm_state32 <= ap_CS_fsm(30);
    ap_CS_fsm_state33 <= ap_CS_fsm(31);
    ap_CS_fsm_state34 <= ap_CS_fsm(32);
    ap_CS_fsm_state35 <= ap_CS_fsm(33);
    ap_CS_fsm_state36 <= ap_CS_fsm(34);
    ap_CS_fsm_state37 <= ap_CS_fsm(35);
    ap_CS_fsm_state38 <= ap_CS_fsm(36);
    ap_CS_fsm_state39 <= ap_CS_fsm(37);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(38);
    ap_CS_fsm_state41 <= ap_CS_fsm(39);
    ap_CS_fsm_state42 <= ap_CS_fsm(40);
    ap_CS_fsm_state43 <= ap_CS_fsm(41);
    ap_CS_fsm_state44 <= ap_CS_fsm(42);
    ap_CS_fsm_state45 <= ap_CS_fsm(43);
    ap_CS_fsm_state46 <= ap_CS_fsm(44);
    ap_CS_fsm_state47 <= ap_CS_fsm(45);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(47);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state23_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1092_ap_done, grp_reset_vector_fu_1198_ap_done)
    begin
                ap_block_state23_on_subcall_done <= ((grp_shake_gen_S_E_fu_1092_ap_done = ap_const_logic_0) or (grp_reset_vector_fu_1198_ap_done = ap_const_logic_0));
    end process;


    ap_block_state26_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1092_ap_done, grp_vector_matrix_mul_fu_1018_ap_done, grp_frodo_unpack_fu_1160_ap_done, grp_compare_fu_1172_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((grp_shake_gen_S_E_fu_1092_ap_done = ap_const_logic_0) or (grp_compare_fu_1172_ap_done = ap_const_logic_0) or (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0));
    end process;


    ap_block_state28_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1092_ap_done, grp_vector_matrix_mul_fu_1018_ap_done, grp_frodo_unpack_fu_1160_ap_done, grp_compare_fu_1172_ap_done)
    begin
                ap_block_state28_on_subcall_done <= ((grp_shake_gen_S_E_fu_1092_ap_done = ap_const_logic_0) or (grp_compare_fu_1172_ap_done = ap_const_logic_0) or (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0));
    end process;


    ap_block_state30_on_subcall_done_assign_proc : process(grp_frodo_unpack_fu_1160_ap_done, grp_compare_fu_1172_ap_done)
    begin
                ap_block_state30_on_subcall_done <= ((grp_compare_fu_1172_ap_done = ap_const_logic_0) or (grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_0));
    end process;


    ap_block_state34_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1092_ap_done, grp_vector_matrix_mul_fu_1018_ap_done, grp_absorb_block_fu_947_ap_done, grp_read_input_fu_1189_ap_done)
    begin
                ap_block_state34_on_subcall_done <= ((grp_shake_gen_S_E_fu_1092_ap_done = ap_const_logic_0) or (grp_read_input_fu_1189_ap_done = ap_const_logic_0) or (grp_absorb_block_fu_947_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0));
    end process;


    ap_block_state36_on_subcall_done_assign_proc : process(trunc_ln229_reg_2255, grp_encode_fu_1181_ap_done)
    begin
                ap_block_state36_on_subcall_done <= (((grp_encode_fu_1181_ap_done = ap_const_logic_0) and (trunc_ln229_reg_2255 = ap_const_lv1_1)) or ((grp_encode_fu_1181_ap_done = ap_const_logic_0) and (trunc_ln229_reg_2255 = ap_const_lv1_0)));
    end process;


    ap_block_state38_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1092_ap_done, grp_vector_matrix_mul_fu_1018_ap_done, grp_absorb_block_fu_947_ap_done, grp_read_input_fu_1189_ap_done)
    begin
                ap_block_state38_on_subcall_done <= ((grp_shake_gen_S_E_fu_1092_ap_done = ap_const_logic_0) or (grp_read_input_fu_1189_ap_done = ap_const_logic_0) or (grp_absorb_block_fu_947_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0));
    end process;

        ap_block_state48_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_on_subcall_done_assign_proc : process(grp_vector_matrix_mul_fu_1018_ap_done, grp_frodo_unpack_fu_1160_ap_done, trunc_ln73_reg_2052)
    begin
                ap_block_state4_on_subcall_done <= (((grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_0) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((grp_frodo_unpack_fu_1160_ap_done = ap_const_logic_0) and (trunc_ln73_reg_2052 = ap_const_lv1_0)) or ((grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((grp_vector_matrix_mul_fu_1018_ap_done = ap_const_logic_0) and (trunc_ln73_reg_2052 = ap_const_lv1_0)));
    end process;


    ap_condition_pp0_exit_iter0_state10_assign_proc : process(icmp_ln125_fu_1413_p2)
    begin
        if ((icmp_ln125_fu_1413_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state10 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state48_assign_proc : process(icmp_ln302_fu_2006_p2)
    begin
        if ((icmp_ln302_fu_2006_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state48 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state48 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state50)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    check1_fu_1769_p2 <= (select_ln192_reg_2220 or p_pn_reg_893);

    ct_address0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln73_reg_2052, ap_CS_fsm_state6, ap_CS_fsm_state28, grp_frodo_unpack_fu_1160_in_r_address0, grp_read_input_fu_1189_in_r_address0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ct_address0 <= grp_read_input_fu_1189_in_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            ct_address0 <= grp_frodo_unpack_fu_1160_in_r_address0;
        else 
            ct_address0 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    ct_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln73_reg_2052, ap_CS_fsm_state6, ap_CS_fsm_state28, grp_frodo_unpack_fu_1160_in_r_ce0, grp_read_input_fu_1189_in_r_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            ct_ce0 <= grp_read_input_fu_1189_in_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            ct_ce0 <= grp_frodo_unpack_fu_1160_in_r_ce0;
        else 
            ct_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ct_offset_1_fu_1911_p2 <= std_logic_vector(unsigned(zext_ln257_fu_1907_p1) + unsigned(zext_ln253_fu_1839_p1));
    empty_27_fu_1449_p1 <= mu_prime_q0(8 - 1 downto 0);
    empty_29_fu_1499_p1 <= sk_q0(8 - 1 downto 0);
    end1_1_fu_1871_p2 <= std_logic_vector(unsigned(ap_const_lv11_140) + unsigned(add_ln253_fu_1859_p2));
    end1_fu_1679_p2 <= std_logic_vector(unsigned(ap_const_lv11_140) + unsigned(add_ln185_fu_1663_p2));
    end2_1_fu_1893_p2 <= std_logic_vector(signed(ap_const_lv12_A12) + signed(zext_ln255_fu_1883_p1));
    end2_fu_1691_p2 <= std_logic_vector(unsigned(ap_const_lv12_640) + unsigned(zext_ln185_2_fu_1669_p1));
    grp_absorb_block_fu_947_ap_start <= grp_absorb_block_fu_947_ap_start_reg;

    grp_absorb_block_fu_947_begin_r_assign_proc : process(xor_ln231_reg_2277, ap_CS_fsm_state47, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_absorb_block_fu_947_begin_r <= xor_ln231_reg_2277;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_absorb_block_fu_947_begin_r <= ap_const_lv1_1;
        else 
            grp_absorb_block_fu_947_begin_r <= "X";
        end if; 
    end process;


    grp_absorb_block_fu_947_inlen_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_absorb_block_fu_947_inlen <= ap_const_lv9_62;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_absorb_block_fu_947_inlen <= ap_const_lv9_A0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_absorb_block_fu_947_inlen <= ap_const_lv9_5;
        else 
            grp_absorb_block_fu_947_inlen <= "XXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_947_input_r_q0_assign_proc : process(ap_CS_fsm_state47, shake_input_1_q0, shake_input_2_q0, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_absorb_block_fu_947_input_r_q0 <= shake_input_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_absorb_block_fu_947_input_r_q0 <= shake_input_1_q0;
        else 
            grp_absorb_block_fu_947_input_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_947_input_r_q1_assign_proc : process(ap_CS_fsm_state47, shake_input_1_q1, shake_input_2_q1, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            grp_absorb_block_fu_947_input_r_q1 <= shake_input_2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            grp_absorb_block_fu_947_input_r_q1 <= shake_input_1_q1;
        else 
            grp_absorb_block_fu_947_input_r_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_947_outlen_assign_proc : process(ap_CS_fsm_state47, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_absorb_block_fu_947_outlen <= ap_const_lv7_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_absorb_block_fu_947_outlen <= ap_const_lv7_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_absorb_block_fu_947_outlen <= ap_const_lv7_20;
        else 
            grp_absorb_block_fu_947_outlen <= "XXXXXXX";
        end if; 
    end process;


    grp_absorb_block_fu_947_reset_assign_proc : process(icmp_ln242_reg_2282, ap_CS_fsm_state47, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_absorb_block_fu_947_reset <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_absorb_block_fu_947_reset <= icmp_ln242_reg_2282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            grp_absorb_block_fu_947_reset <= ap_const_lv1_1;
        else 
            grp_absorb_block_fu_947_reset <= "X";
        end if; 
    end process;

    grp_compare_fu_1172_ap_start <= grp_compare_fu_1172_ap_start_reg;

    grp_compare_fu_1172_in_1_q0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state40, B_1_q0, B_2_q0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_compare_fu_1172_in_1_q0 <= B_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_compare_fu_1172_in_1_q0 <= B_1_q0;
        else 
            grp_compare_fu_1172_in_1_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_compare_fu_1172_in_2_q0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state40, B_1_q0, W_1_q0, W_2_q0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_compare_fu_1172_in_2_q0 <= B_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            grp_compare_fu_1172_in_2_q0 <= W_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_compare_fu_1172_in_2_q0 <= W_1_q0;
        else 
            grp_compare_fu_1172_in_2_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_compare_fu_1172_n_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, ap_CS_fsm_state28, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_compare_fu_1172_n <= ap_const_lv11_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_compare_fu_1172_n <= ap_const_lv11_280;
        else 
            grp_compare_fu_1172_n <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_encode_fu_1181_ap_start <= grp_encode_fu_1181_ap_start_reg;

    grp_encode_fu_1181_out_offset_assign_proc : process(trunc_ln229_reg_2255, shl_ln7_reg_2328, shl_ln6_reg_2333, ap_CS_fsm_state36)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
            if ((trunc_ln229_reg_2255 = ap_const_lv1_1)) then 
                grp_encode_fu_1181_out_offset <= shl_ln6_reg_2333;
            elsif ((trunc_ln229_reg_2255 = ap_const_lv1_0)) then 
                grp_encode_fu_1181_out_offset <= shl_ln7_reg_2328;
            else 
                grp_encode_fu_1181_out_offset <= "XXXXXX";
            end if;
        else 
            grp_encode_fu_1181_out_offset <= "XXXXXX";
        end if; 
    end process;

    grp_frodo_unpack_fu_1160_ap_start <= grp_frodo_unpack_fu_1160_ap_start_reg;

    grp_frodo_unpack_fu_1160_in_offset_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln73_reg_2052, zext_ln98_reg_2079, ap_CS_fsm_state6, zext_ln168_reg_2189, ap_CS_fsm_state28, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_frodo_unpack_fu_1160_in_offset <= zext_ln168_reg_2189;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_frodo_unpack_fu_1160_in_offset <= ap_const_lv15_12C0;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_frodo_unpack_fu_1160_in_offset <= zext_ln98_reg_2079;
        else 
            grp_frodo_unpack_fu_1160_in_offset <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_frodo_unpack_fu_1160_outlen_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state30, trunc_ln73_reg_2052, ap_CS_fsm_state6, ap_CS_fsm_state28, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
            grp_frodo_unpack_fu_1160_outlen <= ap_const_lv11_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_frodo_unpack_fu_1160_outlen <= ap_const_lv11_280;
        else 
            grp_frodo_unpack_fu_1160_outlen <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_read_input_fu_1189_ap_start <= grp_read_input_fu_1189_ap_start_reg;
    grp_reset_vector_fu_1198_ap_start <= grp_reset_vector_fu_1198_ap_start_reg;
    grp_shake_gen_S_E_fu_1092_ap_start <= grp_shake_gen_S_E_fu_1092_ap_start_reg;

    grp_shake_gen_S_E_fu_1092_high1_assign_proc : process(ap_CS_fsm_state26, zext_ln209_reg_2230, ap_CS_fsm_state28, zext_ln271_reg_2313, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_shake_gen_S_E_fu_1092_high1 <= zext_ln271_reg_2313;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_shake_gen_S_E_fu_1092_high1 <= zext_ln209_reg_2230;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_shake_gen_S_E_fu_1092_high1 <= ap_const_lv12_A0;
        else 
            grp_shake_gen_S_E_fu_1092_high1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1092_high2_assign_proc : process(ap_CS_fsm_state26, zext_ln209_2_reg_2240, ap_CS_fsm_state28, zext_ln271_2_reg_2323, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_shake_gen_S_E_fu_1092_high2 <= zext_ln271_2_reg_2323;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_shake_gen_S_E_fu_1092_high2 <= zext_ln209_2_reg_2240;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_shake_gen_S_E_fu_1092_high2 <= ap_const_lv13_5A0;
        else 
            grp_shake_gen_S_E_fu_1092_high2 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1092_low1_assign_proc : process(ap_CS_fsm_state26, select_ln175_reg_2210, ap_CS_fsm_state28, start1_1_reg_2298, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_shake_gen_S_E_fu_1092_low1 <= start1_1_reg_2298;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_shake_gen_S_E_fu_1092_low1 <= select_ln175_reg_2210;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_shake_gen_S_E_fu_1092_low1 <= ap_const_lv11_0;
        else 
            grp_shake_gen_S_E_fu_1092_low1 <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1092_low2_assign_proc : process(ap_CS_fsm_state26, zext_ln209_1_reg_2235, ap_CS_fsm_state28, zext_ln271_1_reg_2318, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_shake_gen_S_E_fu_1092_low2 <= zext_ln271_1_reg_2318;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_shake_gen_S_E_fu_1092_low2 <= zext_ln209_1_reg_2235;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_shake_gen_S_E_fu_1092_low2 <= ap_const_lv13_500;
        else 
            grp_shake_gen_S_E_fu_1092_low2 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1092_outlen_assign_proc : process(ap_CS_fsm_state26, select_ln175_4_reg_2215, ap_CS_fsm_state28, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_shake_gen_S_E_fu_1092_outlen <= ap_const_lv13_580;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_shake_gen_S_E_fu_1092_outlen <= select_ln175_4_reg_2215;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_shake_gen_S_E_fu_1092_outlen <= ap_const_lv13_A00;
        else 
            grp_shake_gen_S_E_fu_1092_outlen <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_E_q0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, E_1_q0, E_2_q0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_vector_matrix_mul_fu_1018_E_q0 <= E_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_E_q0 <= E_1_q0;
        else 
            grp_vector_matrix_mul_fu_1018_E_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_S_q0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, S_1_q0, S_2_q0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)))) then 
            grp_vector_matrix_mul_fu_1018_S_q0 <= S_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_S_q0 <= S_2_q0;
        else 
            grp_vector_matrix_mul_fu_1018_S_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_vector_matrix_mul_fu_1018_ap_start <= grp_vector_matrix_mul_fu_1018_ap_start_reg;

    grp_vector_matrix_mul_fu_1018_begin_r_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, xor_ln75_reg_2069, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_vector_matrix_mul_fu_1018_begin_r <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_begin_r <= xor_ln75_reg_2069;
        else 
            grp_vector_matrix_mul_fu_1018_begin_r <= "X";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_n_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_vector_matrix_mul_fu_1018_n <= ap_const_lv11_280;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_n <= ap_const_lv11_8;
        else 
            grp_vector_matrix_mul_fu_1018_n <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_output_vec_q0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, W_1_q0, W_2_q0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_vector_matrix_mul_fu_1018_output_vec_q0 <= W_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_output_vec_q0 <= W_2_q0;
        else 
            grp_vector_matrix_mul_fu_1018_output_vec_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_pregen_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, icmp_ln80_reg_2074, icmp_ln170_reg_2205, ap_CS_fsm_state28, icmp_ln231_reg_2272, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_vector_matrix_mul_fu_1018_pregen <= icmp_ln231_reg_2272;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_vector_matrix_mul_fu_1018_pregen <= icmp_ln170_reg_2205;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_pregen <= icmp_ln80_reg_2074;
        else 
            grp_vector_matrix_mul_fu_1018_pregen <= "X";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1018_use_A_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34))) then 
            grp_vector_matrix_mul_fu_1018_use_A <= ap_const_lv4_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            grp_vector_matrix_mul_fu_1018_use_A <= ap_const_lv4_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            grp_vector_matrix_mul_fu_1018_use_A <= ap_const_lv4_0;
        else 
            grp_vector_matrix_mul_fu_1018_use_A <= "XXXX";
        end if; 
    end process;

    i_10_fu_1482_p2 <= std_logic_vector(unsigned(i_3_reg_837) + unsigned(ap_const_lv4_1));
    i_11_fu_1551_p2 <= std_logic_vector(unsigned(i_4_reg_848) + unsigned(ap_const_lv3_1));
    i_12_fu_1246_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_1_reg_792));
    i_13_fu_1617_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_5_reg_871));
    i_14_fu_1784_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_6_reg_902));
    i_15_fu_2012_p2 <= std_logic_vector(unsigned(i_8_reg_936) + unsigned(ap_const_lv4_1));
    i_16_fu_1969_p2 <= std_logic_vector(unsigned(i_7_reg_914) + unsigned(ap_const_lv4_1));
    i_9_fu_1419_p2 <= std_logic_vector(unsigned(i_2_reg_826) + unsigned(ap_const_lv4_1));
    i_fu_1218_p2 <= std_logic_vector(unsigned(i_0_reg_781) + unsigned(ap_const_lv4_1));
    icmp_ln109_fu_1299_p2 <= "1" when (j_0_reg_815 = ap_const_lv4_8) else "0";
    icmp_ln125_fu_1413_p2 <= "1" when (i_2_reg_826 = ap_const_lv4_8) else "0";
    icmp_ln144_fu_1476_p2 <= "1" when (i_3_reg_837 = ap_const_lv4_8) else "0";
    icmp_ln150_fu_1545_p2 <= "1" when (i_4_reg_848 = ap_const_lv3_7) else "0";
    icmp_ln168_fu_1611_p2 <= "1" when (i_5_reg_871 = ap_const_lv4_8) else "0";
    icmp_ln170_fu_1623_p2 <= "1" when (i_5_reg_871 = ap_const_lv4_0) else "0";
    icmp_ln175_fu_1629_p2 <= "1" when (i_5_reg_871 = ap_const_lv4_7) else "0";
    icmp_ln192_fu_1737_p2 <= "1" when (i_5_reg_871 = ap_const_lv4_1) else "0";
    icmp_ln229_fu_1778_p2 <= "1" when (i_6_reg_902 = ap_const_lv4_8) else "0";
    icmp_ln231_fu_1795_p2 <= "1" when (i_6_reg_902 = ap_const_lv4_0) else "0";
    icmp_ln242_fu_1807_p2 <= "1" when (i_6_reg_902 = ap_const_lv4_1) else "0";
    icmp_ln247_fu_1813_p2 <= "1" when (i_6_reg_902 = ap_const_lv4_7) else "0";
    icmp_ln284_fu_1963_p2 <= "1" when (i_7_reg_914 = ap_const_lv4_8) else "0";
    icmp_ln286_fu_1957_p2 <= "1" when (or_ln286_fu_1951_p2 = ap_const_lv8_0) else "0";
    icmp_ln302_fu_2006_p2 <= "1" when (i_8_reg_936 = ap_const_lv4_8) else "0";
    icmp_ln62_fu_1212_p2 <= "1" when (i_0_reg_781 = ap_const_lv4_8) else "0";
    icmp_ln73_fu_1240_p2 <= "1" when (i_1_reg_792 = ap_const_lv4_9) else "0";
    icmp_ln75_fu_1252_p2 <= "1" when (i_1_reg_792 = ap_const_lv4_0) else "0";
    icmp_ln80_fu_1265_p2 <= "1" when (i_1_reg_792 = ap_const_lv4_1) else "0";
    icmp_ln85_fu_1272_p2 <= "1" when (i_1_reg_792 = ap_const_lv4_8) else "0";
    inter_fu_1355_p2 <= std_logic_vector(unsigned(E_2_q0) - unsigned(zext_ln111_2_fu_1351_p1));
    j_fu_1305_p2 <= std_logic_vector(unsigned(j_0_reg_815) + unsigned(ap_const_lv4_1));
    lshr_ln1_fu_1390_p4 <= p_Val2_s_fu_464(15 downto 2);
    lshr_ln2_fu_1571_p4 <= G2out_q1(15 downto 8);
    lshr_ln_fu_1526_p4 <= G2out_q0(15 downto 8);

    mu_prime_address0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln128_fu_1425_p1, ap_CS_fsm_state31, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, zext_ln305_fu_2018_p1, ap_CS_fsm_state47, grp_absorb_block_fu_947_output_r_address0, ap_CS_fsm_state34, ap_CS_fsm_state38, zext_ln120_fu_1342_p1, ap_block_pp0_stage0, zext_ln258_fu_1790_p1, ap_block_pp1_stage0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            mu_prime_address0 <= zext_ln305_fu_2018_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            mu_prime_address0 <= zext_ln258_fu_1790_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            mu_prime_address0 <= zext_ln128_fu_1425_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mu_prime_address0 <= zext_ln120_fu_1342_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            mu_prime_address0 <= grp_absorb_block_fu_947_output_r_address0;
        else 
            mu_prime_address0 <= "XXXX";
        end if; 
    end process;


    mu_prime_ce0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state31, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, ap_CS_fsm_state47, grp_absorb_block_fu_947_output_r_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            mu_prime_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            mu_prime_ce0 <= grp_absorb_block_fu_947_output_r_ce0;
        else 
            mu_prime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    mu_prime_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, grp_absorb_block_fu_947_output_r_d0, ap_CS_fsm_state34, ap_CS_fsm_state38, p_Val2_s_fu_464)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            mu_prime_d0 <= p_Val2_s_fu_464;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            mu_prime_d0 <= grp_absorb_block_fu_947_output_r_d0;
        else 
            mu_prime_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mu_prime_we0_assign_proc : process(icmp_ln75_reg_2065, ap_CS_fsm_state7, icmp_ln109_fu_1299_p2, ap_CS_fsm_state47, grp_absorb_block_fu_947_output_r_we0, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) and (icmp_ln75_reg_2065 = ap_const_lv1_0) and (icmp_ln109_fu_1299_p2 = ap_const_lv1_1))) then 
            mu_prime_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            mu_prime_we0 <= grp_absorb_block_fu_947_output_r_we0;
        else 
            mu_prime_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln154_fu_1596_p2 <= (shl_ln154_fu_1590_p2 or ap_const_lv16_1F);
    or_ln1_fu_1536_p3 <= (ap_const_lv8_96 & lshr_ln_fu_1526_p4);
    or_ln286_1_fu_1945_p2 <= (grp_compare_fu_1172_ap_return or check1_0_reg_859);
    or_ln286_fu_1951_p2 <= (reg_1207 or or_ln286_1_fu_1945_p2);
    or_ln2_fu_1581_p3 <= (trunc_ln152_fu_1567_p1 & lshr_ln2_fu_1571_p4);
    or_ln_fu_1430_p3 <= (ap_const_lv10_26D & i_2_reg_826);
    p_1_fu_1453_p4 <= mu_prime_q0(15 downto 8);
    p_2_fu_1503_p4 <= sk_q0(15 downto 8);

    seed_A_separated_address0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_seed_A_separated_address0, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state12, zext_ln146_1_fu_1522_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seed_A_separated_address0 <= zext_ln146_1_fu_1522_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seed_A_separated_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            seed_A_separated_address0 <= grp_vector_matrix_mul_fu_1018_seed_A_separated_address0;
        else 
            seed_A_separated_address0 <= "XXXX";
        end if; 
    end process;


    seed_A_separated_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_seed_A_separated_ce0, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            seed_A_separated_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            seed_A_separated_ce0 <= grp_vector_matrix_mul_fu_1018_seed_A_separated_ce0;
        else 
            seed_A_separated_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_separated_ce1_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_seed_A_separated_ce1, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            seed_A_separated_ce1 <= grp_vector_matrix_mul_fu_1018_seed_A_separated_ce1;
        else 
            seed_A_separated_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_separated_d0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_seed_A_separated_d0, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state12, tmp_4_fu_1513_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            seed_A_separated_d0 <= tmp_4_fu_1513_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            seed_A_separated_d0 <= ap_const_lv16_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            seed_A_separated_d0 <= grp_vector_matrix_mul_fu_1018_seed_A_separated_d0;
        else 
            seed_A_separated_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_separated_we0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_state28, grp_vector_matrix_mul_fu_1018_seed_A_separated_we0, ap_CS_fsm_state17, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, ap_CS_fsm_state12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            seed_A_separated_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            seed_A_separated_we0 <= grp_vector_matrix_mul_fu_1018_seed_A_separated_we0;
        else 
            seed_A_separated_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_prime_address0_assign_proc : process(ap_CS_fsm_state26, zext_ln152_1_reg_2174, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_input_r_address0, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state21)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            seed_SE_prime_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seed_SE_prime_address0 <= zext_ln152_1_reg_2174(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seed_SE_prime_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            seed_SE_prime_address0 <= grp_shake_gen_S_E_fu_1092_input_r_address0;
        else 
            seed_SE_prime_address0 <= "XXXX";
        end if; 
    end process;


    seed_SE_prime_ce0_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_input_r_ce0, ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            seed_SE_prime_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            seed_SE_prime_ce0 <= grp_shake_gen_S_E_fu_1092_input_r_ce0;
        else 
            seed_SE_prime_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_prime_ce1_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state28, grp_shake_gen_S_E_fu_1092_input_r_ce1, ap_CS_fsm_state23, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
            seed_SE_prime_ce1 <= grp_shake_gen_S_E_fu_1092_input_r_ce1;
        else 
            seed_SE_prime_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_prime_d0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21, or_ln1_fu_1536_p3, or_ln2_fu_1581_p3, or_ln154_fu_1596_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            seed_SE_prime_d0 <= or_ln154_fu_1596_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            seed_SE_prime_d0 <= or_ln2_fu_1581_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            seed_SE_prime_d0 <= or_ln1_fu_1536_p3;
        else 
            seed_SE_prime_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_SE_prime_we0_assign_proc : process(ap_CS_fsm_state18, ap_CS_fsm_state20, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state21))) then 
            seed_SE_prime_we0 <= ap_const_logic_1;
        else 
            seed_SE_prime_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln113_fu_1384_p3 <= 
        add_ln113_fu_1379_p2 when (tmp_1_reg_2107(0) = '1') else 
        trunc_ln7_reg_2112;
    select_ln175_1_fu_1705_p3 <= 
        ap_const_lv11_A0 when (icmp_ln175_fu_1629_p2(0) = '1') else 
        end1_fu_1679_p2;
    select_ln175_2_fu_1713_p3 <= 
        ap_const_lv12_A00 when (icmp_ln175_fu_1629_p2(0) = '1') else 
        start2_fu_1685_p2;
    select_ln175_3_fu_1721_p3 <= 
        ap_const_lv12_A10 when (icmp_ln175_fu_1629_p2(0) = '1') else 
        end2_fu_1691_p2;
    select_ln175_4_fu_1729_p3 <= 
        ap_const_lv13_580 when (icmp_ln175_fu_1629_p2(0) = '1') else 
        ap_const_lv13_A00;
    select_ln175_fu_1697_p3 <= 
        ap_const_lv11_0 when (icmp_ln175_fu_1629_p2(0) = '1') else 
        start1_fu_1673_p2;
    select_ln192_fu_1743_p3 <= 
        ap_const_lv8_0 when (icmp_ln192_fu_1737_p2(0) = '1') else 
        check1_0_reg_859;
    select_ln247_fu_1819_p3 <= 
        ap_const_lv10_17C when (icmp_ln247_fu_1813_p2(0) = '1') else 
        ap_const_lv10_280;
    select_ln85_fu_1278_p3 <= 
        ap_const_lv13_0 when (icmp_ln85_fu_1272_p2(0) = '1') else 
        phi_mul_reg_804;
        sext_ln111_fu_1317_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(xor_ln111_fu_1311_p2),7));


    shake_input_1_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, zext_ln128_reg_2127, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, grp_absorb_block_fu_947_input_r_address0, grp_read_input_fu_1189_out_r_address0, ap_CS_fsm_state15, ap_CS_fsm_state44, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_block_pp0_stage0, ap_CS_fsm_state12, ap_CS_fsm_state13, zext_ln291_1_fu_2001_p1, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            shake_input_1_address0 <= ap_const_lv64_187(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            shake_input_1_address0 <= zext_ln291_1_fu_2001_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            shake_input_1_address0 <= ap_const_lv64_184(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            shake_input_1_address0 <= ap_const_lv64_12(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            shake_input_1_address0 <= ap_const_lv64_10(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_address0 <= zext_ln128_reg_2127(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_1_address0 <= grp_read_input_fu_1189_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            shake_input_1_address0 <= grp_absorb_block_fu_947_input_r_address0;
        else 
            shake_input_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_address1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, grp_absorb_block_fu_947_input_r_address1, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_block_pp0_stage0, zext_ln129_fu_1472_p1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            shake_input_1_address1 <= ap_const_lv64_186(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            shake_input_1_address1 <= ap_const_lv64_185(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            shake_input_1_address1 <= ap_const_lv64_13(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            shake_input_1_address1 <= ap_const_lv64_11(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_address1 <= zext_ln129_fu_1472_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            shake_input_1_address1 <= grp_absorb_block_fu_947_input_r_address1;
        else 
            shake_input_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, grp_absorb_block_fu_947_input_r_ce0, grp_read_input_fu_1189_out_r_ce0, ap_CS_fsm_state15, ap_CS_fsm_state44, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shake_input_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_1_ce0 <= grp_read_input_fu_1189_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            shake_input_1_ce0 <= grp_absorb_block_fu_947_input_r_ce0;
        else 
            shake_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, ap_CS_fsm_state47, grp_absorb_block_fu_947_input_r_ce1, ap_CS_fsm_state15, ap_CS_fsm_state34, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shake_input_1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state47))) then 
            shake_input_1_ce1 <= grp_absorb_block_fu_947_input_r_ce1;
        else 
            shake_input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_d0_assign_proc : process(sk_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, grp_read_input_fu_1189_out_r_d0, ap_CS_fsm_state44, temp_1_reg_926, ap_CS_fsm_state38, ap_block_pp0_stage0, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            shake_input_1_d0 <= temp_1_reg_926;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            shake_input_1_d0 <= ap_const_lv16_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            shake_input_1_d0 <= ap_const_lv16_1F00;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_d0 <= sk_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_1_d0 <= grp_read_input_fu_1189_out_r_d0;
        else 
            shake_input_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_d1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_state41, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45, tmp_2_fu_1463_p3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            shake_input_1_d1 <= ap_const_lv16_0;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_d1 <= tmp_2_fu_1463_p3;
        else 
            shake_input_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_we0_assign_proc : process(icmp_ln125_reg_2118, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state41, icmp_ln284_fu_1963_p2, ap_enable_reg_pp0_iter1, grp_read_input_fu_1189_out_r_we0, ap_CS_fsm_state44, ap_CS_fsm_state38, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln284_fu_1963_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln125_reg_2118 = ap_const_lv1_0)))) then 
            shake_input_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_1_we0 <= grp_read_input_fu_1189_out_r_we0;
        else 
            shake_input_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_we1_assign_proc : process(icmp_ln125_reg_2118, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_state41, icmp_ln284_fu_1963_p2, ap_enable_reg_pp0_iter1, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state45)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state41) and (icmp_ln284_fu_1963_p2 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln125_reg_2118 = ap_const_lv1_0)))) then 
            shake_input_1_we1 <= ap_const_logic_1;
        else 
            shake_input_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_address0_assign_proc : process(grp_absorb_block_fu_947_input_r_address0, grp_read_input_fu_1189_out_r_address0, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            shake_input_2_address0 <= grp_read_input_fu_1189_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_2_address0 <= grp_absorb_block_fu_947_input_r_address0;
        else 
            shake_input_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_2_ce0_assign_proc : process(grp_absorb_block_fu_947_input_r_ce0, grp_read_input_fu_1189_out_r_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            shake_input_2_ce0 <= grp_read_input_fu_1189_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_2_ce0 <= grp_absorb_block_fu_947_input_r_ce0;
        else 
            shake_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_ce1_assign_proc : process(grp_absorb_block_fu_947_input_r_ce1, ap_CS_fsm_state38)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            shake_input_2_ce1 <= grp_absorb_block_fu_947_input_r_ce1;
        else 
            shake_input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_we0_assign_proc : process(grp_read_input_fu_1189_out_r_we0, ap_CS_fsm_state34)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            shake_input_2_we0 <= grp_read_input_fu_1189_out_r_we0;
        else 
            shake_input_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln154_fu_1590_p2 <= std_logic_vector(shift_left(unsigned(G2out_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    shl_ln185_1_fu_1651_p3 <= (trunc_ln185_fu_1635_p1 & ap_const_lv5_0);
    shl_ln253_1_fu_1847_p3 <= (trunc_ln253_fu_1827_p1 & ap_const_lv5_0);
    shl_ln255_fu_1877_p2 <= std_logic_vector(shift_left(unsigned(i_6_reg_902),to_integer(unsigned('0' & ap_const_lv4_1(4-1 downto 0)))));
    shl_ln2_fu_1639_p3 <= (trunc_ln185_fu_1635_p1 & ap_const_lv7_0);
    shl_ln3_fu_1831_p3 <= (trunc_ln253_fu_1827_p1 & ap_const_lv7_0);
    shl_ln5_fu_1899_p3 <= (trunc_ln253_fu_1827_p1 & ap_const_lv9_0);
    shl_ln6_fu_1937_p3 <= (trunc_ln253_reg_2292 & ap_const_lv3_0);
    shl_ln7_fu_1929_p3 <= (trunc_ln253_reg_2292 & ap_const_lv3_0);
    shl_ln_fu_1291_p3 <= (i_1_reg_792 & ap_const_lv3_0);

    sk_address0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state41, grp_vector_matrix_mul_fu_1018_sk_address0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4, zext_ln128_1_fu_1438_p1, ap_block_pp0_stage0, zext_ln146_fu_1494_p1, zext_ln287_fu_1975_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            sk_address0 <= zext_ln287_fu_1975_p1(14 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            sk_address0 <= zext_ln146_fu_1494_p1(14 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            sk_address0 <= zext_ln128_1_fu_1438_p1(14 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            sk_address0 <= grp_vector_matrix_mul_fu_1018_sk_address0;
        else 
            sk_address0 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    sk_ce0_assign_proc : process(ap_CS_fsm_state26, trunc_ln73_reg_2052, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state16, ap_CS_fsm_state28, ap_CS_fsm_state41, grp_vector_matrix_mul_fu_1018_sk_ce0, ap_CS_fsm_state34, ap_CS_fsm_state38, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state16) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            sk_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln73_reg_2052 = ap_const_lv1_0)))) then 
            sk_ce0 <= grp_vector_matrix_mul_fu_1018_sk_ce0;
        else 
            sk_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ss_address0 <= zext_ln305_reg_2379(3 - 1 downto 0);

    ss_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            ss_ce0 <= ap_const_logic_1;
        else 
            ss_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    ss_d0 <= mu_prime_q0;

    ss_we0_assign_proc : process(icmp_ln302_reg_2370, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln302_reg_2370 = ap_const_lv1_0))) then 
            ss_we0 <= ap_const_logic_1;
        else 
            ss_we0 <= ap_const_logic_0;
        end if; 
    end process;

    start1_1_fu_1865_p2 <= std_logic_vector(unsigned(ap_const_lv11_A0) + unsigned(add_ln253_fu_1859_p2));
    start1_fu_1673_p2 <= std_logic_vector(unsigned(ap_const_lv11_A0) + unsigned(add_ln185_fu_1663_p2));
    start2_1_fu_1887_p2 <= std_logic_vector(signed(ap_const_lv12_A02) + signed(zext_ln255_fu_1883_p1));
    start2_fu_1685_p2 <= std_logic_vector(unsigned(ap_const_lv12_5A0) + unsigned(zext_ln185_2_fu_1669_p1));
    templong_fu_1400_p3 <= (select_ln113_fu_1384_p3 & lshr_ln1_fu_1390_p4);
    tmp_2_fu_1463_p3 <= (empty_27_fu_1449_p1 & p_1_fu_1453_p4);
    tmp_4_fu_1513_p3 <= (empty_29_fu_1499_p1 & p_2_fu_1503_p4);
    trunc_ln111_fu_1347_p1 <= W_2_q0(15 - 1 downto 0);
    trunc_ln152_fu_1567_p1 <= G2out_q0(8 - 1 downto 0);
    trunc_ln168_fu_1607_p1 <= i_5_reg_871(1 - 1 downto 0);
    trunc_ln185_fu_1635_p1 <= i_5_reg_871(3 - 1 downto 0);
    trunc_ln229_fu_1774_p1 <= i_6_reg_902(1 - 1 downto 0);
    trunc_ln253_fu_1827_p1 <= i_6_reg_902(3 - 1 downto 0);
    trunc_ln73_fu_1236_p1 <= i_1_reg_792(1 - 1 downto 0);
    xor_ln111_fu_1311_p2 <= (j_0_reg_815 xor ap_const_lv4_8);
    xor_ln129_fu_1443_p2 <= (i_2_reg_826 xor ap_const_lv4_8);
    xor_ln146_fu_1488_p2 <= (i_3_reg_837 xor ap_const_lv4_8);
    xor_ln231_fu_1801_p2 <= (icmp_ln231_fu_1795_p2 xor ap_const_lv1_1);
    xor_ln287_fu_1980_p2 <= (i_7_reg_914 xor ap_const_lv4_8);
    xor_ln75_fu_1258_p2 <= (icmp_ln75_fu_1252_p2 xor ap_const_lv1_1);
    zext_ln111_1_fu_1331_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_815),64));
    zext_ln111_2_fu_1351_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln111_fu_1347_p1),16));
    zext_ln111_fu_1326_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln111_fu_1321_p2),64));
    zext_ln120_fu_1342_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln120_fu_1336_p2),64));
    zext_ln128_1_fu_1438_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln_fu_1430_p3),64));
    zext_ln128_fu_1425_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_826),64));
    zext_ln129_fu_1472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln129_reg_2142),64));
    zext_ln146_1_fu_1522_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_reg_2150),64));
    zext_ln146_fu_1494_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln146_fu_1488_p2),64));
    zext_ln152_1_fu_1562_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_fu_1551_p2),64));
    zext_ln152_fu_1557_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_848),64));
    zext_ln168_fu_1603_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ct_offset_reg_882),15));
    zext_ln185_1_fu_1659_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln185_1_fu_1651_p3),11));
    zext_ln185_2_fu_1669_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln185_fu_1663_p2),12));
    zext_ln185_fu_1647_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_1639_p3),11));
    zext_ln209_1_fu_1761_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln175_2_fu_1713_p3),13));
    zext_ln209_2_fu_1765_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln175_3_fu_1721_p3),13));
    zext_ln209_fu_1757_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln175_1_fu_1705_p3),12));
    zext_ln253_1_fu_1843_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1831_p3),11));
    zext_ln253_2_fu_1855_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln253_1_fu_1847_p3),11));
    zext_ln253_fu_1839_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln3_fu_1831_p3),13));
    zext_ln255_fu_1883_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln255_fu_1877_p2),12));
    zext_ln257_fu_1907_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_1899_p3),13));
    zext_ln258_fu_1790_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_902),64));
    zext_ln271_1_fu_1921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start2_1_fu_1887_p2),13));
    zext_ln271_2_fu_1925_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end2_1_fu_1893_p2),13));
    zext_ln271_fu_1917_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end1_1_fu_1871_p2),12));
    zext_ln287_1_fu_1986_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln287_fu_1980_p2),64));
    zext_ln287_fu_1975_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_914),64));
    zext_ln291_1_fu_2001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln291_fu_1995_p2),64));
    zext_ln291_fu_1991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_914),9));
    zext_ln305_fu_2018_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_936),64));
    zext_ln64_fu_1224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_781),64));
    zext_ln98_fu_1286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln85_fu_1278_p3),15));
end behav;
