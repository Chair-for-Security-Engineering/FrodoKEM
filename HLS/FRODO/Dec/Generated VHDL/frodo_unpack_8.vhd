-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_unpack_8 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (13 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_offset : IN STD_LOGIC_VECTOR (17 downto 0);
    rest_len : IN STD_LOGIC_VECTOR (5 downto 0) );
end;


architecture behav of frodo_unpack_8 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal rest : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal j_0_reg_122 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_132 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_0_reg_132_pp0_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal temp_0_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_fu_158_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal temp_fu_168_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln71_fu_176_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_reg_325 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_1_fu_182_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln71_1_reg_330 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln72_fu_188_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln72_reg_335 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln65_fu_192_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_340 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln65_reg_340_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_198_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal k_reg_344 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal p_Result_s_reg_354 : STD_LOGIC_VECTOR (14 downto 0);
    signal temp_5_fu_278_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_5_reg_359 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal j_1_fu_300_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_1_reg_364 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_phi_mux_j_0_phi_fu_125_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_k_0_phi_fu_136_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_phi_mux_temp_0_phi_fu_147_p4 : STD_LOGIC_VECTOR (31 downto 0);
    signal sext_ln72_fu_213_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln72_fu_306_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln61_fu_154_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln72_2_fu_204_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln72_fu_208_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal icmp_ln71_2_fu_218_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln72_fu_233_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln72_1_fu_229_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln72_3_fu_239_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal and_ln71_fu_224_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln71_fu_249_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln72_fu_243_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln71_fu_254_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_4_fu_262_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    j_0_reg_122_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_340_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                j_0_reg_122 <= j_1_reg_364;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                j_0_reg_122 <= j_fu_158_p2;
            end if; 
        end if;
    end process;

    k_0_reg_132_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                k_0_reg_132 <= k_reg_344;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                k_0_reg_132 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    temp_0_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_340_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
                                temp_0_reg_144(31 downto 15) <= temp_5_reg_359(31 downto 15);
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                                temp_0_reg_144(31 downto 15) <= temp_fu_168_p3(31 downto 15);
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln65_reg_340 <= icmp_ln65_fu_192_p2;
                icmp_ln65_reg_340_pp0_iter1_reg <= icmp_ln65_reg_340;
                k_0_reg_132_pp0_iter1_reg <= k_0_reg_132;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                icmp_ln71_1_reg_330 <= icmp_ln71_1_fu_182_p2;
                icmp_ln71_reg_325 <= icmp_ln71_fu_176_p2;
                trunc_ln72_reg_335 <= trunc_ln72_fu_188_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                j_1_reg_364 <= j_1_fu_300_p2;
                rest <= temp_4_fu_262_p2(16 downto 1);
                    temp_5_reg_359(31 downto 15) <= temp_5_fu_278_p2(31 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                k_reg_344 <= k_fu_198_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_reg_340 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                p_Result_s_reg_354 <= temp_4_fu_262_p2(31 downto 17);
            end if;
        end if;
    end process;
    temp_0_reg_144(14 downto 0) <= "000000000000000";
    temp_5_reg_359(14 downto 0) <= "000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln65_fu_192_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln65_fu_192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (icmp_ln65_fu_192_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    add_ln72_fu_208_p2 <= std_logic_vector(unsigned(zext_ln72_2_fu_204_p1) + unsigned(trunc_ln72_reg_335));
    and_ln71_fu_224_p2 <= (icmp_ln71_2_fu_218_p2 and icmp_ln71_1_reg_330);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state5 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln65_fu_192_p2)
    begin
        if ((icmp_ln65_fu_192_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_j_0_phi_fu_125_p4_assign_proc : process(j_0_reg_122, icmp_ln65_reg_340_pp0_iter1_reg, j_1_reg_364, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln65_reg_340_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_j_0_phi_fu_125_p4 <= j_1_reg_364;
        else 
            ap_phi_mux_j_0_phi_fu_125_p4 <= j_0_reg_122;
        end if; 
    end process;


    ap_phi_mux_k_0_phi_fu_136_p4_assign_proc : process(k_0_reg_132, ap_CS_fsm_pp0_stage0, icmp_ln65_reg_340, k_reg_344, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((icmp_ln65_reg_340 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_k_0_phi_fu_136_p4 <= k_reg_344;
        else 
            ap_phi_mux_k_0_phi_fu_136_p4 <= k_0_reg_132;
        end if; 
    end process;


    ap_phi_mux_temp_0_phi_fu_147_p4_assign_proc : process(temp_0_reg_144, icmp_ln65_reg_340_pp0_iter1_reg, temp_5_reg_359, ap_enable_reg_pp0_iter2, ap_block_pp0_stage0)
    begin
        if (((icmp_ln65_reg_340_pp0_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_temp_0_phi_fu_147_p4 <= temp_5_reg_359;
        else 
            ap_phi_mux_temp_0_phi_fu_147_p4 <= temp_0_reg_144;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln65_fu_192_p2 <= "1" when (ap_phi_mux_k_0_phi_fu_136_p4 = ap_const_lv4_8) else "0";
    icmp_ln71_1_fu_182_p2 <= "1" when (trunc_ln61_fu_154_p1 = ap_const_lv5_8) else "0";
    icmp_ln71_2_fu_218_p2 <= "1" when (unsigned(k_0_reg_132) < unsigned(ap_const_lv4_7)) else "0";
    icmp_ln71_fu_176_p2 <= "1" when (trunc_ln61_fu_154_p1 = ap_const_lv5_10) else "0";
    in_r_address0 <= sext_ln72_fu_213_p1(14 - 1 downto 0);

    in_r_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            in_r_ce0 <= ap_const_logic_1;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_1_fu_300_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(ap_phi_mux_j_0_phi_fu_125_p4));
    j_fu_158_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(trunc_ln61_fu_154_p1));
    k_fu_198_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_0_phi_fu_136_p4) + unsigned(ap_const_lv4_1));
    or_ln71_fu_249_p2 <= (icmp_ln71_reg_325 or and_ln71_fu_224_p2);
    out_r_address0 <= zext_ln72_fu_306_p1(10 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Result_s_reg_354),16));

    out_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln65_reg_340_pp0_iter1_reg, ap_enable_reg_pp0_iter2)
    begin
        if (((icmp_ln65_reg_340_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln71_fu_254_p3 <= 
        shl_ln72_fu_243_p2 when (or_ln71_fu_249_p2(0) = '1') else 
        ap_const_lv32_0;
        sext_ln72_fu_213_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln72_fu_208_p2),64));

    shl_ln72_fu_243_p2 <= std_logic_vector(shift_left(unsigned(zext_ln72_1_fu_229_p1),to_integer(unsigned('0' & zext_ln72_3_fu_239_p1(31-1 downto 0)))));
    sub_ln72_fu_233_p2 <= std_logic_vector(signed(ap_const_lv5_10) - signed(ap_phi_mux_j_0_phi_fu_125_p4));
    temp_4_fu_262_p2 <= (select_ln71_fu_254_p3 or ap_phi_mux_temp_0_phi_fu_147_p4);
    temp_5_fu_278_p2 <= std_logic_vector(shift_left(unsigned(temp_4_fu_262_p2),to_integer(unsigned('0' & ap_const_lv32_F(31-1 downto 0)))));
    temp_fu_168_p3 <= (rest & ap_const_lv16_0);
    trunc_ln61_fu_154_p1 <= rest_len(5 - 1 downto 0);
    trunc_ln72_fu_188_p1 <= in_offset(15 - 1 downto 0);
    zext_ln72_1_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(in_r_q0),32));
    zext_ln72_2_fu_204_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_k_0_phi_fu_136_p4),15));
    zext_ln72_3_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sub_ln72_fu_233_p2),32));
    zext_ln72_fu_306_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_132_pp0_iter1_reg),64));
end behav;
