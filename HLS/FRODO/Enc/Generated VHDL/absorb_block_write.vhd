-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity absorb_block_write is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce1 : OUT STD_LOGIC;
    input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    outlen : IN STD_LOGIC_VECTOR (6 downto 0);
    inlen : IN STD_LOGIC_VECTOR (8 downto 0);
    reset : IN STD_LOGIC_VECTOR (0 downto 0);
    start_word : IN STD_LOGIC_VECTOR (7 downto 0);
    begin_absorb : IN STD_LOGIC_VECTOR (0 downto 0);
    ct_req_din : OUT STD_LOGIC;
    ct_req_full_n : IN STD_LOGIC;
    ct_req_write : OUT STD_LOGIC;
    ct_rsp_empty_n : IN STD_LOGIC;
    ct_rsp_read : OUT STD_LOGIC;
    ct_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    ct_datain : IN STD_LOGIC_VECTOR (15 downto 0);
    ct_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
    ct_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    ct_offset : IN STD_LOGIC_VECTOR (14 downto 0);
    write_len : IN STD_LOGIC_VECTOR (11 downto 0);
    begin_write : IN STD_LOGIC_VECTOR (0 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
end;


architecture behav of absorb_block_write is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln270_fu_227_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln270_reg_257 : STD_LOGIC_VECTOR (5 downto 0);
    signal trunc_ln270_1_fu_232_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln270_1_reg_262 : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_absorb_block_fu_148_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal start_reg_267 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_absorb_block_fu_148_ap_ready : STD_LOGIC;
    signal grp_absorb_block_fu_148_ap_done : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal empty_fu_237_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal empty_reg_281 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_absorb_block_fu_148_ap_start : STD_LOGIC;
    signal grp_absorb_block_fu_148_ap_idle : STD_LOGIC;
    signal grp_absorb_block_fu_148_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_absorb_block_fu_148_output_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_148_output_r_we0 : STD_LOGIC;
    signal grp_absorb_block_fu_148_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_fu_148_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_148_input_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_148_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_fu_148_input_r_ce1 : STD_LOGIC;
    signal grp_read_input_2_fu_214_ap_start : STD_LOGIC;
    signal grp_read_input_2_fu_214_ap_done : STD_LOGIC;
    signal grp_read_input_2_fu_214_ap_idle : STD_LOGIC;
    signal grp_read_input_2_fu_214_ap_ready : STD_LOGIC;
    signal grp_read_input_2_fu_214_out_r_req_din : STD_LOGIC;
    signal grp_read_input_2_fu_214_out_r_req_write : STD_LOGIC;
    signal grp_read_input_2_fu_214_out_r_rsp_read : STD_LOGIC;
    signal grp_read_input_2_fu_214_out_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_2_fu_214_out_r_dataout : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_2_fu_214_out_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_2_fu_214_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_input_2_fu_214_in_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_fu_148_ap_start_reg : STD_LOGIC := '0';
    signal grp_read_input_2_fu_214_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component absorb_block IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        outlen : IN STD_LOGIC_VECTOR (5 downto 0);
        inlen : IN STD_LOGIC_VECTOR (7 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        start_word : IN STD_LOGIC_VECTOR (7 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component read_input_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_req_din : OUT STD_LOGIC;
        out_r_req_full_n : IN STD_LOGIC;
        out_r_req_write : OUT STD_LOGIC;
        out_r_rsp_empty_n : IN STD_LOGIC;
        out_r_rsp_read : OUT STD_LOGIC;
        out_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_datain : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        len : IN STD_LOGIC_VECTOR (10 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_absorb_block_fu_148 : component absorb_block
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_absorb_block_fu_148_ap_start,
        ap_done => grp_absorb_block_fu_148_ap_done,
        ap_idle => grp_absorb_block_fu_148_ap_idle,
        ap_ready => grp_absorb_block_fu_148_ap_ready,
        output_r_address0 => grp_absorb_block_fu_148_output_r_address0,
        output_r_ce0 => grp_absorb_block_fu_148_output_r_ce0,
        output_r_we0 => grp_absorb_block_fu_148_output_r_we0,
        output_r_d0 => grp_absorb_block_fu_148_output_r_d0,
        input_r_address0 => grp_absorb_block_fu_148_input_r_address0,
        input_r_ce0 => grp_absorb_block_fu_148_input_r_ce0,
        input_r_q0 => input_r_q0,
        input_r_address1 => grp_absorb_block_fu_148_input_r_address1,
        input_r_ce1 => grp_absorb_block_fu_148_input_r_ce1,
        input_r_q1 => input_r_q1,
        outlen => trunc_ln270_reg_257,
        inlen => trunc_ln270_1_reg_262,
        reset => reset,
        start_word => start_word,
        begin_r => begin_absorb,
        ap_return => grp_absorb_block_fu_148_ap_return);

    grp_read_input_2_fu_214 : component read_input_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_input_2_fu_214_ap_start,
        ap_done => grp_read_input_2_fu_214_ap_done,
        ap_idle => grp_read_input_2_fu_214_ap_idle,
        ap_ready => grp_read_input_2_fu_214_ap_ready,
        out_r_req_din => grp_read_input_2_fu_214_out_r_req_din,
        out_r_req_full_n => ct_req_full_n,
        out_r_req_write => grp_read_input_2_fu_214_out_r_req_write,
        out_r_rsp_empty_n => ct_rsp_empty_n,
        out_r_rsp_read => grp_read_input_2_fu_214_out_r_rsp_read,
        out_r_address => grp_read_input_2_fu_214_out_r_address,
        out_r_datain => ct_datain,
        out_r_dataout => grp_read_input_2_fu_214_out_r_dataout,
        out_r_size => grp_read_input_2_fu_214_out_r_size,
        out_offset => ct_offset,
        in_r_address0 => grp_read_input_2_fu_214_in_r_address0,
        in_r_ce0 => grp_read_input_2_fu_214_in_r_ce0,
        in_r_q0 => input_r_q0,
        len => empty_reg_281,
        begin_r => begin_write);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_absorb_block_fu_148_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_absorb_block_fu_148_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_absorb_block_fu_148_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_absorb_block_fu_148_ap_ready = ap_const_logic_1)) then 
                    grp_absorb_block_fu_148_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_input_2_fu_214_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_input_2_fu_214_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_read_input_2_fu_214_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_input_2_fu_214_ap_ready = ap_const_logic_1)) then 
                    grp_read_input_2_fu_214_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                empty_reg_281 <= empty_fu_237_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_absorb_block_fu_148_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                start_reg_267 <= grp_absorb_block_fu_148_ap_return;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln270_1_reg_262 <= trunc_ln270_1_fu_232_p1;
                trunc_ln270_reg_257 <= trunc_ln270_fu_227_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_absorb_block_fu_148_ap_done, grp_read_input_2_fu_214_ap_done, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_absorb_block_fu_148_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_read_input_2_fu_214_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_read_input_2_fu_214_ap_done, ap_CS_fsm_state4)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_read_input_2_fu_214_ap_done = ap_const_logic_1)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_read_input_2_fu_214_ap_done, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (grp_read_input_2_fu_214_ap_done = ap_const_logic_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= start_reg_267;
    ct_address <= grp_read_input_2_fu_214_out_r_address;
    ct_dataout <= grp_read_input_2_fu_214_out_r_dataout;
    ct_req_din <= grp_read_input_2_fu_214_out_r_req_din;
    ct_req_write <= grp_read_input_2_fu_214_out_r_req_write;
    ct_rsp_read <= grp_read_input_2_fu_214_out_r_rsp_read;
    ct_size <= grp_read_input_2_fu_214_out_r_size;
    empty_fu_237_p1 <= write_len(11 - 1 downto 0);
    grp_absorb_block_fu_148_ap_start <= grp_absorb_block_fu_148_ap_start_reg;
    grp_read_input_2_fu_214_ap_start <= grp_read_input_2_fu_214_ap_start_reg;

    input_r_address0_assign_proc : process(ap_CS_fsm_state2, grp_absorb_block_fu_148_input_r_address0, grp_read_input_2_fu_214_in_r_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_address0 <= grp_read_input_2_fu_214_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_address0 <= grp_absorb_block_fu_148_input_r_address0;
        else 
            input_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    input_r_address1 <= grp_absorb_block_fu_148_input_r_address1;

    input_r_ce0_assign_proc : process(ap_CS_fsm_state2, grp_absorb_block_fu_148_input_r_ce0, grp_read_input_2_fu_214_in_r_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            input_r_ce0 <= grp_read_input_2_fu_214_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_ce0 <= grp_absorb_block_fu_148_input_r_ce0;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_r_ce1_assign_proc : process(ap_CS_fsm_state2, grp_absorb_block_fu_148_input_r_ce1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_r_ce1 <= grp_absorb_block_fu_148_input_r_ce1;
        else 
            input_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_address0 <= grp_absorb_block_fu_148_output_r_address0;
    output_r_ce0 <= grp_absorb_block_fu_148_output_r_ce0;
    output_r_d0 <= grp_absorb_block_fu_148_output_r_d0;
    output_r_we0 <= grp_absorb_block_fu_148_output_r_we0;
    trunc_ln270_1_fu_232_p1 <= inlen(8 - 1 downto 0);
    trunc_ln270_fu_227_p1 <= outlen(6 - 1 downto 0);
end behav;
