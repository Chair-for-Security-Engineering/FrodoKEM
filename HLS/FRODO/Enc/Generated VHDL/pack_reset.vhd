-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pack_reset is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce0 : OUT STD_LOGIC;
    in_r_we0 : OUT STD_LOGIC;
    in_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    in_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    in_r_ce1 : OUT STD_LOGIC;
    in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    inlen : IN STD_LOGIC_VECTOR (10 downto 0);
    begin_pack : IN STD_LOGIC_VECTOR (0 downto 0);
    n : IN STD_LOGIC_VECTOR (10 downto 0);
    begin_reset : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of pack_reset is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal trunc_ln278_fu_74_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln278_reg_89 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal trunc_ln279_fu_79_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln279_reg_99 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_54_ap_start : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_ap_done : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_ap_idle : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_ap_ready : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_54_out_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_out_r_we0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_54_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_54_in_r_ce0 : STD_LOGIC;
    signal grp_frodo_pack_16_fu_54_in_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_frodo_pack_16_fu_54_in_r_ce1 : STD_LOGIC;
    signal grp_reset_vector_fu_65_ap_start : STD_LOGIC;
    signal grp_reset_vector_fu_65_ap_done : STD_LOGIC;
    signal grp_reset_vector_fu_65_ap_idle : STD_LOGIC;
    signal grp_reset_vector_fu_65_ap_ready : STD_LOGIC;
    signal grp_reset_vector_fu_65_vec_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_reset_vector_fu_65_vec_ce0 : STD_LOGIC;
    signal grp_reset_vector_fu_65_vec_we0 : STD_LOGIC;
    signal grp_reset_vector_fu_65_vec_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_frodo_pack_16_fu_54_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_reset_vector_fu_65_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);

    component frodo_pack_16 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        inlen : IN STD_LOGIC_VECTOR (9 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component reset_vector IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        vec_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        vec_ce0 : OUT STD_LOGIC;
        vec_we0 : OUT STD_LOGIC;
        vec_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        n : IN STD_LOGIC_VECTOR (9 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    grp_frodo_pack_16_fu_54 : component frodo_pack_16
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_frodo_pack_16_fu_54_ap_start,
        ap_done => grp_frodo_pack_16_fu_54_ap_done,
        ap_idle => grp_frodo_pack_16_fu_54_ap_idle,
        ap_ready => grp_frodo_pack_16_fu_54_ap_ready,
        out_r_address0 => grp_frodo_pack_16_fu_54_out_r_address0,
        out_r_ce0 => grp_frodo_pack_16_fu_54_out_r_ce0,
        out_r_we0 => grp_frodo_pack_16_fu_54_out_r_we0,
        out_r_d0 => grp_frodo_pack_16_fu_54_out_r_d0,
        in_r_address0 => grp_frodo_pack_16_fu_54_in_r_address0,
        in_r_ce0 => grp_frodo_pack_16_fu_54_in_r_ce0,
        in_r_q0 => in_r_q0,
        in_r_address1 => grp_frodo_pack_16_fu_54_in_r_address1,
        in_r_ce1 => grp_frodo_pack_16_fu_54_in_r_ce1,
        in_r_q1 => in_r_q1,
        inlen => trunc_ln278_reg_89,
        begin_r => begin_pack);

    grp_reset_vector_fu_65 : component reset_vector
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_reset_vector_fu_65_ap_start,
        ap_done => grp_reset_vector_fu_65_ap_done,
        ap_idle => grp_reset_vector_fu_65_ap_idle,
        ap_ready => grp_reset_vector_fu_65_ap_ready,
        vec_address0 => grp_reset_vector_fu_65_vec_address0,
        vec_ce0 => grp_reset_vector_fu_65_vec_ce0,
        vec_we0 => grp_reset_vector_fu_65_vec_we0,
        vec_d0 => grp_reset_vector_fu_65_vec_d0,
        n => trunc_ln279_reg_99,
        begin_r => begin_reset);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_frodo_pack_16_fu_54_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_frodo_pack_16_fu_54_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_frodo_pack_16_fu_54_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_frodo_pack_16_fu_54_ap_ready = ap_const_logic_1)) then 
                    grp_frodo_pack_16_fu_54_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_reset_vector_fu_65_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_reset_vector_fu_65_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_reset_vector_fu_65_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_reset_vector_fu_65_ap_ready = ap_const_logic_1)) then 
                    grp_reset_vector_fu_65_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                trunc_ln278_reg_89 <= trunc_ln278_fu_74_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                trunc_ln279_reg_99 <= trunc_ln279_fu_79_p1;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_frodo_pack_16_fu_54_ap_done, grp_reset_vector_fu_65_ap_done, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_frodo_pack_16_fu_54_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_reset_vector_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, grp_reset_vector_fu_65_ap_done, ap_CS_fsm_state4)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((grp_reset_vector_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(grp_reset_vector_fu_65_ap_done, ap_CS_fsm_state4)
    begin
        if (((grp_reset_vector_fu_65_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    grp_frodo_pack_16_fu_54_ap_start <= grp_frodo_pack_16_fu_54_ap_start_reg;
    grp_reset_vector_fu_65_ap_start <= grp_reset_vector_fu_65_ap_start_reg;

    in_r_address0_assign_proc : process(grp_frodo_pack_16_fu_54_in_r_address0, grp_reset_vector_fu_65_vec_address0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_address0 <= grp_reset_vector_fu_65_vec_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_address0 <= grp_frodo_pack_16_fu_54_in_r_address0;
        else 
            in_r_address0 <= "XXXXXXXXXX";
        end if; 
    end process;

    in_r_address1 <= grp_frodo_pack_16_fu_54_in_r_address1;

    in_r_ce0_assign_proc : process(grp_frodo_pack_16_fu_54_in_r_ce0, grp_reset_vector_fu_65_vec_ce0, ap_CS_fsm_state2, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_ce0 <= grp_reset_vector_fu_65_vec_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_ce0 <= grp_frodo_pack_16_fu_54_in_r_ce0;
        else 
            in_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    in_r_ce1_assign_proc : process(grp_frodo_pack_16_fu_54_in_r_ce1, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            in_r_ce1 <= grp_frodo_pack_16_fu_54_in_r_ce1;
        else 
            in_r_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    in_r_d0 <= grp_reset_vector_fu_65_vec_d0;

    in_r_we0_assign_proc : process(grp_reset_vector_fu_65_vec_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            in_r_we0 <= grp_reset_vector_fu_65_vec_we0;
        else 
            in_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    out_r_address0 <= grp_frodo_pack_16_fu_54_out_r_address0;
    out_r_ce0 <= grp_frodo_pack_16_fu_54_out_r_ce0;
    out_r_d0 <= grp_frodo_pack_16_fu_54_out_r_d0;
    out_r_we0 <= grp_frodo_pack_16_fu_54_out_r_we0;
    trunc_ln278_fu_74_p1 <= inlen(10 - 1 downto 0);
    trunc_ln279_fu_79_p1 <= n(10 - 1 downto 0);
end behav;
