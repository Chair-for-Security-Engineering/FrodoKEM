-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_enc is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ct_req_din : OUT STD_LOGIC;
    ct_req_full_n : IN STD_LOGIC;
    ct_req_write : OUT STD_LOGIC;
    ct_rsp_empty_n : IN STD_LOGIC;
    ct_rsp_read : OUT STD_LOGIC;
    ct_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    ct_datain : IN STD_LOGIC_VECTOR (15 downto 0);
    ct_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
    ct_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    ss_req_din : OUT STD_LOGIC;
    ss_req_full_n : IN STD_LOGIC;
    ss_req_write : OUT STD_LOGIC;
    ss_rsp_empty_n : IN STD_LOGIC;
    ss_rsp_read : OUT STD_LOGIC;
    ss_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    ss_datain : IN STD_LOGIC_VECTOR (15 downto 0);
    ss_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
    ss_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    mu_in_req_din : OUT STD_LOGIC;
    mu_in_req_full_n : IN STD_LOGIC;
    mu_in_req_write : OUT STD_LOGIC;
    mu_in_rsp_empty_n : IN STD_LOGIC;
    mu_in_rsp_read : OUT STD_LOGIC;
    mu_in_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    mu_in_datain : IN STD_LOGIC_VECTOR (15 downto 0);
    mu_in_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
    mu_in_size : OUT STD_LOGIC_VECTOR (31 downto 0);
    pk_req_din : OUT STD_LOGIC;
    pk_req_full_n : IN STD_LOGIC;
    pk_req_write : OUT STD_LOGIC;
    pk_rsp_empty_n : IN STD_LOGIC;
    pk_rsp_read : OUT STD_LOGIC;
    pk_address : OUT STD_LOGIC_VECTOR (31 downto 0);
    pk_datain : IN STD_LOGIC_VECTOR (15 downto 0);
    pk_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
    pk_size : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of frodo_enc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_enc,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=7.300000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.388000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=10,HLS_SYN_DSP=1,HLS_SYN_FF=7694,HLS_SYN_LUT=33926,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (44 downto 0) := "000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (44 downto 0) := "000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (44 downto 0) := "000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (44 downto 0) := "000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (44 downto 0) := "000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (44 downto 0) := "000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (44 downto 0) := "000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (44 downto 0) := "000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (44 downto 0) := "001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (44 downto 0) := "010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (44 downto 0) := "100000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv7_10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_const_lv7_20 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_const_lv9_A0 : STD_LOGIC_VECTOR (8 downto 0) := "010100000";
    constant ap_const_lv9_53 : STD_LOGIC_VECTOR (8 downto 0) := "001010011";
    constant ap_const_lv9_5 : STD_LOGIC_VECTOR (8 downto 0) := "000000101";
    constant ap_const_lv9_96 : STD_LOGIC_VECTOR (8 downto 0) := "010010110";
    constant ap_const_lv9_12 : STD_LOGIC_VECTOR (8 downto 0) := "000010010";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv15_258 : STD_LOGIC_VECTOR (14 downto 0) := "000001001011000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv12_258 : STD_LOGIC_VECTOR (11 downto 0) := "001001011000";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv13_A00 : STD_LOGIC_VECTOR (12 downto 0) := "0101000000000";
    constant ap_const_lv13_A0 : STD_LOGIC_VECTOR (12 downto 0) := "0000010100000";
    constant ap_const_lv13_500 : STD_LOGIC_VECTOR (12 downto 0) := "0010100000000";
    constant ap_const_lv13_5A0 : STD_LOGIC_VECTOR (12 downto 0) := "0010110100000";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv11_280 : STD_LOGIC_VECTOR (10 downto 0) := "01010000000";
    constant ap_const_lv11_40 : STD_LOGIC_VECTOR (10 downto 0) := "00001000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv15_12C0 : STD_LOGIC_VECTOR (14 downto 0) := "001001011000000";
    constant ap_const_lv11_3C : STD_LOGIC_VECTOR (10 downto 0) := "00000111100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_148 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000101001000";
    constant ap_const_lv64_149 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000101001001";
    constant ap_const_lv64_14A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000101001010";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv64_14B : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000101001011";
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv64_11 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010001";
    constant ap_const_lv64_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv64_13 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010011";
    constant ap_const_lv64_7 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000111";
    constant ap_const_lv64_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv64_44 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000100";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv64_45 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000101";
    constant ap_const_lv64_46 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv64_47 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001000111";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv16_1F00 : STD_LOGIC_VECTOR (15 downto 0) := "0001111100000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv10_148 : STD_LOGIC_VECTOR (9 downto 0) := "0101001000";
    constant ap_const_lv10_280 : STD_LOGIC_VECTOR (9 downto 0) := "1010000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv16_8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_const_lv16_1F : STD_LOGIC_VECTOR (15 downto 0) := "0000000000011111";
    constant ap_const_lv5_11 : STD_LOGIC_VECTOR (4 downto 0) := "10001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv5_9 : STD_LOGIC_VECTOR (4 downto 0) := "01001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv10_8 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_const_lv5_F : STD_LOGIC_VECTOR (4 downto 0) := "01111";
    constant ap_const_lv5_8 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_const_lv5_A : STD_LOGIC_VECTOR (4 downto 0) := "01010";
    constant ap_const_lv5_6 : STD_LOGIC_VECTOR (4 downto 0) := "00110";
    constant ap_const_lv12_9F2 : STD_LOGIC_VECTOR (11 downto 0) := "100111110010";
    constant ap_const_lv12_A02 : STD_LOGIC_VECTOR (11 downto 0) := "101000000010";
    constant ap_const_lv12_5A0 : STD_LOGIC_VECTOR (11 downto 0) := "010110100000";
    constant ap_const_lv12_640 : STD_LOGIC_VECTOR (11 downto 0) := "011001000000";
    constant ap_const_lv13_1BA0 : STD_LOGIC_VECTOR (12 downto 0) := "1101110100000";
    constant ap_const_lv13_1C40 : STD_LOGIC_VECTOR (12 downto 0) := "1110001000000";
    constant ap_const_lv13_140 : STD_LOGIC_VECTOR (12 downto 0) := "0000101000000";
    constant ap_const_lv13_580 : STD_LOGIC_VECTOR (12 downto 0) := "0010110000000";
    constant ap_const_lv14_258 : STD_LOGIC_VECTOR (13 downto 0) := "00001001011000";
    constant ap_const_lv15_7B50 : STD_LOGIC_VECTOR (14 downto 0) := "111101101010000";
    constant ap_const_lv8_B8 : STD_LOGIC_VECTOR (7 downto 0) := "10111000";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv7_3C : STD_LOGIC_VECTOR (6 downto 0) := "0111100";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (44 downto 0) := "000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_1_reg_829 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_2_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_0_reg_907 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_0_reg_918 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_6_reg_927 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_7_reg_938 : STD_LOGIC_VECTOR (3 downto 0);
    signal reg_1240 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln52_fu_1265_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal reg_1245 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal icmp_ln121_fu_1545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal G2in_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal reg_1250 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_block_state49_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state50_pp4_stage0_iter1 : BOOLEAN;
    signal icmp_ln245_reg_2413 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln245_reg_2413_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state51_pp4_stage0_iter2 : BOOLEAN;
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal trunc_ln52_fu_1261_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln52_reg_2045 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_fu_1271_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_8_reg_2052 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln54_fu_1277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln54_reg_2057 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln59_fu_1289_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln59_reg_2062 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln70_fu_1325_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln70_reg_2067 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_fu_1359_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln76_reg_2072 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln87_fu_1365_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln87_reg_2077 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state9_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_fu_1371_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln90_fu_1377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln90_reg_2086 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln93_fu_1382_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln93_reg_2096 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state13_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state14_pp1_stage0_iter1 : BOOLEAN;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_block_state15_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal icmp_ln93_reg_2096_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_9_fu_1388_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_9_reg_2100 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_9_reg_2100_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln96_fu_1394_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln96_reg_2106 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln96_reg_2106_pp1_iter1_reg : STD_LOGIC_VECTOR (3 downto 0);
    signal mu_in_read_reg_2111 : STD_LOGIC_VECTOR (15 downto 0);
    signal empty_31_fu_1400_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_31_reg_2116 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_1_reg_2121 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_fu_1414_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal empty_32_reg_2126 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_2_reg_2131 : STD_LOGIC_VECTOR (7 downto 0);
    signal i_10_fu_1476_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_10_reg_2139 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal icmp_ln110_fu_1470_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln112_1_fu_1487_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln112_1_reg_2149 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln121_fu_1533_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln121_reg_2171 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln121_1_fu_1537_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln121_1_reg_2176 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln121_fu_1541_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln121_reg_2181 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_11_fu_1551_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_11_reg_2188 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln123_fu_1557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln123_reg_2193 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln123_fu_1563_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln123_reg_2198 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_fu_1579_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln134_reg_2203 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln134_fu_1585_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln134_reg_2208 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_12_reg_2213 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_fu_1601_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln150_reg_2218 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln155_fu_1619_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln155_reg_2223 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln160_fu_1631_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln160_reg_2228 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_fu_1637_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln165_reg_2233 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_fu_1665_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln170_reg_2238 : STD_LOGIC_VECTOR (0 downto 0);
    signal start1_fu_1751_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal start1_reg_2244 : STD_LOGIC_VECTOR (12 downto 0);
    signal end1_fu_1765_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal end1_reg_2250 : STD_LOGIC_VECTOR (12 downto 0);
    signal start2_2_fu_1771_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal start2_2_reg_2255 : STD_LOGIC_VECTOR (11 downto 0);
    signal end2_1_fu_1779_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal end2_1_reg_2261 : STD_LOGIC_VECTOR (11 downto 0);
    signal select_ln181_4_fu_1787_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln181_4_reg_2267 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln198_fu_1795_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln198_reg_2272 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln198_1_fu_1801_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal add_ln198_1_reg_2277 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln201_fu_1807_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln201_reg_2282 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal zext_ln201_fu_1811_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln201_reg_2287 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln201_1_fu_1815_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln201_1_reg_2292 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln202_reg_2297 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln203_fu_1819_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln203_reg_2302 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln205_fu_1833_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln205_reg_2307 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal sext_ln210_fu_1840_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln210_reg_2312 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal zext_ln210_fu_1844_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln210_reg_2317 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln210_1_fu_1848_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln210_1_reg_2322 : STD_LOGIC_VECTOR (12 downto 0);
    signal xor_ln211_reg_2327 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln212_fu_1852_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln212_reg_2332 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln214_fu_1866_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln214_reg_2337 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal i_13_fu_1879_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_13_reg_2345 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal icmp_ln218_fu_1873_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln224_fu_1896_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal trunc_ln224_reg_2355 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln8_fu_1900_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln8_reg_2360 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln221_fu_1907_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln221_reg_2365 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state37_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state38_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal j_fu_1913_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal zext_ln224_1_fu_1928_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln224_1_reg_2374 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln224_1_fu_1933_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal trunc_ln224_1_reg_2384 : STD_LOGIC_VECTOR (1 downto 0);
    signal temp_6_fu_1947_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln232_fu_1973_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln232_reg_2394 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state43_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state44_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_12_fu_1979_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal add_ln235_fu_2000_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal add_ln235_reg_2408 : STD_LOGIC_VECTOR (6 downto 0);
    signal icmp_ln245_fu_2010_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_14_fu_2016_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal icmp_ln248_fu_2027_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_reg_2427 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln248_reg_2427_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal grp_absorb_block_write_fu_949_ap_ready : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_ap_done : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state9 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state13 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state37 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal grp_read_input_2_fu_1186_ap_ready : STD_LOGIC;
    signal grp_read_input_2_fu_1186_ap_done : STD_LOGIC;
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state43 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state49 : STD_LOGIC;
    signal B_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_1_ce0 : STD_LOGIC;
    signal B_1_we0 : STD_LOGIC;
    signal B_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_1_ce1 : STD_LOGIC;
    signal B_1_we1 : STD_LOGIC;
    signal B_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_2_ce0 : STD_LOGIC;
    signal B_2_we0 : STD_LOGIC;
    signal B_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal B_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal B_2_ce1 : STD_LOGIC;
    signal B_2_we1 : STD_LOGIC;
    signal B_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2in_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2in_ce0 : STD_LOGIC;
    signal G2in_we0 : STD_LOGIC;
    signal G2in_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce0 : STD_LOGIC;
    signal G2out_we0 : STD_LOGIC;
    signal G2out_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal G2out_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal G2out_ce1 : STD_LOGIC;
    signal G2out_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_SE_ce0 : STD_LOGIC;
    signal seed_SE_we0 : STD_LOGIC;
    signal seed_SE_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_SE_ce1 : STD_LOGIC;
    signal seed_SE_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal V_ce0 : STD_LOGIC;
    signal V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal V_ce1 : STD_LOGIC;
    signal V_we1 : STD_LOGIC;
    signal seed_A_separated_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal seed_A_separated_ce0 : STD_LOGIC;
    signal seed_A_separated_we0 : STD_LOGIC;
    signal seed_A_separated_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_separated_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal seed_A_separated_ce1 : STD_LOGIC;
    signal seed_A_separated_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal S_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_1_ce0 : STD_LOGIC;
    signal S_1_we0 : STD_LOGIC;
    signal S_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal S_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal S_2_ce0 : STD_LOGIC;
    signal S_2_we0 : STD_LOGIC;
    signal S_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal E_1_ce0 : STD_LOGIC;
    signal E_1_we0 : STD_LOGIC;
    signal E_1_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal E_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal E_2_ce0 : STD_LOGIC;
    signal E_2_we0 : STD_LOGIC;
    signal E_2_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_1_ce0 : STD_LOGIC;
    signal A_1_we0 : STD_LOGIC;
    signal A_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_1_ce1 : STD_LOGIC;
    signal A_1_we1 : STD_LOGIC;
    signal A_2_ce0 : STD_LOGIC;
    signal A_2_we0 : STD_LOGIC;
    signal A_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal A_2_ce1 : STD_LOGIC;
    signal A_2_we1 : STD_LOGIC;
    signal shake_input_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_1_ce0 : STD_LOGIC;
    signal shake_input_1_we0 : STD_LOGIC;
    signal shake_input_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_1_ce1 : STD_LOGIC;
    signal shake_input_1_we1 : STD_LOGIC;
    signal shake_input_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_1_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal shake_input_2_ce0 : STD_LOGIC;
    signal shake_input_2_we0 : STD_LOGIC;
    signal shake_input_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_2_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal shake_input_2_ce1 : STD_LOGIC;
    signal shake_input_2_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_write_fu_949_ap_start : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_ap_idle : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_output_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_absorb_block_write_fu_949_output_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_output_r_we0 : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_output_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_write_fu_949_input_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_write_fu_949_input_r_ce0 : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_input_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_write_fu_949_input_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_absorb_block_write_fu_949_input_r_ce1 : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_input_r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_write_fu_949_outlen : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_absorb_block_write_fu_949_inlen : STD_LOGIC_VECTOR (8 downto 0);
    signal grp_absorb_block_write_fu_949_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_write_fu_949_start_word : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_absorb_block_write_fu_949_begin_absorb : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_write_fu_949_ct_req_din : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_ct_req_write : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_ct_rsp_read : STD_LOGIC;
    signal grp_absorb_block_write_fu_949_ct_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_absorb_block_write_fu_949_ct_dataout : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_absorb_block_write_fu_949_ct_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_absorb_block_write_fu_949_ct_offset : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_absorb_block_write_fu_949_write_len : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_absorb_block_write_fu_949_begin_write : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_absorb_block_write_fu_949_ap_return : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_vector_matrix_mul_fu_1031_ap_start : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_ap_done : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_ap_idle : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_ap_ready : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_output_vec_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_output_vec_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_output_vec_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_output_vec_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_output_vec_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_output_vec_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_output_vec_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_S_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_S_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_1_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_1_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_1_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_1_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_1_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_1_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_1_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_1_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_2_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_2_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_2_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_2_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_2_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_A_2_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_2_we1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_A_2_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_E_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_vector_matrix_mul_fu_1031_E_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_E_q0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_ce0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_we0 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_vector_matrix_mul_fu_1031_seed_A_separated_ce1 : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_pk_req_din : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_pk_req_write : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_pk_rsp_read : STD_LOGIC;
    signal grp_vector_matrix_mul_fu_1031_pk_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vector_matrix_mul_fu_1031_pk_dataout : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_vector_matrix_mul_fu_1031_pk_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_vector_matrix_mul_fu_1031_begin_r : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_shake_gen_S_E_fu_1099_ap_start : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_ap_done : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_ap_idle : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_ap_ready : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_S_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake_gen_S_E_fu_1099_S_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_S_we0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_S_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_gen_S_E_fu_1099_E_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_shake_gen_S_E_fu_1099_E_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_E_we0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_E_d0 : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_shake_gen_S_E_fu_1099_outlen : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1099_input_r_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_E_fu_1099_input_r_ce0 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_input_r_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_shake_gen_S_E_fu_1099_input_r_ce1 : STD_LOGIC;
    signal grp_shake_gen_S_E_fu_1099_low1 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_shake_gen_S_E_fu_1099_high1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1099_low2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1099_high2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_shake_gen_S_E_fu_1099_begin_r : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pack_reset_fu_1168_ap_start : STD_LOGIC;
    signal grp_pack_reset_fu_1168_ap_done : STD_LOGIC;
    signal grp_pack_reset_fu_1168_ap_idle : STD_LOGIC;
    signal grp_pack_reset_fu_1168_ap_ready : STD_LOGIC;
    signal grp_pack_reset_fu_1168_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_reset_fu_1168_out_r_ce0 : STD_LOGIC;
    signal grp_pack_reset_fu_1168_out_r_we0 : STD_LOGIC;
    signal grp_pack_reset_fu_1168_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pack_reset_fu_1168_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_reset_fu_1168_in_r_ce0 : STD_LOGIC;
    signal grp_pack_reset_fu_1168_in_r_we0 : STD_LOGIC;
    signal grp_pack_reset_fu_1168_in_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pack_reset_fu_1168_in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pack_reset_fu_1168_in_r_address1 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_pack_reset_fu_1168_in_r_ce1 : STD_LOGIC;
    signal grp_pack_reset_fu_1168_in_r_q1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_pack_reset_fu_1168_inlen : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pack_reset_fu_1168_begin_pack : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_pack_reset_fu_1168_n : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_pack_reset_fu_1168_begin_reset : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_read_input_2_fu_1186_ap_start : STD_LOGIC;
    signal grp_read_input_2_fu_1186_ap_idle : STD_LOGIC;
    signal grp_read_input_2_fu_1186_out_r_req_din : STD_LOGIC;
    signal grp_read_input_2_fu_1186_out_r_req_write : STD_LOGIC;
    signal grp_read_input_2_fu_1186_out_r_rsp_read : STD_LOGIC;
    signal grp_read_input_2_fu_1186_out_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_2_fu_1186_out_r_dataout : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_2_fu_1186_out_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_2_fu_1186_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_input_2_fu_1186_in_r_ce0 : STD_LOGIC;
    signal grp_read_input_1_fu_1199_ap_start : STD_LOGIC;
    signal grp_read_input_1_fu_1199_ap_done : STD_LOGIC;
    signal grp_read_input_1_fu_1199_ap_idle : STD_LOGIC;
    signal grp_read_input_1_fu_1199_ap_ready : STD_LOGIC;
    signal grp_read_input_1_fu_1199_out_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_read_input_1_fu_1199_out_r_ce0 : STD_LOGIC;
    signal grp_read_input_1_fu_1199_out_r_we0 : STD_LOGIC;
    signal grp_read_input_1_fu_1199_out_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_1_fu_1199_in_r_req_din : STD_LOGIC;
    signal grp_read_input_1_fu_1199_in_r_req_write : STD_LOGIC;
    signal grp_read_input_1_fu_1199_in_r_rsp_read : STD_LOGIC;
    signal grp_read_input_1_fu_1199_in_r_address : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_1_fu_1199_in_r_dataout : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_read_input_1_fu_1199_in_r_size : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_read_input_1_fu_1199_in_offset : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_write_reset_mod_fu_1208_ap_start : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_ap_done : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_ap_idle : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_ap_ready : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_out_r_address1 : STD_LOGIC_VECTOR (5 downto 0);
    signal grp_write_reset_mod_fu_1208_out_r_ce1 : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_out_r_we1 : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_out_r_d1 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_reset_mod_fu_1208_out_offset : STD_LOGIC_VECTOR (7 downto 0);
    signal grp_write_reset_mod_fu_1208_in_r_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_write_reset_mod_fu_1208_in_r_ce0 : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_in_r_we0 : STD_LOGIC;
    signal grp_write_reset_mod_fu_1208_in_r_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_write_reset_mod_fu_1208_in_r_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal i_0_reg_818 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_block_state4_on_subcall_done : BOOLEAN;
    signal ap_phi_mux_i_2_phi_fu_844_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal i_3_reg_851 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal i_4_reg_862 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_block_state26_on_subcall_done : BOOLEAN;
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_block_state31_on_subcall_done : BOOLEAN;
    signal phi_mul_reg_874 : STD_LOGIC_VECTOR (13 downto 0);
    signal phi_mul641_reg_885 : STD_LOGIC_VECTOR (13 downto 0);
    signal i_5_reg_896 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal grp_absorb_block_write_fu_949_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_block_state4_on_subcall_idle : BOOLEAN;
    signal ap_block_state29_on_subcall_idle : BOOLEAN;
    signal ap_block_state29_on_subcall_done : BOOLEAN;
    signal ap_block_state33_on_subcall_idle : BOOLEAN;
    signal ap_block_state33_on_subcall_done : BOOLEAN;
    signal grp_vector_matrix_mul_fu_1031_ap_start_reg : STD_LOGIC := '0';
    signal grp_shake_gen_S_E_fu_1099_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_pack_reset_fu_1168_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal grp_read_input_2_fu_1186_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal grp_read_input_1_fu_1199_ap_start_reg : STD_LOGIC := '0';
    signal grp_write_reset_mod_fu_1208_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal zext_ln96_fu_1428_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln98_fu_1447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal zext_ln112_fu_1482_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal zext_ln220_fu_1891_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal zext_ln235_fu_1991_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal zext_ln235_2_fu_2006_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal zext_ln248_fu_2022_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal start_word_0_fu_438 : STD_LOGIC_VECTOR (7 downto 0);
    signal start_word_2_fu_502 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_1433_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_7_fu_1440_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal or_ln_fu_1461_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln1_fu_1511_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln114_fu_1526_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln224_2_fu_1968_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln59_fu_1283_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln70_fu_1297_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln2_fu_1301_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln70_1_fu_1313_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln70_fu_1309_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln70_1_fu_1321_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal trunc_ln76_fu_1331_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal shl_ln_fu_1335_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln76_1_fu_1347_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln76_fu_1343_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln76_1_fu_1355_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal lshr_ln_fu_1451_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal trunc_ln112_fu_1497_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal lshr_ln1_fu_1501_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln114_fu_1520_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_11_fu_1569_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal icmp_ln155_fu_1607_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln155_3_fu_1613_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln160_fu_1625_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_1643_p4 : STD_LOGIC_VECTOR (3 downto 0);
    signal icmp_ln170_fu_1653_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln170_1_fu_1659_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal shl_ln183_1_fu_1685_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal shl_ln4_fu_1677_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal zext_ln183_fu_1693_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln183_fu_1697_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln5_fu_1707_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln185_fu_1715_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_ln181_fu_1671_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln183_1_fu_1703_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln181_fu_1743_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal select_ln181_1_fu_1757_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal start2_fu_1719_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal start2_1_fu_1731_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal end2_fu_1725_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal add_ln194_fu_1737_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal shl_ln7_fu_1825_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal shl_ln6_fu_1858_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal xor_ln220_fu_1885_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln224_fu_1919_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln224_fu_1923_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal temp_5_fu_1937_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal shl_ln224_1_fu_1951_p3 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln224_2_fu_1958_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal add_ln224_1_fu_1962_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal xor_ln235_fu_1985_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln235_1_fu_1996_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (44 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;

    component absorb_block_write IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        output_r_ce0 : OUT STD_LOGIC;
        output_r_we0 : OUT STD_LOGIC;
        output_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        outlen : IN STD_LOGIC_VECTOR (6 downto 0);
        inlen : IN STD_LOGIC_VECTOR (8 downto 0);
        reset : IN STD_LOGIC_VECTOR (0 downto 0);
        start_word : IN STD_LOGIC_VECTOR (7 downto 0);
        begin_absorb : IN STD_LOGIC_VECTOR (0 downto 0);
        ct_req_din : OUT STD_LOGIC;
        ct_req_full_n : IN STD_LOGIC;
        ct_req_write : OUT STD_LOGIC;
        ct_rsp_empty_n : IN STD_LOGIC;
        ct_rsp_read : OUT STD_LOGIC;
        ct_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        ct_datain : IN STD_LOGIC_VECTOR (15 downto 0);
        ct_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
        ct_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        ct_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        write_len : IN STD_LOGIC_VECTOR (11 downto 0);
        begin_write : IN STD_LOGIC_VECTOR (0 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component vector_matrix_mul IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_vec_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_vec_ce0 : OUT STD_LOGIC;
        output_vec_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        output_vec_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        output_vec_ce1 : OUT STD_LOGIC;
        output_vec_we1 : OUT STD_LOGIC;
        output_vec_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        A_1_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce0 : OUT STD_LOGIC;
        A_1_we0 : OUT STD_LOGIC;
        A_1_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_1_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_1_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_1_ce1 : OUT STD_LOGIC;
        A_1_we1 : OUT STD_LOGIC;
        A_1_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce0 : OUT STD_LOGIC;
        A_2_we0 : OUT STD_LOGIC;
        A_2_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        A_2_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        A_2_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        A_2_ce1 : OUT STD_LOGIC;
        A_2_we1 : OUT STD_LOGIC;
        A_2_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_q0 : IN STD_LOGIC_VECTOR (4 downto 0);
        seed_A_separated_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_separated_ce0 : OUT STD_LOGIC;
        seed_A_separated_we0 : OUT STD_LOGIC;
        seed_A_separated_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        seed_A_separated_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        seed_A_separated_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        seed_A_separated_ce1 : OUT STD_LOGIC;
        seed_A_separated_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        pk_req_din : OUT STD_LOGIC;
        pk_req_full_n : IN STD_LOGIC;
        pk_req_write : OUT STD_LOGIC;
        pk_rsp_empty_n : IN STD_LOGIC;
        pk_rsp_read : OUT STD_LOGIC;
        pk_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        pk_datain : IN STD_LOGIC_VECTOR (15 downto 0);
        pk_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
        pk_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        pregen : IN STD_LOGIC_VECTOR (0 downto 0);
        n : IN STD_LOGIC_VECTOR (9 downto 0);
        use_A : IN STD_LOGIC_VECTOR (0 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component shake_gen_S_E IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        S_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        S_ce0 : OUT STD_LOGIC;
        S_we0 : OUT STD_LOGIC;
        S_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        E_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        E_ce0 : OUT STD_LOGIC;
        E_we0 : OUT STD_LOGIC;
        E_d0 : OUT STD_LOGIC_VECTOR (4 downto 0);
        outlen : IN STD_LOGIC_VECTOR (12 downto 0);
        input_r_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce0 : OUT STD_LOGIC;
        input_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        input_r_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        input_r_ce1 : OUT STD_LOGIC;
        input_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        low1 : IN STD_LOGIC_VECTOR (13 downto 0);
        high1 : IN STD_LOGIC_VECTOR (12 downto 0);
        low2 : IN STD_LOGIC_VECTOR (12 downto 0);
        high2 : IN STD_LOGIC_VECTOR (12 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component pack_reset IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_we0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce1 : OUT STD_LOGIC;
        in_r_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        inlen : IN STD_LOGIC_VECTOR (10 downto 0);
        begin_pack : IN STD_LOGIC_VECTOR (0 downto 0);
        n : IN STD_LOGIC_VECTOR (10 downto 0);
        begin_reset : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component read_input_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_req_din : OUT STD_LOGIC;
        out_r_req_full_n : IN STD_LOGIC;
        out_r_req_write : OUT STD_LOGIC;
        out_r_rsp_empty_n : IN STD_LOGIC;
        out_r_rsp_read : OUT STD_LOGIC;
        out_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_r_datain : IN STD_LOGIC_VECTOR (15 downto 0);
        out_r_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        out_offset : IN STD_LOGIC_VECTOR (14 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        len : IN STD_LOGIC_VECTOR (10 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component read_input_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        out_r_ce0 : OUT STD_LOGIC;
        out_r_we0 : OUT STD_LOGIC;
        out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_req_din : OUT STD_LOGIC;
        in_r_req_full_n : IN STD_LOGIC;
        in_r_req_write : OUT STD_LOGIC;
        in_r_rsp_empty_n : IN STD_LOGIC;
        in_r_rsp_read : OUT STD_LOGIC;
        in_r_address : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_r_datain : IN STD_LOGIC_VECTOR (15 downto 0);
        in_r_dataout : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_size : OUT STD_LOGIC_VECTOR (31 downto 0);
        in_offset : IN STD_LOGIC_VECTOR (12 downto 0);
        len : IN STD_LOGIC_VECTOR (9 downto 0) );
    end component;


    component write_reset_mod IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        out_r_address1 : OUT STD_LOGIC_VECTOR (5 downto 0);
        out_r_ce1 : OUT STD_LOGIC;
        out_r_we1 : OUT STD_LOGIC;
        out_r_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
        out_offset : IN STD_LOGIC_VECTOR (7 downto 0);
        in_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
        in_r_ce0 : OUT STD_LOGIC;
        in_r_we0 : OUT STD_LOGIC;
        in_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        in_r_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component frodo_enc_B_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_G2in IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_G2out IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_seed_SE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_S_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (4 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (4 downto 0) );
    end component;


    component frodo_enc_A_1 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component frodo_enc_shake_ieOg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        address1 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    B_1_U : component frodo_enc_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_1_address0,
        ce0 => B_1_ce0,
        we0 => B_1_we0,
        d0 => B_1_d0,
        q0 => B_1_q0,
        address1 => B_1_address1,
        ce1 => B_1_ce1,
        we1 => B_1_we1,
        d1 => grp_vector_matrix_mul_fu_1031_output_vec_d1,
        q1 => B_1_q1);

    B_2_U : component frodo_enc_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => B_2_address0,
        ce0 => B_2_ce0,
        we0 => B_2_we0,
        d0 => B_2_d0,
        q0 => B_2_q0,
        address1 => B_2_address1,
        ce1 => B_2_ce1,
        we1 => B_2_we1,
        d1 => grp_vector_matrix_mul_fu_1031_output_vec_d1,
        q1 => B_2_q1);

    G2in_U : component frodo_enc_G2in
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G2in_address0,
        ce0 => G2in_ce0,
        we0 => G2in_we0,
        d0 => G2in_d0,
        q0 => G2in_q0);

    G2out_U : component frodo_enc_G2out
    generic map (
        DataWidth => 16,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => G2out_address0,
        ce0 => G2out_ce0,
        we0 => G2out_we0,
        d0 => grp_absorb_block_write_fu_949_output_r_d0,
        q0 => G2out_q0,
        address1 => G2out_address1,
        ce1 => G2out_ce1,
        q1 => G2out_q1);

    seed_SE_U : component frodo_enc_seed_SE
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_SE_address0,
        ce0 => seed_SE_ce0,
        we0 => seed_SE_we0,
        d0 => seed_SE_d0,
        q0 => seed_SE_q0,
        address1 => grp_shake_gen_S_E_fu_1099_input_r_address1,
        ce1 => seed_SE_ce1,
        q1 => seed_SE_q1);

    V_U : component frodo_enc_V
    generic map (
        DataWidth => 16,
        AddressRange => 64,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => V_address0,
        ce0 => V_ce0,
        q0 => V_q0,
        address1 => grp_write_reset_mod_fu_1208_out_r_address1,
        ce1 => V_ce1,
        we1 => V_we1,
        d1 => grp_write_reset_mod_fu_1208_out_r_d1);

    seed_A_separated_U : component frodo_enc_seed_SE
    generic map (
        DataWidth => 16,
        AddressRange => 9,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => seed_A_separated_address0,
        ce0 => seed_A_separated_ce0,
        we0 => seed_A_separated_we0,
        d0 => seed_A_separated_d0,
        q0 => seed_A_separated_q0,
        address1 => grp_vector_matrix_mul_fu_1031_seed_A_separated_address1,
        ce1 => seed_A_separated_ce1,
        q1 => seed_A_separated_q1);

    S_1_U : component frodo_enc_S_1
    generic map (
        DataWidth => 5,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_1_address0,
        ce0 => S_1_ce0,
        we0 => S_1_we0,
        d0 => grp_shake_gen_S_E_fu_1099_S_d0,
        q0 => S_1_q0);

    S_2_U : component frodo_enc_S_1
    generic map (
        DataWidth => 5,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => S_2_address0,
        ce0 => S_2_ce0,
        we0 => S_2_we0,
        d0 => grp_shake_gen_S_E_fu_1099_S_d0,
        q0 => S_2_q0);

    E_1_U : component frodo_enc_S_1
    generic map (
        DataWidth => 5,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_1_address0,
        ce0 => E_1_ce0,
        we0 => E_1_we0,
        d0 => grp_shake_gen_S_E_fu_1099_E_d0,
        q0 => E_1_q0);

    E_2_U : component frodo_enc_S_1
    generic map (
        DataWidth => 5,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => E_2_address0,
        ce0 => E_2_ce0,
        we0 => E_2_we0,
        d0 => grp_shake_gen_S_E_fu_1099_E_d0,
        q0 => E_2_q0);

    A_1_U : component frodo_enc_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_vector_matrix_mul_fu_1031_A_1_address0,
        ce0 => A_1_ce0,
        we0 => A_1_we0,
        d0 => grp_vector_matrix_mul_fu_1031_A_1_d0,
        q0 => A_1_q0,
        address1 => grp_vector_matrix_mul_fu_1031_A_1_address1,
        ce1 => A_1_ce1,
        we1 => A_1_we1,
        d1 => grp_vector_matrix_mul_fu_1031_A_1_d1);

    A_2_U : component frodo_enc_A_1
    generic map (
        DataWidth => 16,
        AddressRange => 672,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_vector_matrix_mul_fu_1031_A_2_address0,
        ce0 => A_2_ce0,
        we0 => A_2_we0,
        d0 => grp_vector_matrix_mul_fu_1031_A_2_d0,
        q0 => A_2_q0,
        address1 => grp_vector_matrix_mul_fu_1031_A_2_address1,
        ce1 => A_2_ce1,
        we1 => A_2_we1,
        d1 => grp_vector_matrix_mul_fu_1031_A_2_d1);

    shake_input_1_U : component frodo_enc_B_1
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shake_input_1_address0,
        ce0 => shake_input_1_ce0,
        we0 => shake_input_1_we0,
        d0 => shake_input_1_d0,
        q0 => shake_input_1_q0,
        address1 => shake_input_1_address1,
        ce1 => shake_input_1_ce1,
        we1 => shake_input_1_we1,
        d1 => shake_input_1_d1,
        q1 => shake_input_1_q1);

    shake_input_2_U : component frodo_enc_shake_ieOg
    generic map (
        DataWidth => 16,
        AddressRange => 640,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => shake_input_2_address0,
        ce0 => shake_input_2_ce0,
        we0 => shake_input_2_we0,
        d0 => shake_input_2_d0,
        q0 => shake_input_2_q0,
        address1 => grp_absorb_block_write_fu_949_input_r_address1,
        ce1 => shake_input_2_ce1,
        q1 => shake_input_2_q1);

    grp_absorb_block_write_fu_949 : component absorb_block_write
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_absorb_block_write_fu_949_ap_start,
        ap_done => grp_absorb_block_write_fu_949_ap_done,
        ap_idle => grp_absorb_block_write_fu_949_ap_idle,
        ap_ready => grp_absorb_block_write_fu_949_ap_ready,
        output_r_address0 => grp_absorb_block_write_fu_949_output_r_address0,
        output_r_ce0 => grp_absorb_block_write_fu_949_output_r_ce0,
        output_r_we0 => grp_absorb_block_write_fu_949_output_r_we0,
        output_r_d0 => grp_absorb_block_write_fu_949_output_r_d0,
        input_r_address0 => grp_absorb_block_write_fu_949_input_r_address0,
        input_r_ce0 => grp_absorb_block_write_fu_949_input_r_ce0,
        input_r_q0 => grp_absorb_block_write_fu_949_input_r_q0,
        input_r_address1 => grp_absorb_block_write_fu_949_input_r_address1,
        input_r_ce1 => grp_absorb_block_write_fu_949_input_r_ce1,
        input_r_q1 => grp_absorb_block_write_fu_949_input_r_q1,
        outlen => grp_absorb_block_write_fu_949_outlen,
        inlen => grp_absorb_block_write_fu_949_inlen,
        reset => grp_absorb_block_write_fu_949_reset,
        start_word => grp_absorb_block_write_fu_949_start_word,
        begin_absorb => grp_absorb_block_write_fu_949_begin_absorb,
        ct_req_din => grp_absorb_block_write_fu_949_ct_req_din,
        ct_req_full_n => ct_req_full_n,
        ct_req_write => grp_absorb_block_write_fu_949_ct_req_write,
        ct_rsp_empty_n => ct_rsp_empty_n,
        ct_rsp_read => grp_absorb_block_write_fu_949_ct_rsp_read,
        ct_address => grp_absorb_block_write_fu_949_ct_address,
        ct_datain => ct_datain,
        ct_dataout => grp_absorb_block_write_fu_949_ct_dataout,
        ct_size => grp_absorb_block_write_fu_949_ct_size,
        ct_offset => grp_absorb_block_write_fu_949_ct_offset,
        write_len => grp_absorb_block_write_fu_949_write_len,
        begin_write => grp_absorb_block_write_fu_949_begin_write,
        ap_return => grp_absorb_block_write_fu_949_ap_return);

    grp_vector_matrix_mul_fu_1031 : component vector_matrix_mul
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_vector_matrix_mul_fu_1031_ap_start,
        ap_done => grp_vector_matrix_mul_fu_1031_ap_done,
        ap_idle => grp_vector_matrix_mul_fu_1031_ap_idle,
        ap_ready => grp_vector_matrix_mul_fu_1031_ap_ready,
        output_vec_address0 => grp_vector_matrix_mul_fu_1031_output_vec_address0,
        output_vec_ce0 => grp_vector_matrix_mul_fu_1031_output_vec_ce0,
        output_vec_q0 => grp_vector_matrix_mul_fu_1031_output_vec_q0,
        output_vec_address1 => grp_vector_matrix_mul_fu_1031_output_vec_address1,
        output_vec_ce1 => grp_vector_matrix_mul_fu_1031_output_vec_ce1,
        output_vec_we1 => grp_vector_matrix_mul_fu_1031_output_vec_we1,
        output_vec_d1 => grp_vector_matrix_mul_fu_1031_output_vec_d1,
        S_address0 => grp_vector_matrix_mul_fu_1031_S_address0,
        S_ce0 => grp_vector_matrix_mul_fu_1031_S_ce0,
        S_q0 => grp_vector_matrix_mul_fu_1031_S_q0,
        A_1_address0 => grp_vector_matrix_mul_fu_1031_A_1_address0,
        A_1_ce0 => grp_vector_matrix_mul_fu_1031_A_1_ce0,
        A_1_we0 => grp_vector_matrix_mul_fu_1031_A_1_we0,
        A_1_d0 => grp_vector_matrix_mul_fu_1031_A_1_d0,
        A_1_q0 => A_1_q0,
        A_1_address1 => grp_vector_matrix_mul_fu_1031_A_1_address1,
        A_1_ce1 => grp_vector_matrix_mul_fu_1031_A_1_ce1,
        A_1_we1 => grp_vector_matrix_mul_fu_1031_A_1_we1,
        A_1_d1 => grp_vector_matrix_mul_fu_1031_A_1_d1,
        A_2_address0 => grp_vector_matrix_mul_fu_1031_A_2_address0,
        A_2_ce0 => grp_vector_matrix_mul_fu_1031_A_2_ce0,
        A_2_we0 => grp_vector_matrix_mul_fu_1031_A_2_we0,
        A_2_d0 => grp_vector_matrix_mul_fu_1031_A_2_d0,
        A_2_q0 => A_2_q0,
        A_2_address1 => grp_vector_matrix_mul_fu_1031_A_2_address1,
        A_2_ce1 => grp_vector_matrix_mul_fu_1031_A_2_ce1,
        A_2_we1 => grp_vector_matrix_mul_fu_1031_A_2_we1,
        A_2_d1 => grp_vector_matrix_mul_fu_1031_A_2_d1,
        E_address0 => grp_vector_matrix_mul_fu_1031_E_address0,
        E_ce0 => grp_vector_matrix_mul_fu_1031_E_ce0,
        E_q0 => grp_vector_matrix_mul_fu_1031_E_q0,
        seed_A_separated_address0 => grp_vector_matrix_mul_fu_1031_seed_A_separated_address0,
        seed_A_separated_ce0 => grp_vector_matrix_mul_fu_1031_seed_A_separated_ce0,
        seed_A_separated_we0 => grp_vector_matrix_mul_fu_1031_seed_A_separated_we0,
        seed_A_separated_d0 => grp_vector_matrix_mul_fu_1031_seed_A_separated_d0,
        seed_A_separated_q0 => seed_A_separated_q0,
        seed_A_separated_address1 => grp_vector_matrix_mul_fu_1031_seed_A_separated_address1,
        seed_A_separated_ce1 => grp_vector_matrix_mul_fu_1031_seed_A_separated_ce1,
        seed_A_separated_q1 => seed_A_separated_q1,
        pk_req_din => grp_vector_matrix_mul_fu_1031_pk_req_din,
        pk_req_full_n => pk_req_full_n,
        pk_req_write => grp_vector_matrix_mul_fu_1031_pk_req_write,
        pk_rsp_empty_n => pk_rsp_empty_n,
        pk_rsp_read => grp_vector_matrix_mul_fu_1031_pk_rsp_read,
        pk_address => grp_vector_matrix_mul_fu_1031_pk_address,
        pk_datain => pk_datain,
        pk_dataout => grp_vector_matrix_mul_fu_1031_pk_dataout,
        pk_size => grp_vector_matrix_mul_fu_1031_pk_size,
        pregen => or_ln155_reg_2223,
        n => select_ln134_reg_2208,
        use_A => icmp_ln134_reg_2203,
        begin_r => grp_vector_matrix_mul_fu_1031_begin_r);

    grp_shake_gen_S_E_fu_1099 : component shake_gen_S_E
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_shake_gen_S_E_fu_1099_ap_start,
        ap_done => grp_shake_gen_S_E_fu_1099_ap_done,
        ap_idle => grp_shake_gen_S_E_fu_1099_ap_idle,
        ap_ready => grp_shake_gen_S_E_fu_1099_ap_ready,
        S_address0 => grp_shake_gen_S_E_fu_1099_S_address0,
        S_ce0 => grp_shake_gen_S_E_fu_1099_S_ce0,
        S_we0 => grp_shake_gen_S_E_fu_1099_S_we0,
        S_d0 => grp_shake_gen_S_E_fu_1099_S_d0,
        E_address0 => grp_shake_gen_S_E_fu_1099_E_address0,
        E_ce0 => grp_shake_gen_S_E_fu_1099_E_ce0,
        E_we0 => grp_shake_gen_S_E_fu_1099_E_we0,
        E_d0 => grp_shake_gen_S_E_fu_1099_E_d0,
        outlen => grp_shake_gen_S_E_fu_1099_outlen,
        input_r_address0 => grp_shake_gen_S_E_fu_1099_input_r_address0,
        input_r_ce0 => grp_shake_gen_S_E_fu_1099_input_r_ce0,
        input_r_q0 => seed_SE_q0,
        input_r_address1 => grp_shake_gen_S_E_fu_1099_input_r_address1,
        input_r_ce1 => grp_shake_gen_S_E_fu_1099_input_r_ce1,
        input_r_q1 => seed_SE_q1,
        low1 => grp_shake_gen_S_E_fu_1099_low1,
        high1 => grp_shake_gen_S_E_fu_1099_high1,
        low2 => grp_shake_gen_S_E_fu_1099_low2,
        high2 => grp_shake_gen_S_E_fu_1099_high2,
        begin_r => grp_shake_gen_S_E_fu_1099_begin_r);

    grp_pack_reset_fu_1168 : component pack_reset
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_pack_reset_fu_1168_ap_start,
        ap_done => grp_pack_reset_fu_1168_ap_done,
        ap_idle => grp_pack_reset_fu_1168_ap_idle,
        ap_ready => grp_pack_reset_fu_1168_ap_ready,
        out_r_address0 => grp_pack_reset_fu_1168_out_r_address0,
        out_r_ce0 => grp_pack_reset_fu_1168_out_r_ce0,
        out_r_we0 => grp_pack_reset_fu_1168_out_r_we0,
        out_r_d0 => grp_pack_reset_fu_1168_out_r_d0,
        in_r_address0 => grp_pack_reset_fu_1168_in_r_address0,
        in_r_ce0 => grp_pack_reset_fu_1168_in_r_ce0,
        in_r_we0 => grp_pack_reset_fu_1168_in_r_we0,
        in_r_d0 => grp_pack_reset_fu_1168_in_r_d0,
        in_r_q0 => grp_pack_reset_fu_1168_in_r_q0,
        in_r_address1 => grp_pack_reset_fu_1168_in_r_address1,
        in_r_ce1 => grp_pack_reset_fu_1168_in_r_ce1,
        in_r_q1 => grp_pack_reset_fu_1168_in_r_q1,
        inlen => grp_pack_reset_fu_1168_inlen,
        begin_pack => grp_pack_reset_fu_1168_begin_pack,
        n => grp_pack_reset_fu_1168_n,
        begin_reset => grp_pack_reset_fu_1168_begin_reset);

    grp_read_input_2_fu_1186 : component read_input_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_input_2_fu_1186_ap_start,
        ap_done => grp_read_input_2_fu_1186_ap_done,
        ap_idle => grp_read_input_2_fu_1186_ap_idle,
        ap_ready => grp_read_input_2_fu_1186_ap_ready,
        out_r_req_din => grp_read_input_2_fu_1186_out_r_req_din,
        out_r_req_full_n => ct_req_full_n,
        out_r_req_write => grp_read_input_2_fu_1186_out_r_req_write,
        out_r_rsp_empty_n => ct_rsp_empty_n,
        out_r_rsp_read => grp_read_input_2_fu_1186_out_r_rsp_read,
        out_r_address => grp_read_input_2_fu_1186_out_r_address,
        out_r_datain => ct_datain,
        out_r_dataout => grp_read_input_2_fu_1186_out_r_dataout,
        out_r_size => grp_read_input_2_fu_1186_out_r_size,
        out_offset => ap_const_lv15_12C0,
        in_r_address0 => grp_read_input_2_fu_1186_in_r_address0,
        in_r_ce0 => grp_read_input_2_fu_1186_in_r_ce0,
        in_r_q0 => shake_input_1_q0,
        len => ap_const_lv11_3C,
        begin_r => ap_const_lv1_1);

    grp_read_input_1_fu_1199 : component read_input_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_read_input_1_fu_1199_ap_start,
        ap_done => grp_read_input_1_fu_1199_ap_done,
        ap_idle => grp_read_input_1_fu_1199_ap_idle,
        ap_ready => grp_read_input_1_fu_1199_ap_ready,
        out_r_address0 => grp_read_input_1_fu_1199_out_r_address0,
        out_r_ce0 => grp_read_input_1_fu_1199_out_r_ce0,
        out_r_we0 => grp_read_input_1_fu_1199_out_r_we0,
        out_r_d0 => grp_read_input_1_fu_1199_out_r_d0,
        in_r_req_din => grp_read_input_1_fu_1199_in_r_req_din,
        in_r_req_full_n => pk_req_full_n,
        in_r_req_write => grp_read_input_1_fu_1199_in_r_req_write,
        in_r_rsp_empty_n => pk_rsp_empty_n,
        in_r_rsp_read => grp_read_input_1_fu_1199_in_r_rsp_read,
        in_r_address => grp_read_input_1_fu_1199_in_r_address,
        in_r_datain => pk_datain,
        in_r_dataout => grp_read_input_1_fu_1199_in_r_dataout,
        in_r_size => grp_read_input_1_fu_1199_in_r_size,
        in_offset => grp_read_input_1_fu_1199_in_offset,
        len => select_ln59_reg_2062);

    grp_write_reset_mod_fu_1208 : component write_reset_mod
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_write_reset_mod_fu_1208_ap_start,
        ap_done => grp_write_reset_mod_fu_1208_ap_done,
        ap_idle => grp_write_reset_mod_fu_1208_ap_idle,
        ap_ready => grp_write_reset_mod_fu_1208_ap_ready,
        out_r_address1 => grp_write_reset_mod_fu_1208_out_r_address1,
        out_r_ce1 => grp_write_reset_mod_fu_1208_out_r_ce1,
        out_r_we1 => grp_write_reset_mod_fu_1208_out_r_we1,
        out_r_d1 => grp_write_reset_mod_fu_1208_out_r_d1,
        out_offset => grp_write_reset_mod_fu_1208_out_offset,
        in_r_address0 => grp_write_reset_mod_fu_1208_in_r_address0,
        in_r_ce0 => grp_write_reset_mod_fu_1208_in_r_ce0,
        in_r_we0 => grp_write_reset_mod_fu_1208_in_r_we0,
        in_r_d0 => grp_write_reset_mod_fu_1208_in_r_d0,
        in_r_q0 => grp_write_reset_mod_fu_1208_in_r_q0,
        begin_r => xor_ln123_reg_2198);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state9))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state9);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state13)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state13);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                    ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state37) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state37))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state37);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state43) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif (((grp_read_input_2_fu_1186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state43))) then 
                    ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state43);
                elsif ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                elsif (((grp_read_input_2_fu_1186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                    ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state49) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state49)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state49);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_absorb_block_write_fu_949_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_absorb_block_write_fu_949_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_absorb_block_write_fu_949_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_absorb_block_write_fu_949_ap_ready = ap_const_logic_1)) then 
                    grp_absorb_block_write_fu_949_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_pack_reset_fu_1168_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_pack_reset_fu_1168_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25) or ((icmp_ln218_fu_1873_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35)))) then 
                    grp_pack_reset_fu_1168_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_pack_reset_fu_1168_ap_ready = ap_const_logic_1)) then 
                    grp_pack_reset_fu_1168_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_input_1_fu_1199_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_input_1_fu_1199_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                    grp_read_input_1_fu_1199_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_input_1_fu_1199_ap_ready = ap_const_logic_1)) then 
                    grp_read_input_1_fu_1199_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_read_input_2_fu_1186_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_read_input_2_fu_1186_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
                    grp_read_input_2_fu_1186_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_read_input_2_fu_1186_ap_ready = ap_const_logic_1)) then 
                    grp_read_input_2_fu_1186_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_shake_gen_S_E_fu_1099_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_shake_gen_S_E_fu_1099_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state25))) then 
                    grp_shake_gen_S_E_fu_1099_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_shake_gen_S_E_fu_1099_ap_ready = ap_const_logic_1)) then 
                    grp_shake_gen_S_E_fu_1099_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_vector_matrix_mul_fu_1031_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_vector_matrix_mul_fu_1031_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28))) then 
                    grp_vector_matrix_mul_fu_1031_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_vector_matrix_mul_fu_1031_ap_ready = ap_const_logic_1)) then 
                    grp_vector_matrix_mul_fu_1031_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_write_reset_mod_fu_1208_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_write_reset_mod_fu_1208_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state30))) then 
                    grp_write_reset_mod_fu_1208_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_write_reset_mod_fu_1208_ap_ready = ap_const_logic_1)) then 
                    grp_write_reset_mod_fu_1208_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_818_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_0_reg_818 <= i_8_reg_2052;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_818 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_1_reg_829_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_1365_p2 = ap_const_lv1_0))) then 
                i_1_reg_829 <= i_fu_1371_p2;
            elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                i_1_reg_829 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_2_reg_840_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                i_2_reg_840 <= ap_const_lv4_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))) then 
                i_2_reg_840 <= i_9_reg_2100;
            end if; 
        end if;
    end process;

    i_3_reg_851_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
                i_3_reg_851 <= i_10_reg_2139;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                i_3_reg_851 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_4_reg_862_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_on_subcall_done))) then 
                i_4_reg_862 <= i_11_reg_2188;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then 
                i_4_reg_862 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    i_5_reg_896_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln121_fu_1545_p2 = ap_const_lv1_1))) then 
                i_5_reg_896 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
                i_5_reg_896 <= i_13_reg_2345;
            end if; 
        end if;
    end process;

    i_6_reg_927_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln232_fu_1973_p2 = ap_const_lv1_0))) then 
                i_6_reg_927 <= i_12_fu_1979_p2;
            elsif (((grp_read_input_2_fu_1186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then 
                i_6_reg_927 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    i_7_reg_938_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln245_fu_2010_p2 = ap_const_lv1_0))) then 
                i_7_reg_938 <= i_14_fu_2016_p2;
            elsif (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then 
                i_7_reg_938 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    j_0_reg_907_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln221_fu_1907_p2 = ap_const_lv1_0))) then 
                j_0_reg_907 <= j_fu_1913_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                j_0_reg_907 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    phi_mul641_reg_885_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_on_subcall_done))) then 
                phi_mul641_reg_885 <= add_ln198_1_reg_2277;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then 
                phi_mul641_reg_885 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    phi_mul_reg_874_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_on_subcall_done))) then 
                phi_mul_reg_874 <= add_ln198_reg_2272;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then 
                phi_mul_reg_874 <= ap_const_lv14_0;
            end if; 
        end if;
    end process;

    start_word_0_fu_438_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
                start_word_0_fu_438 <= grp_absorb_block_write_fu_949_ap_return;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                start_word_0_fu_438 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    start_word_2_fu_502_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_on_subcall_done)) or ((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_boolean_0 = ap_block_state29_on_subcall_done)))) then 
                start_word_2_fu_502 <= grp_absorb_block_write_fu_949_ap_return;
            elsif (((icmp_ln110_fu_1470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
                start_word_2_fu_502 <= ap_const_lv8_0;
            end if; 
        end if;
    end process;

    temp_0_reg_918_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln221_fu_1907_p2 = ap_const_lv1_0))) then 
                temp_0_reg_918 <= temp_6_fu_1947_p1;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
                temp_0_reg_918 <= G2in_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln121_fu_1545_p2 = ap_const_lv1_0))) then
                add_ln198_1_reg_2277 <= add_ln198_1_fu_1801_p2;
                add_ln198_reg_2272 <= add_ln198_fu_1795_p2;
                and_ln160_reg_2228 <= and_ln160_fu_1631_p2;
                and_ln170_reg_2238 <= and_ln170_fu_1665_p2;
                    end1_reg_2250(12 downto 5) <= end1_fu_1765_p2(12 downto 5);
                    end2_1_reg_2261(11 downto 1) <= end2_1_fu_1779_p3(11 downto 1);
                icmp_ln123_reg_2193 <= icmp_ln123_fu_1557_p2;
                icmp_ln134_reg_2203 <= icmp_ln134_fu_1579_p2;
                icmp_ln150_reg_2218 <= icmp_ln150_fu_1601_p2;
                icmp_ln165_reg_2233 <= icmp_ln165_fu_1637_p2;
                or_ln155_reg_2223 <= or_ln155_fu_1619_p2;
                    select_ln134_reg_2208(3) <= select_ln134_fu_1585_p3(3);    select_ln134_reg_2208(7) <= select_ln134_fu_1585_p3(7);    select_ln134_reg_2208(9) <= select_ln134_fu_1585_p3(9);
                    select_ln181_4_reg_2267(11 downto 7) <= select_ln181_4_fu_1787_p3(11 downto 7);
                    start1_reg_2244(12 downto 5) <= start1_fu_1751_p2(12 downto 5);
                    start2_2_reg_2255(11 downto 1) <= start2_2_fu_1771_p3(11 downto 1);
                tmp_12_reg_2213 <= i_4_reg_862(4 downto 4);
                xor_ln123_reg_2198 <= xor_ln123_fu_1563_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state28)) then
                add_ln203_reg_2302 <= add_ln203_fu_1819_p2;
                    sext_ln201_reg_2282(13 downto 5) <= sext_ln201_fu_1807_p1(13 downto 5);
                xor_ln202_reg_2297 <= grp_fu_1229_p2;
                    zext_ln201_1_reg_2292(11 downto 1) <= zext_ln201_1_fu_1815_p1(11 downto 1);
                    zext_ln201_reg_2287(11 downto 1) <= zext_ln201_fu_1811_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state30)) then
                    add_ln205_reg_2307(7 downto 3) <= add_ln205_fu_1833_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state32)) then
                add_ln212_reg_2332 <= add_ln212_fu_1852_p2;
                    sext_ln210_reg_2312(13 downto 5) <= sext_ln210_fu_1840_p1(13 downto 5);
                xor_ln211_reg_2327 <= grp_fu_1229_p2;
                    zext_ln210_1_reg_2322(11 downto 1) <= zext_ln210_1_fu_1848_p1(11 downto 1);
                    zext_ln210_reg_2317(11 downto 1) <= zext_ln210_fu_1844_p1(11 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state34)) then
                    add_ln214_reg_2337(7 downto 3) <= add_ln214_fu_1866_p2(7 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln232_fu_1973_p2 = ap_const_lv1_0))) then
                add_ln235_reg_2408 <= add_ln235_fu_2000_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln52_fu_1261_p1 = ap_const_lv1_0) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0))) then
                    add_ln70_reg_2067(12 downto 7) <= add_ln70_fu_1325_p2(12 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln52_fu_1261_p1 = ap_const_lv1_1) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0))) then
                    add_ln76_reg_2072(12 downto 7) <= add_ln76_fu_1359_p2(12 downto 7);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))) then
                empty_31_reg_2116 <= empty_31_fu_1400_p1;
                empty_32_reg_2126 <= empty_32_fu_1414_p1;
                mu_in_read_reg_2111 <= mu_in_datain;
                p_1_reg_2121 <= mu_in_datain(15 downto 8);
                p_2_reg_2131 <= pk_datain(15 downto 8);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                i_10_reg_2139 <= i_10_fu_1476_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state27)) then
                i_11_reg_2188 <= i_11_fu_1551_p2;
                trunc_ln121_reg_2181 <= trunc_ln121_fu_1541_p1;
                    zext_ln121_1_reg_2176(13 downto 0) <= zext_ln121_1_fu_1537_p1(13 downto 0);
                    zext_ln121_reg_2171(13 downto 0) <= zext_ln121_fu_1533_p1(13 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state35)) then
                i_13_reg_2345 <= i_13_fu_1879_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_8_reg_2052 <= i_8_fu_1271_p2;
                trunc_ln52_reg_2045 <= trunc_ln52_fu_1261_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_9_reg_2100 <= i_9_fu_1388_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                i_9_reg_2100_pp1_iter1_reg <= i_9_reg_2100;
                icmp_ln93_reg_2096 <= icmp_ln93_fu_1382_p2;
                icmp_ln93_reg_2096_pp1_iter1_reg <= icmp_ln93_reg_2096;
                xor_ln96_reg_2106_pp1_iter1_reg <= xor_ln96_reg_2106;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                icmp_ln221_reg_2365 <= icmp_ln221_fu_1907_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                icmp_ln232_reg_2394 <= icmp_ln232_fu_1973_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001))) then
                icmp_ln245_reg_2413 <= icmp_ln245_fu_2010_p2;
                icmp_ln245_reg_2413_pp4_iter1_reg <= icmp_ln245_reg_2413;
                icmp_ln248_reg_2427_pp4_iter1_reg <= icmp_ln248_reg_2427;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln245_fu_2010_p2 = ap_const_lv1_0))) then
                icmp_ln248_reg_2427 <= icmp_ln248_fu_2027_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0))) then
                icmp_ln54_reg_2057 <= icmp_ln54_fu_1277_p2;
                    select_ln59_reg_2062(3) <= select_ln59_fu_1289_p3(3);    select_ln59_reg_2062(9 downto 6) <= select_ln59_fu_1289_p3(9 downto 6);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln87_reg_2077 <= icmp_ln87_fu_1365_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0)))) then
                reg_1240 <= start_word_0_fu_438;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state47) or ((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln121_fu_1545_p2 = ap_const_lv1_0)))) then
                reg_1245 <= start_word_2_fu_502;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state36) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then
                reg_1250 <= G2in_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state36)) then
                    shl_ln8_reg_2360(5 downto 3) <= shl_ln8_fu_1900_p3(5 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln221_fu_1907_p2 = ap_const_lv1_0))) then
                trunc_ln224_1_reg_2384 <= trunc_ln224_1_fu_1933_p1;
                    zext_ln224_1_reg_2374(5 downto 0) <= zext_ln224_1_fu_1928_p1(5 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state35) and (icmp_ln218_fu_1873_p2 = ap_const_lv1_0))) then
                trunc_ln224_reg_2355 <= trunc_ln224_fu_1896_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_fu_1382_p2 = ap_const_lv1_0))) then
                xor_ln96_reg_2106 <= xor_ln96_fu_1394_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_1470_p2 = ap_const_lv1_0))) then
                    zext_ln112_1_reg_2149(2 downto 0) <= zext_ln112_1_fu_1487_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_fu_1365_p2 = ap_const_lv1_0))) then
                    zext_ln90_reg_2086(3 downto 0) <= zext_ln90_fu_1377_p1(3 downto 0);
            end if;
        end if;
    end process;
    select_ln59_reg_2062(2 downto 0) <= "000";
    select_ln59_reg_2062(5 downto 4) <= "00";
    add_ln70_reg_2067(6 downto 0) <= "0000000";
    add_ln76_reg_2072(6 downto 0) <= "0000000";
    zext_ln90_reg_2086(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    zext_ln112_1_reg_2149(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    zext_ln121_reg_2171(14) <= '0';
    zext_ln121_1_reg_2176(14) <= '0';
    select_ln134_reg_2208(2 downto 0) <= "000";
    select_ln134_reg_2208(6 downto 4) <= "000";
    select_ln134_reg_2208(8) <= '0';
    start1_reg_2244(4 downto 0) <= "00000";
    end1_reg_2250(4 downto 0) <= "00000";
    start2_2_reg_2255(0) <= '0';
    end2_1_reg_2261(0) <= '0';
    select_ln181_4_reg_2267(6 downto 0) <= "0000000";
    select_ln181_4_reg_2267(12) <= '0';
    sext_ln201_reg_2282(4 downto 0) <= "00000";
    zext_ln201_reg_2287(0) <= '0';
    zext_ln201_reg_2287(12) <= '0';
    zext_ln201_1_reg_2292(0) <= '0';
    zext_ln201_1_reg_2292(12) <= '0';
    add_ln205_reg_2307(2 downto 0) <= "000";
    sext_ln210_reg_2312(4 downto 0) <= "00000";
    zext_ln210_reg_2317(0) <= '0';
    zext_ln210_reg_2317(12) <= '0';
    zext_ln210_1_reg_2322(0) <= '0';
    zext_ln210_1_reg_2322(12) <= '0';
    add_ln214_reg_2337(2 downto 0) <= "000";
    shl_ln8_reg_2360(2 downto 0) <= "000";
    zext_ln224_1_reg_2374(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln52_fu_1265_p2, ap_CS_fsm_state27, icmp_ln121_fu_1545_p2, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, trunc_ln52_fu_1261_p1, icmp_ln87_fu_1365_p2, ap_enable_reg_pp0_iter0, icmp_ln93_fu_1382_p2, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_CS_fsm_state22, icmp_ln110_fu_1470_p2, trunc_ln121_fu_1541_p1, ap_CS_fsm_state35, icmp_ln218_fu_1873_p2, icmp_ln221_fu_1907_p2, ap_enable_reg_pp2_iter0, icmp_ln232_fu_1973_p2, ap_enable_reg_pp3_iter0, icmp_ln245_fu_2010_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state8, grp_absorb_block_write_fu_949_ap_done, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_enable_reg_pp1_iter2, ap_block_pp2_stage0_subdone, ap_CS_fsm_state42, grp_read_input_2_fu_1186_ap_done, ap_block_pp3_stage0_subdone, ap_CS_fsm_state48, ap_block_pp4_stage0_subdone, grp_pack_reset_fu_1168_ap_done, ap_CS_fsm_state4, ap_block_state4_on_subcall_done, ap_CS_fsm_state26, ap_block_state26_on_subcall_done, ap_CS_fsm_state31, ap_block_state31_on_subcall_done, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state29_on_subcall_done, ap_block_state33_on_subcall_done, ap_CS_fsm_state40)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln52_fu_1261_p1 = ap_const_lv1_1) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (trunc_ln52_fu_1261_p1 = ap_const_lv1_0) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((ap_const_boolean_0 = ap_block_state4_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                if (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln87_fu_1365_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln87_fu_1365_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln93_fu_1382_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (icmp_ln93_fu_1382_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state16;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                if (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state19))) then
                    ap_NS_fsm <= ap_ST_fsm_state20;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if (((icmp_ln110_fu_1470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state24;
                else
                    ap_NS_fsm <= ap_ST_fsm_state23;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state26) and (ap_const_boolean_0 = ap_block_state26_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state26;
                end if;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln121_fu_1545_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state35;
                elsif (((trunc_ln121_fu_1541_p1 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state27) and (icmp_ln121_fu_1545_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state32;
                else
                    ap_NS_fsm <= ap_ST_fsm_state28;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state29) and (ap_const_boolean_0 = ap_block_state29_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state30;
                else
                    ap_NS_fsm <= ap_ST_fsm_state29;
                end if;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state31) and (ap_const_boolean_0 = ap_block_state31_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state27;
                else
                    ap_NS_fsm <= ap_ST_fsm_state31;
                end if;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state33) and (ap_const_boolean_0 = ap_block_state33_on_subcall_done))) then
                    ap_NS_fsm <= ap_ST_fsm_state34;
                else
                    ap_NS_fsm <= ap_ST_fsm_state33;
                end if;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state35 => 
                if (((icmp_ln218_fu_1873_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state35))) then
                    ap_NS_fsm <= ap_ST_fsm_state40;
                else
                    ap_NS_fsm <= ap_ST_fsm_state36;
                end if;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln221_fu_1907_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (icmp_ln221_fu_1907_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state39;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state40 => 
                if (((grp_pack_reset_fu_1168_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state40))) then
                    ap_NS_fsm <= ap_ST_fsm_state41;
                else
                    ap_NS_fsm <= ap_ST_fsm_state40;
                end if;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                if (((grp_read_input_2_fu_1186_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state42))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state42;
                end if;
            when ap_ST_fsm_pp3_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln232_fu_1973_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (icmp_ln232_fu_1973_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state45;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                if (((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state48))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state48;
                end if;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln245_fu_2010_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) and not(((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (icmp_ln245_fu_2010_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)) or ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state52;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    A_1_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_1_ce0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_1_ce0 <= grp_vector_matrix_mul_fu_1031_A_1_ce0;
        else 
            A_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_ce1_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_1_ce1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_1_ce1 <= grp_vector_matrix_mul_fu_1031_A_1_ce1;
        else 
            A_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we0_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_1_we0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_1_we0 <= grp_vector_matrix_mul_fu_1031_A_1_we0;
        else 
            A_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_1_we1_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_1_we1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_1_we1 <= grp_vector_matrix_mul_fu_1031_A_1_we1;
        else 
            A_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_2_ce0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_2_ce0 <= grp_vector_matrix_mul_fu_1031_A_2_ce0;
        else 
            A_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_ce1_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_2_ce1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_2_ce1 <= grp_vector_matrix_mul_fu_1031_A_2_ce1;
        else 
            A_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we0_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_2_we0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_2_we0 <= grp_vector_matrix_mul_fu_1031_A_2_we0;
        else 
            A_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    A_2_we1_assign_proc : process(grp_vector_matrix_mul_fu_1031_A_2_we1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            A_2_we1 <= grp_vector_matrix_mul_fu_1031_A_2_we1;
        else 
            A_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_address0_assign_proc : process(trunc_ln121_reg_2181, grp_vector_matrix_mul_fu_1031_output_vec_address0, grp_pack_reset_fu_1168_in_r_address0, grp_write_reset_mod_fu_1208_in_r_address0, ap_CS_fsm_state31, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0))) then 
            B_1_address0 <= grp_write_reset_mod_fu_1208_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_address0 <= grp_pack_reset_fu_1168_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_1_address0 <= grp_vector_matrix_mul_fu_1031_output_vec_address0;
        else 
            B_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_1_address1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_address1, grp_pack_reset_fu_1168_in_r_address1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_address1 <= grp_pack_reset_fu_1168_in_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_1_address1 <= grp_vector_matrix_mul_fu_1031_output_vec_address1;
        else 
            B_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_1_ce0_assign_proc : process(trunc_ln121_reg_2181, grp_vector_matrix_mul_fu_1031_output_vec_ce0, grp_pack_reset_fu_1168_in_r_ce0, grp_write_reset_mod_fu_1208_in_r_ce0, ap_CS_fsm_state31, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0))) then 
            B_1_ce0 <= grp_write_reset_mod_fu_1208_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_ce0 <= grp_pack_reset_fu_1168_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_1_ce0 <= grp_vector_matrix_mul_fu_1031_output_vec_ce0;
        else 
            B_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_ce1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_ce1, grp_pack_reset_fu_1168_in_r_ce1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_ce1 <= grp_pack_reset_fu_1168_in_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_1_ce1 <= grp_vector_matrix_mul_fu_1031_output_vec_ce1;
        else 
            B_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_d0_assign_proc : process(trunc_ln121_reg_2181, grp_pack_reset_fu_1168_in_r_d0, grp_write_reset_mod_fu_1208_in_r_d0, ap_CS_fsm_state31, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0))) then 
            B_1_d0 <= grp_write_reset_mod_fu_1208_in_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_d0 <= grp_pack_reset_fu_1168_in_r_d0;
        else 
            B_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_1_we0_assign_proc : process(trunc_ln121_reg_2181, grp_pack_reset_fu_1168_in_r_we0, grp_write_reset_mod_fu_1208_in_r_we0, ap_CS_fsm_state31, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0))) then 
            B_1_we0 <= grp_write_reset_mod_fu_1208_in_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_1_we0 <= grp_pack_reset_fu_1168_in_r_we0;
        else 
            B_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_1_we1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_we1, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            B_1_we1 <= grp_vector_matrix_mul_fu_1031_output_vec_we1;
        else 
            B_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_address0_assign_proc : process(trunc_ln121_reg_2181, ap_CS_fsm_pp2_stage0, zext_ln224_1_reg_2374, ap_enable_reg_pp2_iter1, grp_vector_matrix_mul_fu_1031_output_vec_address0, grp_pack_reset_fu_1168_in_r_address0, grp_write_reset_mod_fu_1208_in_r_address0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_block_pp2_stage0)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            B_2_address0 <= zext_ln224_1_reg_2374(10 - 1 downto 0);
        elsif (((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            B_2_address0 <= grp_write_reset_mod_fu_1208_in_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_address0 <= grp_pack_reset_fu_1168_in_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_2_address0 <= grp_vector_matrix_mul_fu_1031_output_vec_address0;
        else 
            B_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_2_address1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_address1, grp_pack_reset_fu_1168_in_r_address1, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_address1 <= grp_pack_reset_fu_1168_in_r_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_2_address1 <= grp_vector_matrix_mul_fu_1031_output_vec_address1;
        else 
            B_2_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    B_2_ce0_assign_proc : process(trunc_ln121_reg_2181, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_vector_matrix_mul_fu_1031_output_vec_ce0, grp_pack_reset_fu_1168_in_r_ce0, grp_write_reset_mod_fu_1208_in_r_ce0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            B_2_ce0 <= ap_const_logic_1;
        elsif (((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            B_2_ce0 <= grp_write_reset_mod_fu_1208_in_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_ce0 <= grp_pack_reset_fu_1168_in_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_2_ce0 <= grp_vector_matrix_mul_fu_1031_output_vec_ce0;
        else 
            B_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_ce1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_ce1, grp_pack_reset_fu_1168_in_r_ce1, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_ce1 <= grp_pack_reset_fu_1168_in_r_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_2_ce1 <= grp_vector_matrix_mul_fu_1031_output_vec_ce1;
        else 
            B_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_d0_assign_proc : process(trunc_ln121_reg_2181, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter1, grp_pack_reset_fu_1168_in_r_d0, grp_write_reset_mod_fu_1208_in_r_d0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_block_pp2_stage0, zext_ln224_2_fu_1968_p1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (ap_const_boolean_0 = ap_block_pp2_stage0))) then 
            B_2_d0 <= zext_ln224_2_fu_1968_p1;
        elsif (((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            B_2_d0 <= grp_write_reset_mod_fu_1208_in_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_d0 <= grp_pack_reset_fu_1168_in_r_d0;
        else 
            B_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    B_2_we0_assign_proc : process(trunc_ln121_reg_2181, icmp_ln221_reg_2365, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter1, grp_pack_reset_fu_1168_in_r_we0, grp_write_reset_mod_fu_1208_in_r_we0, ap_CS_fsm_state26, ap_CS_fsm_state31, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0) and (icmp_ln221_reg_2365 = ap_const_lv1_0))) then 
            B_2_we0 <= ap_const_logic_1;
        elsif (((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31))) then 
            B_2_we0 <= grp_write_reset_mod_fu_1208_in_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            B_2_we0 <= grp_pack_reset_fu_1168_in_r_we0;
        else 
            B_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_2_we1_assign_proc : process(grp_vector_matrix_mul_fu_1031_output_vec_we1, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            B_2_we1 <= grp_vector_matrix_mul_fu_1031_output_vec_we1;
        else 
            B_2_we1 <= ap_const_logic_0;
        end if; 
    end process;


    E_1_address0_assign_proc : process(grp_vector_matrix_mul_fu_1031_E_address0, grp_shake_gen_S_E_fu_1099_E_address0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            E_1_address0 <= grp_shake_gen_S_E_fu_1099_E_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            E_1_address0 <= grp_vector_matrix_mul_fu_1031_E_address0;
        else 
            E_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    E_1_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_E_ce0, grp_shake_gen_S_E_fu_1099_E_ce0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            E_1_ce0 <= grp_shake_gen_S_E_fu_1099_E_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            E_1_ce0 <= grp_vector_matrix_mul_fu_1031_E_ce0;
        else 
            E_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_1_we0_assign_proc : process(grp_shake_gen_S_E_fu_1099_E_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            E_1_we0 <= grp_shake_gen_S_E_fu_1099_E_we0;
        else 
            E_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    E_2_address0_assign_proc : process(grp_vector_matrix_mul_fu_1031_E_address0, grp_shake_gen_S_E_fu_1099_E_address0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            E_2_address0 <= grp_shake_gen_S_E_fu_1099_E_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            E_2_address0 <= grp_vector_matrix_mul_fu_1031_E_address0;
        else 
            E_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    E_2_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_E_ce0, grp_shake_gen_S_E_fu_1099_E_ce0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            E_2_ce0 <= grp_shake_gen_S_E_fu_1099_E_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            E_2_ce0 <= grp_vector_matrix_mul_fu_1031_E_ce0;
        else 
            E_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    E_2_we0_assign_proc : process(grp_shake_gen_S_E_fu_1099_E_we0, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            E_2_we0 <= grp_shake_gen_S_E_fu_1099_E_we0;
        else 
            E_2_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_address0_assign_proc : process(ap_CS_fsm_pp4_stage0, trunc_ln52_reg_2045, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, zext_ln90_fu_1377_p1, ap_CS_fsm_state35, ap_enable_reg_pp4_iter0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_output_r_address0, ap_CS_fsm_state4, ap_block_pp1_stage0, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_pp0_stage0, zext_ln96_fu_1428_p1, zext_ln220_fu_1891_p1, zext_ln248_fu_2022_p1, ap_block_pp4_stage0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0))) then 
            G2in_address0 <= zext_ln248_fu_2022_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            G2in_address0 <= zext_ln220_fu_1891_p1(4 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            G2in_address0 <= zext_ln96_fu_1428_p1(4 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            G2in_address0 <= zext_ln90_fu_1377_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            G2in_address0 <= grp_absorb_block_write_fu_949_output_r_address0;
        else 
            G2in_address0 <= "XXXX";
        end if; 
    end process;


    G2in_ce0_assign_proc : process(ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, trunc_ln52_reg_2045, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_block_pp1_stage0_11001, ap_CS_fsm_state35, ap_enable_reg_pp4_iter0, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_output_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state35) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)))) then 
            G2in_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            G2in_ce0 <= grp_absorb_block_write_fu_949_output_r_ce0;
        else 
            G2in_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2in_d0_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_output_r_d0, ap_CS_fsm_state4, ap_block_pp1_stage0, ap_CS_fsm_state29, ap_CS_fsm_state33, tmp_5_fu_1433_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            G2in_d0 <= tmp_5_fu_1433_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            G2in_d0 <= grp_absorb_block_write_fu_949_output_r_d0;
        else 
            G2in_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    G2in_we0_assign_proc : process(trunc_ln52_reg_2045, ap_block_pp1_stage0_11001, icmp_ln93_reg_2096_pp1_iter1_reg, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_output_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln93_reg_2096_pp1_iter1_reg = ap_const_lv1_0))) then 
            G2in_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            G2in_we0 <= grp_absorb_block_write_fu_949_output_r_we0;
        else 
            G2in_we0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_address0_assign_proc : process(ap_CS_fsm_state22, icmp_ln110_fu_1470_p2, grp_absorb_block_write_fu_949_output_r_address0, ap_CS_fsm_state19, zext_ln112_fu_1482_p1, ap_CS_fsm_state20)
    begin
        if (((icmp_ln110_fu_1470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            G2out_address0 <= ap_const_lv64_7(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_1470_p2 = ap_const_lv1_0))) then 
            G2out_address0 <= zext_ln112_fu_1482_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            G2out_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G2out_address0 <= grp_absorb_block_write_fu_949_output_r_address0;
        else 
            G2out_address0 <= "XXXX";
        end if; 
    end process;


    G2out_address1_assign_proc : process(ap_CS_fsm_state22, zext_ln112_1_fu_1487_p1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, zext_ln235_fu_1991_p1, ap_block_pp3_stage0)
    begin
        if (((ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            G2out_address1 <= zext_ln235_fu_1991_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            G2out_address1 <= zext_ln112_1_fu_1487_p1(4 - 1 downto 0);
        else 
            G2out_address1 <= "XXXX";
        end if; 
    end process;


    G2out_ce0_assign_proc : process(ap_CS_fsm_state22, icmp_ln110_fu_1470_p2, grp_absorb_block_write_fu_949_output_r_ce0, ap_CS_fsm_state19, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) or ((icmp_ln110_fu_1470_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state22)) or ((ap_const_logic_1 = ap_CS_fsm_state22) and (icmp_ln110_fu_1470_p2 = ap_const_lv1_0)))) then 
            G2out_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G2out_ce0 <= grp_absorb_block_write_fu_949_output_r_ce0;
        else 
            G2out_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_ce1_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            G2out_ce1 <= ap_const_logic_1;
        else 
            G2out_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    G2out_we0_assign_proc : process(grp_absorb_block_write_fu_949_output_r_we0, ap_CS_fsm_state19)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            G2out_we0 <= grp_absorb_block_write_fu_949_output_r_we0;
        else 
            G2out_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_address0_assign_proc : process(grp_vector_matrix_mul_fu_1031_S_address0, grp_shake_gen_S_E_fu_1099_S_address0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            S_1_address0 <= grp_shake_gen_S_E_fu_1099_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            S_1_address0 <= grp_vector_matrix_mul_fu_1031_S_address0;
        else 
            S_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_1_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_S_ce0, grp_shake_gen_S_E_fu_1099_S_ce0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            S_1_ce0 <= grp_shake_gen_S_E_fu_1099_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            S_1_ce0 <= grp_vector_matrix_mul_fu_1031_S_ce0;
        else 
            S_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_1_we0_assign_proc : process(grp_shake_gen_S_E_fu_1099_S_we0, ap_CS_fsm_state29)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            S_1_we0 <= grp_shake_gen_S_E_fu_1099_S_we0;
        else 
            S_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_address0_assign_proc : process(grp_vector_matrix_mul_fu_1031_S_address0, grp_shake_gen_S_E_fu_1099_S_address0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            S_2_address0 <= grp_shake_gen_S_E_fu_1099_S_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            S_2_address0 <= grp_vector_matrix_mul_fu_1031_S_address0;
        else 
            S_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    S_2_ce0_assign_proc : process(grp_vector_matrix_mul_fu_1031_S_ce0, grp_shake_gen_S_E_fu_1099_S_ce0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            S_2_ce0 <= grp_shake_gen_S_E_fu_1099_S_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            S_2_ce0 <= grp_vector_matrix_mul_fu_1031_S_ce0;
        else 
            S_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    S_2_we0_assign_proc : process(grp_shake_gen_S_E_fu_1099_S_we0, ap_CS_fsm_state26, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            S_2_we0 <= grp_shake_gen_S_E_fu_1099_S_we0;
        else 
            S_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    V_address0 <= zext_ln224_1_fu_1928_p1(6 - 1 downto 0);

    V_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            V_ce0 <= ap_const_logic_1;
        else 
            V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    V_ce1_assign_proc : process(trunc_ln121_reg_2181, grp_write_reset_mod_fu_1208_out_r_ce1, ap_CS_fsm_state31)
    begin
        if ((((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0)))) then 
            V_ce1 <= grp_write_reset_mod_fu_1208_out_r_ce1;
        else 
            V_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    V_we1_assign_proc : process(trunc_ln121_reg_2181, grp_write_reset_mod_fu_1208_out_r_we1, ap_CS_fsm_state31)
    begin
        if ((((trunc_ln121_reg_2181 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state31)) or ((ap_const_logic_1 = ap_CS_fsm_state31) and (trunc_ln121_reg_2181 = ap_const_lv1_0)))) then 
            V_we1 <= grp_write_reset_mod_fu_1208_out_r_we1;
        else 
            V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln183_fu_1697_p2 <= std_logic_vector(unsigned(shl_ln4_fu_1677_p3) + unsigned(zext_ln183_fu_1693_p1));
    add_ln194_fu_1737_p2 <= std_logic_vector(unsigned(add_ln183_fu_1697_p2) + unsigned(ap_const_lv12_640));
    add_ln198_1_fu_1801_p2 <= std_logic_vector(unsigned(phi_mul641_reg_885) + unsigned(ap_const_lv14_258));
    add_ln198_fu_1795_p2 <= std_logic_vector(unsigned(phi_mul_reg_874) + unsigned(ap_const_lv14_258));
    add_ln203_fu_1819_p2 <= std_logic_vector(unsigned(zext_ln121_reg_2171) + unsigned(ap_const_lv15_7B50));
    add_ln205_fu_1833_p2 <= std_logic_vector(unsigned(shl_ln7_fu_1825_p3) + unsigned(ap_const_lv8_B8));
    add_ln212_fu_1852_p2 <= std_logic_vector(unsigned(zext_ln121_1_reg_2176) + unsigned(ap_const_lv15_7B50));
    add_ln214_fu_1866_p2 <= std_logic_vector(unsigned(shl_ln6_fu_1858_p3) + unsigned(ap_const_lv8_B8));
    add_ln224_1_fu_1962_p2 <= std_logic_vector(unsigned(shl_ln224_1_fu_1951_p3) + unsigned(trunc_ln224_2_fu_1958_p1));
    add_ln224_fu_1923_p2 <= std_logic_vector(unsigned(shl_ln8_reg_2360) + unsigned(zext_ln224_fu_1919_p1));
    add_ln235_fu_2000_p2 <= std_logic_vector(unsigned(zext_ln235_1_fu_1996_p1) + unsigned(ap_const_lv7_3C));
    add_ln70_fu_1325_p2 <= std_logic_vector(unsigned(zext_ln70_fu_1309_p1) + unsigned(zext_ln70_1_fu_1321_p1));
    add_ln76_fu_1359_p2 <= std_logic_vector(unsigned(zext_ln76_fu_1343_p1) + unsigned(zext_ln76_1_fu_1355_p1));
    and_ln160_fu_1631_p2 <= (icmp_ln160_fu_1625_p2 and icmp_ln123_fu_1557_p2);
    and_ln170_fu_1665_p2 <= (icmp_ln170_fu_1653_p2 and icmp_ln170_1_fu_1659_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(8);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(11);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(33);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(38);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(43);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state12 <= ap_CS_fsm(10);
    ap_CS_fsm_state16 <= ap_CS_fsm(12);
    ap_CS_fsm_state17 <= ap_CS_fsm(13);
    ap_CS_fsm_state18 <= ap_CS_fsm(14);
    ap_CS_fsm_state19 <= ap_CS_fsm(15);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(16);
    ap_CS_fsm_state21 <= ap_CS_fsm(17);
    ap_CS_fsm_state22 <= ap_CS_fsm(18);
    ap_CS_fsm_state23 <= ap_CS_fsm(19);
    ap_CS_fsm_state24 <= ap_CS_fsm(20);
    ap_CS_fsm_state25 <= ap_CS_fsm(21);
    ap_CS_fsm_state26 <= ap_CS_fsm(22);
    ap_CS_fsm_state27 <= ap_CS_fsm(23);
    ap_CS_fsm_state28 <= ap_CS_fsm(24);
    ap_CS_fsm_state29 <= ap_CS_fsm(25);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(26);
    ap_CS_fsm_state31 <= ap_CS_fsm(27);
    ap_CS_fsm_state32 <= ap_CS_fsm(28);
    ap_CS_fsm_state33 <= ap_CS_fsm(29);
    ap_CS_fsm_state34 <= ap_CS_fsm(30);
    ap_CS_fsm_state35 <= ap_CS_fsm(31);
    ap_CS_fsm_state36 <= ap_CS_fsm(32);
    ap_CS_fsm_state39 <= ap_CS_fsm(34);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(35);
    ap_CS_fsm_state41 <= ap_CS_fsm(36);
    ap_CS_fsm_state42 <= ap_CS_fsm(37);
    ap_CS_fsm_state45 <= ap_CS_fsm(39);
    ap_CS_fsm_state46 <= ap_CS_fsm(40);
    ap_CS_fsm_state47 <= ap_CS_fsm(41);
    ap_CS_fsm_state48 <= ap_CS_fsm(42);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state52 <= ap_CS_fsm(44);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp1_stage0_11001_assign_proc : process(mu_in_rsp_empty_n, pk_rsp_empty_n, icmp_ln93_reg_2096, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_11001 <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((pk_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0)) or ((mu_in_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))));
    end process;


    ap_block_pp1_stage0_subdone_assign_proc : process(mu_in_rsp_empty_n, pk_rsp_empty_n, icmp_ln93_reg_2096, ap_enable_reg_pp1_iter1)
    begin
                ap_block_pp1_stage0_subdone <= ((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (((pk_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0)) or ((mu_in_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))));
    end process;

        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp4_stage0_11001_assign_proc : process(ss_req_full_n, icmp_ln245_reg_2413_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
                ap_block_pp4_stage0_11001 <= ((ss_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln245_reg_2413_pp4_iter1_reg = ap_const_lv1_0));
    end process;


    ap_block_pp4_stage0_subdone_assign_proc : process(ss_req_full_n, icmp_ln245_reg_2413_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
                ap_block_pp4_stage0_subdone <= ((ss_req_full_n = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (icmp_ln245_reg_2413_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state10_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state14_pp1_stage0_iter1_assign_proc : process(mu_in_rsp_empty_n, pk_rsp_empty_n, icmp_ln93_reg_2096)
    begin
                ap_block_state14_pp1_stage0_iter1 <= (((pk_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0)) or ((mu_in_rsp_empty_n = ap_const_logic_0) and (icmp_ln93_reg_2096 = ap_const_lv1_0)));
    end process;

        ap_block_state15_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state26_on_subcall_done_assign_proc : process(grp_shake_gen_S_E_fu_1099_ap_done, grp_pack_reset_fu_1168_ap_done)
    begin
                ap_block_state26_on_subcall_done <= ((grp_pack_reset_fu_1168_ap_done = ap_const_logic_0) or (grp_shake_gen_S_E_fu_1099_ap_done = ap_const_logic_0));
    end process;


    ap_block_state29_on_subcall_done_assign_proc : process(grp_absorb_block_write_fu_949_ap_done, grp_vector_matrix_mul_fu_1031_ap_done, grp_shake_gen_S_E_fu_1099_ap_done, grp_pack_reset_fu_1168_ap_done)
    begin
                ap_block_state29_on_subcall_done <= ((grp_pack_reset_fu_1168_ap_done = ap_const_logic_0) or (grp_shake_gen_S_E_fu_1099_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1031_ap_done = ap_const_logic_0) or (grp_absorb_block_write_fu_949_ap_done = ap_const_logic_0));
    end process;


    ap_block_state29_on_subcall_idle_assign_proc : process(grp_absorb_block_write_fu_949_ap_idle, grp_vector_matrix_mul_fu_1031_ap_idle, grp_shake_gen_S_E_fu_1099_ap_idle, grp_pack_reset_fu_1168_ap_idle)
    begin
                ap_block_state29_on_subcall_idle <= ((grp_pack_reset_fu_1168_ap_idle = ap_const_logic_0) or (grp_shake_gen_S_E_fu_1099_ap_idle = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1031_ap_idle = ap_const_logic_0) or (grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0));
    end process;


    ap_block_state31_on_subcall_done_assign_proc : process(trunc_ln121_reg_2181, grp_write_reset_mod_fu_1208_ap_done)
    begin
                ap_block_state31_on_subcall_done <= (((grp_write_reset_mod_fu_1208_ap_done = ap_const_logic_0) and (trunc_ln121_reg_2181 = ap_const_lv1_1)) or ((grp_write_reset_mod_fu_1208_ap_done = ap_const_logic_0) and (trunc_ln121_reg_2181 = ap_const_lv1_0)));
    end process;


    ap_block_state33_on_subcall_done_assign_proc : process(grp_absorb_block_write_fu_949_ap_done, grp_vector_matrix_mul_fu_1031_ap_done, grp_shake_gen_S_E_fu_1099_ap_done, grp_pack_reset_fu_1168_ap_done)
    begin
                ap_block_state33_on_subcall_done <= ((grp_pack_reset_fu_1168_ap_done = ap_const_logic_0) or (grp_shake_gen_S_E_fu_1099_ap_done = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1031_ap_done = ap_const_logic_0) or (grp_absorb_block_write_fu_949_ap_done = ap_const_logic_0));
    end process;


    ap_block_state33_on_subcall_idle_assign_proc : process(grp_absorb_block_write_fu_949_ap_idle, grp_vector_matrix_mul_fu_1031_ap_idle, grp_shake_gen_S_E_fu_1099_ap_idle, grp_pack_reset_fu_1168_ap_idle)
    begin
                ap_block_state33_on_subcall_idle <= ((grp_pack_reset_fu_1168_ap_idle = ap_const_logic_0) or (grp_shake_gen_S_E_fu_1099_ap_idle = ap_const_logic_0) or (grp_vector_matrix_mul_fu_1031_ap_idle = ap_const_logic_0) or (grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0));
    end process;

        ap_block_state37_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state38_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state43_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state44_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state49_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_on_subcall_done_assign_proc : process(trunc_ln52_reg_2045, grp_absorb_block_write_fu_949_ap_done, grp_read_input_1_fu_1199_ap_done)
    begin
                ap_block_state4_on_subcall_done <= (((grp_read_input_1_fu_1199_ap_done = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((grp_read_input_1_fu_1199_ap_done = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((grp_absorb_block_write_fu_949_ap_done = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_0)));
    end process;


    ap_block_state4_on_subcall_idle_assign_proc : process(trunc_ln52_reg_2045, grp_absorb_block_write_fu_949_ap_idle, grp_read_input_1_fu_1199_ap_idle)
    begin
                ap_block_state4_on_subcall_idle <= (((grp_read_input_1_fu_1199_ap_idle = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((grp_read_input_1_fu_1199_ap_idle = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (trunc_ln52_reg_2045 = ap_const_lv1_0)));
    end process;

        ap_block_state50_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state51_pp4_stage0_iter2_assign_proc : process(ss_req_full_n, icmp_ln245_reg_2413_pp4_iter1_reg)
    begin
                ap_block_state51_pp4_stage0_iter2 <= ((ss_req_full_n = ap_const_logic_0) and (icmp_ln245_reg_2413_pp4_iter1_reg = ap_const_lv1_0));
    end process;

        ap_block_state9_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state9_assign_proc : process(icmp_ln87_fu_1365_p2)
    begin
        if ((icmp_ln87_fu_1365_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state9 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state13_assign_proc : process(icmp_ln93_fu_1382_p2)
    begin
        if ((icmp_ln93_fu_1382_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state13 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state37_assign_proc : process(icmp_ln221_fu_1907_p2)
    begin
        if ((icmp_ln221_fu_1907_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state37 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state37 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state43_assign_proc : process(icmp_ln232_fu_1973_p2)
    begin
        if ((icmp_ln232_fu_1973_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state43 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state43 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state49_assign_proc : process(icmp_ln245_fu_2010_p2)
    begin
        if ((icmp_ln245_fu_2010_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state49 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state49 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter2)
    begin
        if (((ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_enable_reg_pp4_iter0)
    begin
        if (((ap_enable_reg_pp4_iter0 = ap_const_logic_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_2_phi_fu_844_p4_assign_proc : process(i_2_reg_840, icmp_ln93_reg_2096, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, i_9_reg_2100, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))) then 
            ap_phi_mux_i_2_phi_fu_844_p4 <= i_9_reg_2100;
        else 
            ap_phi_mux_i_2_phi_fu_844_p4 <= i_2_reg_840;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ct_address_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_address, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_address, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_address <= grp_read_input_2_fu_1186_out_r_address;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_address <= grp_absorb_block_write_fu_949_ct_address;
        else 
            ct_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct_dataout_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_dataout, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_dataout, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_dataout <= grp_read_input_2_fu_1186_out_r_dataout;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_dataout <= grp_absorb_block_write_fu_949_ct_dataout;
        else 
            ct_dataout <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    ct_req_din_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_req_din, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_req_din, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_req_din <= grp_read_input_2_fu_1186_out_r_req_din;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_req_din <= grp_absorb_block_write_fu_949_ct_req_din;
        else 
            ct_req_din <= 'X';
        end if; 
    end process;


    ct_req_write_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_req_write, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_req_write, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_req_write <= grp_read_input_2_fu_1186_out_r_req_write;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_req_write <= grp_absorb_block_write_fu_949_ct_req_write;
        else 
            ct_req_write <= 'X';
        end if; 
    end process;


    ct_rsp_read_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_rsp_read, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_rsp_read, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_rsp_read <= grp_read_input_2_fu_1186_out_r_rsp_read;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_rsp_read <= grp_absorb_block_write_fu_949_ct_rsp_read;
        else 
            ct_rsp_read <= 'X';
        end if; 
    end process;


    ct_size_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state47, trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, ap_CS_fsm_state8, ap_CS_fsm_state42, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_ap_idle, grp_absorb_block_write_fu_949_ct_size, grp_read_input_2_fu_1186_ap_idle, grp_read_input_2_fu_1186_out_r_size, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state41)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state41) or ((grp_read_input_2_fu_1186_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state42)))) then 
            ct_size <= grp_read_input_2_fu_1186_out_r_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state48)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state8)) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)) or ((grp_absorb_block_write_fu_949_ap_idle = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state19)))) then 
            ct_size <= grp_absorb_block_write_fu_949_ct_size;
        else 
            ct_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    empty_31_fu_1400_p1 <= mu_in_datain(8 - 1 downto 0);
    empty_32_fu_1414_p1 <= pk_datain(8 - 1 downto 0);
    end1_fu_1765_p2 <= std_logic_vector(unsigned(zext_ln183_1_fu_1703_p1) + unsigned(select_ln181_1_fu_1757_p3));
    end2_1_fu_1779_p3 <= 
        end2_fu_1725_p2 when (icmp_ln181_fu_1671_p2(0) = '1') else 
        add_ln194_fu_1737_p2;
    end2_fu_1725_p2 <= std_logic_vector(unsigned(zext_ln185_fu_1715_p1) + unsigned(ap_const_lv12_A02));
    grp_absorb_block_write_fu_949_ap_start <= grp_absorb_block_write_fu_949_ap_start_reg;

    grp_absorb_block_write_fu_949_begin_absorb_assign_proc : process(trunc_ln52_reg_2045, icmp_ln54_reg_2057, and_ln170_reg_2238, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_begin_absorb <= and_ln170_reg_2238;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19))) then 
            grp_absorb_block_write_fu_949_begin_absorb <= ap_const_lv1_1;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_begin_absorb <= icmp_ln54_reg_2057;
        else 
            grp_absorb_block_write_fu_949_begin_absorb <= "X";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_begin_write_assign_proc : process(trunc_ln52_reg_2045, and_ln170_reg_2238, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_begin_write <= and_ln170_reg_2238;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_begin_write <= ap_const_lv1_0;
        else 
            grp_absorb_block_write_fu_949_begin_write <= "X";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_ct_offset_assign_proc : process(trunc_ln52_reg_2045, add_ln203_reg_2302, add_ln212_reg_2332, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_absorb_block_write_fu_949_ct_offset <= add_ln212_reg_2332;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_absorb_block_write_fu_949_ct_offset <= add_ln203_reg_2302;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_ct_offset <= ap_const_lv15_258;
        else 
            grp_absorb_block_write_fu_949_ct_offset <= "XXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_inlen_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            grp_absorb_block_write_fu_949_inlen <= ap_const_lv9_12;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_inlen <= ap_const_lv9_96;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_absorb_block_write_fu_949_inlen <= ap_const_lv9_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_absorb_block_write_fu_949_inlen <= ap_const_lv9_53;
        elsif ((((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_inlen <= ap_const_lv9_A0;
        else 
            grp_absorb_block_write_fu_949_inlen <= "XXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_input_r_q0_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, shake_input_1_q0, shake_input_2_q0, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)))) then 
            grp_absorb_block_write_fu_949_input_r_q0 <= shake_input_2_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_input_r_q0 <= shake_input_1_q0;
        else 
            grp_absorb_block_write_fu_949_input_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_input_r_q1_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, shake_input_1_q1, shake_input_2_q1, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)))) then 
            grp_absorb_block_write_fu_949_input_r_q1 <= shake_input_2_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_input_r_q1 <= shake_input_1_q1;
        else 
            grp_absorb_block_write_fu_949_input_r_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_outlen_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_absorb_block_write_fu_949_outlen <= ap_const_lv7_20;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            grp_absorb_block_write_fu_949_outlen <= ap_const_lv7_10;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_outlen <= ap_const_lv7_0;
        else 
            grp_absorb_block_write_fu_949_outlen <= "XXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_reset_assign_proc : process(trunc_ln52_reg_2045, icmp_ln165_reg_2233, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_reset <= icmp_ln165_reg_2233;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_absorb_block_write_fu_949_reset <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_reset <= ap_const_lv1_0;
        else 
            grp_absorb_block_write_fu_949_reset <= "X";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_start_word_assign_proc : process(reg_1240, reg_1245, trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_start_word <= reg_1245;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            grp_absorb_block_write_fu_949_start_word <= ap_const_lv8_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_start_word <= reg_1240;
        else 
            grp_absorb_block_write_fu_949_start_word <= "XXXXXXXX";
        end if; 
    end process;


    grp_absorb_block_write_fu_949_write_len_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_CS_fsm_state48, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_absorb_block_write_fu_949_write_len <= ap_const_lv12_258;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            grp_absorb_block_write_fu_949_write_len <= ap_const_lv12_0;
        else 
            grp_absorb_block_write_fu_949_write_len <= "XXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_1229_p2 <= (tmp_12_reg_2213 xor ap_const_lv1_1);
    grp_pack_reset_fu_1168_ap_start <= grp_pack_reset_fu_1168_ap_start_reg;

    grp_pack_reset_fu_1168_begin_pack_assign_proc : process(and_ln160_reg_2228, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_pack_reset_fu_1168_begin_pack <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_pack_reset_fu_1168_begin_pack <= and_ln160_reg_2228;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_pack_reset_fu_1168_begin_pack <= ap_const_lv1_0;
        else 
            grp_pack_reset_fu_1168_begin_pack <= "X";
        end if; 
    end process;


    grp_pack_reset_fu_1168_begin_reset_assign_proc : process(icmp_ln123_reg_2193, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_pack_reset_fu_1168_begin_reset <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_pack_reset_fu_1168_begin_reset <= icmp_ln123_reg_2193;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_pack_reset_fu_1168_begin_reset <= ap_const_lv1_1;
        else 
            grp_pack_reset_fu_1168_begin_reset <= "X";
        end if; 
    end process;


    grp_pack_reset_fu_1168_in_r_q0_assign_proc : process(B_1_q0, B_2_q0, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_pack_reset_fu_1168_in_r_q0 <= B_1_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_pack_reset_fu_1168_in_r_q0 <= B_2_q0;
        else 
            grp_pack_reset_fu_1168_in_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pack_reset_fu_1168_in_r_q1_assign_proc : process(B_1_q1, B_2_q1, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_pack_reset_fu_1168_in_r_q1 <= B_1_q1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            grp_pack_reset_fu_1168_in_r_q1 <= B_2_q1;
        else 
            grp_pack_reset_fu_1168_in_r_q1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_pack_reset_fu_1168_inlen_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_pack_reset_fu_1168_inlen <= ap_const_lv11_40;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_pack_reset_fu_1168_inlen <= ap_const_lv11_280;
        else 
            grp_pack_reset_fu_1168_inlen <= "XXXXXXXXXXX";
        end if; 
    end process;


    grp_pack_reset_fu_1168_n_assign_proc : process(ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            grp_pack_reset_fu_1168_n <= ap_const_lv11_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_pack_reset_fu_1168_n <= ap_const_lv11_280;
        else 
            grp_pack_reset_fu_1168_n <= "XXXXXXXXXXX";
        end if; 
    end process;

    grp_read_input_1_fu_1199_ap_start <= grp_read_input_1_fu_1199_ap_start_reg;

    grp_read_input_1_fu_1199_in_offset_assign_proc : process(trunc_ln52_reg_2045, add_ln70_reg_2067, add_ln76_reg_2072, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
            if ((trunc_ln52_reg_2045 = ap_const_lv1_1)) then 
                grp_read_input_1_fu_1199_in_offset <= add_ln76_reg_2072;
            elsif ((trunc_ln52_reg_2045 = ap_const_lv1_0)) then 
                grp_read_input_1_fu_1199_in_offset <= add_ln70_reg_2067;
            else 
                grp_read_input_1_fu_1199_in_offset <= "XXXXXXXXXXXXX";
            end if;
        else 
            grp_read_input_1_fu_1199_in_offset <= "XXXXXXXXXXXXX";
        end if; 
    end process;

    grp_read_input_2_fu_1186_ap_start <= grp_read_input_2_fu_1186_ap_start_reg;
    grp_shake_gen_S_E_fu_1099_ap_start <= grp_shake_gen_S_E_fu_1099_ap_start_reg;

    grp_shake_gen_S_E_fu_1099_begin_r_assign_proc : process(icmp_ln150_reg_2218, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_shake_gen_S_E_fu_1099_begin_r <= icmp_ln150_reg_2218;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_begin_r <= ap_const_lv1_1;
        else 
            grp_shake_gen_S_E_fu_1099_begin_r <= "X";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1099_high1_assign_proc : process(end1_reg_2250, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_shake_gen_S_E_fu_1099_high1 <= end1_reg_2250;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_high1 <= ap_const_lv13_A0;
        else 
            grp_shake_gen_S_E_fu_1099_high1 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1099_high2_assign_proc : process(zext_ln201_1_reg_2292, zext_ln210_1_reg_2322, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_shake_gen_S_E_fu_1099_high2 <= zext_ln210_1_reg_2322;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_shake_gen_S_E_fu_1099_high2 <= zext_ln201_1_reg_2292;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_high2 <= ap_const_lv13_5A0;
        else 
            grp_shake_gen_S_E_fu_1099_high2 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1099_low1_assign_proc : process(sext_ln201_reg_2282, sext_ln210_reg_2312, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_shake_gen_S_E_fu_1099_low1 <= sext_ln210_reg_2312;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_shake_gen_S_E_fu_1099_low1 <= sext_ln201_reg_2282;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_low1 <= ap_const_lv14_0;
        else 
            grp_shake_gen_S_E_fu_1099_low1 <= "XXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1099_low2_assign_proc : process(zext_ln201_reg_2287, zext_ln210_reg_2317, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_shake_gen_S_E_fu_1099_low2 <= zext_ln210_reg_2317;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_shake_gen_S_E_fu_1099_low2 <= zext_ln201_reg_2287;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_low2 <= ap_const_lv13_500;
        else 
            grp_shake_gen_S_E_fu_1099_low2 <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_shake_gen_S_E_fu_1099_outlen_assign_proc : process(select_ln181_4_reg_2267, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            grp_shake_gen_S_E_fu_1099_outlen <= select_ln181_4_reg_2267;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            grp_shake_gen_S_E_fu_1099_outlen <= ap_const_lv13_A00;
        else 
            grp_shake_gen_S_E_fu_1099_outlen <= "XXXXXXXXXXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1031_E_q0_assign_proc : process(E_1_q0, E_2_q0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_vector_matrix_mul_fu_1031_E_q0 <= E_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_vector_matrix_mul_fu_1031_E_q0 <= E_2_q0;
        else 
            grp_vector_matrix_mul_fu_1031_E_q0 <= "XXXXX";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1031_S_q0_assign_proc : process(S_1_q0, S_2_q0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_vector_matrix_mul_fu_1031_S_q0 <= S_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_vector_matrix_mul_fu_1031_S_q0 <= S_2_q0;
        else 
            grp_vector_matrix_mul_fu_1031_S_q0 <= "XXXXX";
        end if; 
    end process;

    grp_vector_matrix_mul_fu_1031_ap_start <= grp_vector_matrix_mul_fu_1031_ap_start_reg;

    grp_vector_matrix_mul_fu_1031_begin_r_assign_proc : process(xor_ln202_reg_2297, xor_ln211_reg_2327, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_vector_matrix_mul_fu_1031_begin_r <= xor_ln211_reg_2327;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_vector_matrix_mul_fu_1031_begin_r <= xor_ln202_reg_2297;
        else 
            grp_vector_matrix_mul_fu_1031_begin_r <= "X";
        end if; 
    end process;


    grp_vector_matrix_mul_fu_1031_output_vec_q0_assign_proc : process(B_1_q0, B_2_q0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            grp_vector_matrix_mul_fu_1031_output_vec_q0 <= B_1_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            grp_vector_matrix_mul_fu_1031_output_vec_q0 <= B_2_q0;
        else 
            grp_vector_matrix_mul_fu_1031_output_vec_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_write_reset_mod_fu_1208_ap_start <= grp_write_reset_mod_fu_1208_ap_start_reg;

    grp_write_reset_mod_fu_1208_in_r_q0_assign_proc : process(trunc_ln121_reg_2181, B_1_q0, B_2_q0, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
            if ((trunc_ln121_reg_2181 = ap_const_lv1_1)) then 
                grp_write_reset_mod_fu_1208_in_r_q0 <= B_2_q0;
            elsif ((trunc_ln121_reg_2181 = ap_const_lv1_0)) then 
                grp_write_reset_mod_fu_1208_in_r_q0 <= B_1_q0;
            else 
                grp_write_reset_mod_fu_1208_in_r_q0 <= "XXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_write_reset_mod_fu_1208_in_r_q0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_write_reset_mod_fu_1208_out_offset_assign_proc : process(trunc_ln121_reg_2181, add_ln205_reg_2307, add_ln214_reg_2337, ap_CS_fsm_state31)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state31)) then
            if ((trunc_ln121_reg_2181 = ap_const_lv1_1)) then 
                grp_write_reset_mod_fu_1208_out_offset <= add_ln214_reg_2337;
            elsif ((trunc_ln121_reg_2181 = ap_const_lv1_0)) then 
                grp_write_reset_mod_fu_1208_out_offset <= add_ln205_reg_2307;
            else 
                grp_write_reset_mod_fu_1208_out_offset <= "XXXXXXXX";
            end if;
        else 
            grp_write_reset_mod_fu_1208_out_offset <= "XXXXXXXX";
        end if; 
    end process;

    i_10_fu_1476_p2 <= std_logic_vector(unsigned(i_3_reg_851) + unsigned(ap_const_lv3_1));
    i_11_fu_1551_p2 <= std_logic_vector(unsigned(ap_const_lv5_1) + unsigned(i_4_reg_862));
    i_12_fu_1979_p2 <= std_logic_vector(unsigned(i_6_reg_927) + unsigned(ap_const_lv4_1));
    i_13_fu_1879_p2 <= std_logic_vector(unsigned(i_5_reg_896) + unsigned(ap_const_lv4_1));
    i_14_fu_2016_p2 <= std_logic_vector(unsigned(i_7_reg_938) + unsigned(ap_const_lv4_1));
    i_8_fu_1271_p2 <= std_logic_vector(unsigned(ap_const_lv4_1) + unsigned(i_0_reg_818));
    i_9_fu_1388_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_2_phi_fu_844_p4) + unsigned(ap_const_lv4_1));
    i_fu_1371_p2 <= std_logic_vector(unsigned(i_1_reg_829) + unsigned(ap_const_lv4_1));
    icmp_ln110_fu_1470_p2 <= "1" when (i_3_reg_851 = ap_const_lv3_7) else "0";
    icmp_ln121_fu_1545_p2 <= "1" when (i_4_reg_862 = ap_const_lv5_11) else "0";
    icmp_ln123_fu_1557_p2 <= "1" when (unsigned(i_4_reg_862) < unsigned(ap_const_lv5_9)) else "0";
    icmp_ln134_fu_1579_p2 <= "1" when (tmp_11_fu_1569_p4 = ap_const_lv2_0) else "0";
    icmp_ln150_fu_1601_p2 <= "1" when (unsigned(i_4_reg_862) < unsigned(ap_const_lv5_F)) else "0";
    icmp_ln155_3_fu_1613_p2 <= "1" when (i_4_reg_862 = ap_const_lv5_8) else "0";
    icmp_ln155_fu_1607_p2 <= "1" when (i_4_reg_862 = ap_const_lv5_0) else "0";
    icmp_ln160_fu_1625_p2 <= "0" when (i_4_reg_862 = ap_const_lv5_0) else "1";
    icmp_ln165_fu_1637_p2 <= "1" when (i_4_reg_862 = ap_const_lv5_2) else "0";
    icmp_ln170_1_fu_1659_p2 <= "1" when (unsigned(i_4_reg_862) < unsigned(ap_const_lv5_A)) else "0";
    icmp_ln170_fu_1653_p2 <= "0" when (tmp_13_fu_1643_p4 = ap_const_lv4_0) else "1";
    icmp_ln181_fu_1671_p2 <= "1" when (unsigned(i_4_reg_862) > unsigned(ap_const_lv5_6)) else "0";
    icmp_ln218_fu_1873_p2 <= "1" when (i_5_reg_896 = ap_const_lv4_8) else "0";
    icmp_ln221_fu_1907_p2 <= "1" when (j_0_reg_907 = ap_const_lv4_8) else "0";
    icmp_ln232_fu_1973_p2 <= "1" when (i_6_reg_927 = ap_const_lv4_8) else "0";
    icmp_ln245_fu_2010_p2 <= "1" when (i_7_reg_938 = ap_const_lv4_8) else "0";
    icmp_ln248_fu_2027_p2 <= "1" when (i_7_reg_938 = ap_const_lv4_0) else "0";
    icmp_ln52_fu_1265_p2 <= "1" when (i_0_reg_818 = ap_const_lv4_8) else "0";
    icmp_ln54_fu_1277_p2 <= "0" when (i_0_reg_818 = ap_const_lv4_0) else "1";
    icmp_ln59_fu_1283_p2 <= "1" when (i_0_reg_818 = ap_const_lv4_7) else "0";
    icmp_ln87_fu_1365_p2 <= "1" when (i_1_reg_829 = ap_const_lv4_8) else "0";
    icmp_ln93_fu_1382_p2 <= "1" when (ap_phi_mux_i_2_phi_fu_844_p4 = ap_const_lv4_8) else "0";
    j_fu_1913_p2 <= std_logic_vector(unsigned(j_0_reg_907) + unsigned(ap_const_lv4_1));
    lshr_ln1_fu_1501_p4 <= G2out_q1(15 downto 8);
    lshr_ln_fu_1451_p4 <= G2out_q0(15 downto 8);
    mu_in_address <= ap_const_lv32_0;
    mu_in_dataout <= ap_const_lv16_0;
    mu_in_req_din <= ap_const_logic_0;

    mu_in_req_write_assign_proc : process(ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            mu_in_req_write <= ap_const_logic_1;
        else 
            mu_in_req_write <= ap_const_logic_0;
        end if; 
    end process;


    mu_in_rsp_read_assign_proc : process(icmp_ln93_reg_2096, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))) then 
            mu_in_rsp_read <= ap_const_logic_1;
        else 
            mu_in_rsp_read <= ap_const_logic_0;
        end if; 
    end process;

    mu_in_size <= ap_const_lv32_8;
    or_ln114_fu_1526_p2 <= (shl_ln114_fu_1520_p2 or ap_const_lv16_1F);
    or_ln155_fu_1619_p2 <= (icmp_ln155_fu_1607_p2 or icmp_ln155_3_fu_1613_p2);
    or_ln1_fu_1511_p3 <= (trunc_ln112_fu_1497_p1 & lshr_ln1_fu_1501_p4);
    or_ln_fu_1461_p3 <= (ap_const_lv8_96 & lshr_ln_fu_1451_p4);

    pk_address_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_address, grp_read_input_1_fu_1199_in_r_address, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_address <= ap_const_lv32_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_address <= grp_read_input_1_fu_1199_in_r_address;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_address <= grp_vector_matrix_mul_fu_1031_pk_address;
        else 
            pk_address <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk_dataout_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_dataout, grp_read_input_1_fu_1199_in_r_dataout, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_dataout <= grp_read_input_1_fu_1199_in_r_dataout;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_dataout <= grp_vector_matrix_mul_fu_1031_pk_dataout;
        else 
            pk_dataout <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    pk_req_din_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_req_din, grp_read_input_1_fu_1199_in_r_req_din, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_req_din <= ap_const_logic_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_req_din <= grp_read_input_1_fu_1199_in_r_req_din;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_req_din <= grp_vector_matrix_mul_fu_1031_pk_req_din;
        else 
            pk_req_din <= ap_const_logic_0;
        end if; 
    end process;


    pk_req_write_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_req_write, grp_read_input_1_fu_1199_in_r_req_write, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_req_write <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_req_write <= grp_read_input_1_fu_1199_in_r_req_write;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_req_write <= grp_vector_matrix_mul_fu_1031_pk_req_write;
        else 
            pk_req_write <= ap_const_logic_0;
        end if; 
    end process;


    pk_rsp_read_assign_proc : process(trunc_ln52_reg_2045, icmp_ln93_reg_2096, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0_11001, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_rsp_read, grp_read_input_1_fu_1199_in_r_rsp_read, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (icmp_ln93_reg_2096 = ap_const_lv1_0))) then 
            pk_rsp_read <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_rsp_read <= grp_read_input_1_fu_1199_in_r_rsp_read;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_rsp_read <= grp_vector_matrix_mul_fu_1031_pk_rsp_read;
        else 
            pk_rsp_read <= ap_const_logic_0;
        end if; 
    end process;


    pk_size_assign_proc : process(trunc_ln52_reg_2045, ap_CS_fsm_state28, ap_CS_fsm_state32, grp_vector_matrix_mul_fu_1031_pk_size, grp_read_input_1_fu_1199_in_r_size, ap_CS_fsm_state4, ap_CS_fsm_state3, ap_CS_fsm_state5, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_block_state4_on_subcall_idle, ap_block_state29_on_subcall_idle, ap_block_state33_on_subcall_idle, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            pk_size <= ap_const_lv32_8;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)) or ((ap_const_boolean_1 = ap_block_state4_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            pk_size <= grp_read_input_1_fu_1199_in_r_size;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state28) or ((ap_const_boolean_1 = ap_block_state33_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state33)) or ((ap_const_boolean_1 = ap_block_state29_on_subcall_idle) and (ap_const_logic_1 = ap_CS_fsm_state29)))) then 
            pk_size <= grp_vector_matrix_mul_fu_1031_pk_size;
        else 
            pk_size <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_separated_address0_assign_proc : process(ap_enable_reg_pp1_iter2, grp_vector_matrix_mul_fu_1031_seed_A_separated_address0, ap_block_pp1_stage0, ap_CS_fsm_state29, ap_CS_fsm_state33, zext_ln98_fu_1447_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            seed_A_separated_address0 <= zext_ln98_fu_1447_p1(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_A_separated_address0 <= grp_vector_matrix_mul_fu_1031_seed_A_separated_address0;
        else 
            seed_A_separated_address0 <= "XXXX";
        end if; 
    end process;


    seed_A_separated_ce0_assign_proc : process(ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter2, grp_vector_matrix_mul_fu_1031_seed_A_separated_ce0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            seed_A_separated_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_A_separated_ce0 <= grp_vector_matrix_mul_fu_1031_seed_A_separated_ce0;
        else 
            seed_A_separated_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_separated_ce1_assign_proc : process(grp_vector_matrix_mul_fu_1031_seed_A_separated_ce1, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_A_separated_ce1 <= grp_vector_matrix_mul_fu_1031_seed_A_separated_ce1;
        else 
            seed_A_separated_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_A_separated_d0_assign_proc : process(ap_enable_reg_pp1_iter2, grp_vector_matrix_mul_fu_1031_seed_A_separated_d0, ap_block_pp1_stage0, ap_CS_fsm_state29, ap_CS_fsm_state33, tmp_7_fu_1440_p3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            seed_A_separated_d0 <= tmp_7_fu_1440_p3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_A_separated_d0 <= grp_vector_matrix_mul_fu_1031_seed_A_separated_d0;
        else 
            seed_A_separated_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_A_separated_we0_assign_proc : process(ap_block_pp1_stage0_11001, icmp_ln93_reg_2096_pp1_iter1_reg, ap_enable_reg_pp1_iter2, grp_vector_matrix_mul_fu_1031_seed_A_separated_we0, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln93_reg_2096_pp1_iter1_reg = ap_const_lv1_0))) then 
            seed_A_separated_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_A_separated_we0 <= grp_vector_matrix_mul_fu_1031_seed_A_separated_we0;
        else 
            seed_A_separated_we0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_address0_assign_proc : process(zext_ln112_1_reg_2149, grp_shake_gen_S_E_fu_1099_input_r_address0, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state24)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            seed_SE_address0 <= ap_const_lv64_8(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            seed_SE_address0 <= zext_ln112_1_reg_2149(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            seed_SE_address0 <= ap_const_lv64_0(4 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_SE_address0 <= grp_shake_gen_S_E_fu_1099_input_r_address0;
        else 
            seed_SE_address0 <= "XXXX";
        end if; 
    end process;


    seed_SE_ce0_assign_proc : process(grp_shake_gen_S_E_fu_1099_input_r_ce0, ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            seed_SE_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_SE_ce0 <= grp_shake_gen_S_E_fu_1099_input_r_ce0;
        else 
            seed_SE_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_ce1_assign_proc : process(grp_shake_gen_S_E_fu_1099_input_r_ce1, ap_CS_fsm_state26, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state29))) then 
            seed_SE_ce1 <= grp_shake_gen_S_E_fu_1099_input_r_ce1;
        else 
            seed_SE_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    seed_SE_d0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state24, or_ln_fu_1461_p3, or_ln1_fu_1511_p3, or_ln114_fu_1526_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            seed_SE_d0 <= or_ln114_fu_1526_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            seed_SE_d0 <= or_ln1_fu_1511_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            seed_SE_d0 <= or_ln_fu_1461_p3;
        else 
            seed_SE_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    seed_SE_we0_assign_proc : process(ap_CS_fsm_state21, ap_CS_fsm_state23, ap_CS_fsm_state24)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state24))) then 
            seed_SE_we0 <= ap_const_logic_1;
        else 
            seed_SE_we0 <= ap_const_logic_0;
        end if; 
    end process;

    select_ln134_fu_1585_p3 <= 
        ap_const_lv10_280 when (icmp_ln134_fu_1579_p2(0) = '1') else 
        ap_const_lv10_8;
    select_ln181_1_fu_1757_p3 <= 
        ap_const_lv13_1C40 when (icmp_ln181_fu_1671_p2(0) = '1') else 
        ap_const_lv13_140;
    select_ln181_4_fu_1787_p3 <= 
        ap_const_lv13_580 when (icmp_ln181_fu_1671_p2(0) = '1') else 
        ap_const_lv13_A00;
    select_ln181_fu_1743_p3 <= 
        ap_const_lv13_1BA0 when (icmp_ln181_fu_1671_p2(0) = '1') else 
        ap_const_lv13_A0;
    select_ln59_fu_1289_p3 <= 
        ap_const_lv10_148 when (icmp_ln59_fu_1283_p2(0) = '1') else 
        ap_const_lv10_280;
        sext_ln201_fu_1807_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start1_reg_2244),14));

        sext_ln210_fu_1840_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(start1_reg_2244),14));


    shake_input_1_address0_assign_proc : process(ap_CS_fsm_state2, trunc_ln52_reg_2045, ap_CS_fsm_pp0_stage0, zext_ln90_reg_2086, ap_CS_fsm_pp3_stage0, ap_CS_fsm_state8, ap_enable_reg_pp0_iter1, ap_CS_fsm_state42, ap_enable_reg_pp3_iter1, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_input_r_address0, grp_pack_reset_fu_1168_out_r_address0, grp_read_input_2_fu_1186_in_r_address0, grp_read_input_1_fu_1199_out_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_block_pp0_stage0, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_block_pp3_stage0, zext_ln235_2_fu_2006_p1, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            shake_input_1_address0 <= ap_const_lv64_47(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            shake_input_1_address0 <= ap_const_lv64_45(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            shake_input_1_address0 <= zext_ln235_2_fu_2006_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            shake_input_1_address0 <= ap_const_lv64_12(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_input_1_address0 <= ap_const_lv64_10(10 - 1 downto 0);
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_address0 <= zext_ln90_reg_2086(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shake_input_1_address0 <= ap_const_lv64_14A(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shake_input_1_address0 <= ap_const_lv64_148(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1))) then 
            shake_input_1_address0 <= grp_read_input_1_fu_1199_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            shake_input_1_address0 <= grp_read_input_2_fu_1186_in_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            shake_input_1_address0 <= grp_pack_reset_fu_1168_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            shake_input_1_address0 <= grp_absorb_block_write_fu_949_input_r_address0;
        else 
            shake_input_1_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_address1_assign_proc : process(ap_CS_fsm_state2, trunc_ln52_reg_2045, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_input_r_address1, ap_CS_fsm_state4, ap_block_pp1_stage0, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state6, zext_ln96_fu_1428_p1, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            shake_input_1_address1 <= ap_const_lv64_46(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            shake_input_1_address1 <= ap_const_lv64_44(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            shake_input_1_address1 <= ap_const_lv64_13(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            shake_input_1_address1 <= ap_const_lv64_11(10 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            shake_input_1_address1 <= zext_ln96_fu_1428_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            shake_input_1_address1 <= ap_const_lv64_14B(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            shake_input_1_address1 <= ap_const_lv64_149(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            shake_input_1_address1 <= grp_absorb_block_write_fu_949_input_r_address1;
        else 
            shake_input_1_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_ce0_assign_proc : process(ap_CS_fsm_state2, trunc_ln52_reg_2045, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp0_iter1, ap_CS_fsm_state42, ap_enable_reg_pp3_iter1, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_input_r_ce0, grp_pack_reset_fu_1168_out_r_ce0, grp_read_input_2_fu_1186_in_r_ce0, grp_read_input_1_fu_1199_out_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            shake_input_1_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1))) then 
            shake_input_1_ce0 <= grp_read_input_1_fu_1199_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            shake_input_1_ce0 <= grp_read_input_2_fu_1186_in_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            shake_input_1_ce0 <= grp_pack_reset_fu_1168_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            shake_input_1_ce0 <= grp_absorb_block_write_fu_949_input_r_ce0;
        else 
            shake_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_ce1_assign_proc : process(ap_CS_fsm_state2, trunc_ln52_reg_2045, ap_block_pp1_stage0_11001, ap_CS_fsm_state8, ap_enable_reg_pp1_iter2, ap_CS_fsm_state48, grp_absorb_block_write_fu_949_input_r_ce1, ap_CS_fsm_state4, ap_CS_fsm_state19, ap_CS_fsm_state29, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1)))) then 
            shake_input_1_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state19) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0)))) then 
            shake_input_1_ce1 <= grp_absorb_block_write_fu_949_input_r_ce1;
        else 
            shake_input_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_d0_assign_proc : process(ap_CS_fsm_state2, G2in_q0, trunc_ln52_reg_2045, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter1, G2out_q1, grp_pack_reset_fu_1168_out_r_d0, grp_read_input_1_fu_1199_out_r_d0, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_block_pp0_stage0, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_block_pp3_stage0, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (ap_const_boolean_0 = ap_block_pp3_stage0))) then 
            shake_input_1_d0 <= G2out_q1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            shake_input_1_d0 <= G2in_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state6))) then 
            shake_input_1_d0 <= ap_const_lv16_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shake_input_1_d0 <= ap_const_lv16_1F00;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1))) then 
            shake_input_1_d0 <= grp_read_input_1_fu_1199_out_r_d0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            shake_input_1_d0 <= grp_pack_reset_fu_1168_out_r_d0;
        else 
            shake_input_1_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_d1_assign_proc : process(ap_CS_fsm_state2, mu_in_read_reg_2111, ap_enable_reg_pp1_iter2, ap_block_pp1_stage0, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            shake_input_1_d1 <= ap_const_lv16_1F00;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1))) then 
            shake_input_1_d1 <= mu_in_read_reg_2111;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            shake_input_1_d1 <= ap_const_lv16_0;
        else 
            shake_input_1_d1 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_input_1_we0_assign_proc : process(ap_CS_fsm_state2, icmp_ln52_fu_1265_p2, trunc_ln52_reg_2045, icmp_ln87_reg_2077, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, icmp_ln232_reg_2394, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp0_iter1, ap_enable_reg_pp3_iter1, grp_pack_reset_fu_1168_out_r_we0, grp_read_input_1_fu_1199_out_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state26, ap_CS_fsm_state33, ap_CS_fsm_state40, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0) and (icmp_ln232_reg_2394 = ap_const_lv1_0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln87_reg_2077 = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_1)))) then 
            shake_input_1_we0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1))) then 
            shake_input_1_we0 <= grp_read_input_1_fu_1199_out_r_we0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state33))) then 
            shake_input_1_we0 <= grp_pack_reset_fu_1168_out_r_we0;
        else 
            shake_input_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_1_we1_assign_proc : process(ap_CS_fsm_state2, icmp_ln52_fu_1265_p2, ap_block_pp1_stage0_11001, icmp_ln93_reg_2096_pp1_iter1_reg, ap_enable_reg_pp1_iter2, ap_CS_fsm_state6, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state45, ap_CS_fsm_state46)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state6) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter2 = ap_const_logic_1) and (icmp_ln93_reg_2096_pp1_iter1_reg = ap_const_lv1_0)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and (icmp_ln52_fu_1265_p2 = ap_const_lv1_1)))) then 
            shake_input_1_we1 <= ap_const_logic_1;
        else 
            shake_input_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_address0_assign_proc : process(trunc_ln52_reg_2045, grp_absorb_block_write_fu_949_input_r_address0, grp_pack_reset_fu_1168_out_r_address0, grp_read_input_1_fu_1199_out_r_address0, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0))) then 
            shake_input_2_address0 <= grp_read_input_1_fu_1199_out_r_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            shake_input_2_address0 <= grp_pack_reset_fu_1168_out_r_address0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)))) then 
            shake_input_2_address0 <= grp_absorb_block_write_fu_949_input_r_address0;
        else 
            shake_input_2_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    shake_input_2_ce0_assign_proc : process(trunc_ln52_reg_2045, grp_absorb_block_write_fu_949_input_r_ce0, grp_pack_reset_fu_1168_out_r_ce0, grp_read_input_1_fu_1199_out_r_ce0, ap_CS_fsm_state4, ap_CS_fsm_state29, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0))) then 
            shake_input_2_ce0 <= grp_read_input_1_fu_1199_out_r_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            shake_input_2_ce0 <= grp_pack_reset_fu_1168_out_r_ce0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)))) then 
            shake_input_2_ce0 <= grp_absorb_block_write_fu_949_input_r_ce0;
        else 
            shake_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_ce1_assign_proc : process(trunc_ln52_reg_2045, grp_absorb_block_write_fu_949_input_r_ce1, ap_CS_fsm_state4, ap_CS_fsm_state33)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state33) or ((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_1)))) then 
            shake_input_2_ce1 <= grp_absorb_block_write_fu_949_input_r_ce1;
        else 
            shake_input_2_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    shake_input_2_d0_assign_proc : process(trunc_ln52_reg_2045, grp_pack_reset_fu_1168_out_r_d0, grp_read_input_1_fu_1199_out_r_d0, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0))) then 
            shake_input_2_d0 <= grp_read_input_1_fu_1199_out_r_d0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            shake_input_2_d0 <= grp_pack_reset_fu_1168_out_r_d0;
        else 
            shake_input_2_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    shake_input_2_we0_assign_proc : process(trunc_ln52_reg_2045, grp_pack_reset_fu_1168_out_r_we0, grp_read_input_1_fu_1199_out_r_we0, ap_CS_fsm_state4, ap_CS_fsm_state29)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) and (trunc_ln52_reg_2045 = ap_const_lv1_0))) then 
            shake_input_2_we0 <= grp_read_input_1_fu_1199_out_r_we0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            shake_input_2_we0 <= grp_pack_reset_fu_1168_out_r_we0;
        else 
            shake_input_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    shl_ln114_fu_1520_p2 <= std_logic_vector(shift_left(unsigned(G2out_q0),to_integer(unsigned('0' & ap_const_lv16_8(16-1 downto 0)))));
    shl_ln183_1_fu_1685_p3 <= (i_4_reg_862 & ap_const_lv5_0);
    shl_ln224_1_fu_1951_p3 <= (trunc_ln224_1_reg_2384 & ap_const_lv13_0);
    shl_ln2_fu_1301_p3 <= (trunc_ln70_fu_1297_p1 & ap_const_lv9_0);
    shl_ln4_fu_1677_p3 <= (i_4_reg_862 & ap_const_lv7_0);
    shl_ln5_fu_1707_p3 <= (i_4_reg_862 & ap_const_lv1_0);
    shl_ln6_fu_1858_p3 <= (i_4_reg_862 & ap_const_lv3_0);
    shl_ln70_1_fu_1313_p3 <= (trunc_ln70_fu_1297_p1 & ap_const_lv7_0);
    shl_ln76_1_fu_1347_p3 <= (trunc_ln76_fu_1331_p1 & ap_const_lv7_0);
    shl_ln7_fu_1825_p3 <= (i_4_reg_862 & ap_const_lv3_0);
    shl_ln8_fu_1900_p3 <= (trunc_ln224_reg_2355 & ap_const_lv3_0);
    shl_ln_fu_1335_p3 <= (trunc_ln76_fu_1331_p1 & ap_const_lv9_0);
    ss_address <= ap_const_lv32_0;
    ss_dataout <= reg_1250;

    ss_req_din_assign_proc : process(icmp_ln245_reg_2413_pp4_iter1_reg, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0_11001, icmp_ln248_reg_2427_pp4_iter1_reg)
    begin
        if ((((icmp_ln248_reg_2427_pp4_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln245_reg_2413_pp4_iter1_reg = ap_const_lv1_0)))) then 
            ss_req_din <= ap_const_logic_1;
        else 
            ss_req_din <= ap_const_logic_0;
        end if; 
    end process;


    ss_req_write_assign_proc : process(icmp_ln245_reg_2413_pp4_iter1_reg, ap_enable_reg_pp4_iter2, ap_block_pp4_stage0_11001, icmp_ln248_reg_2427_pp4_iter1_reg)
    begin
        if ((((icmp_ln248_reg_2427_pp4_iter1_reg = ap_const_lv1_1) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001)) or ((ap_enable_reg_pp4_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (icmp_ln245_reg_2413_pp4_iter1_reg = ap_const_lv1_0)))) then 
            ss_req_write <= ap_const_logic_1;
        else 
            ss_req_write <= ap_const_logic_0;
        end if; 
    end process;

    ss_rsp_read <= ap_const_logic_0;
    ss_size <= ap_const_lv32_8;
    start1_fu_1751_p2 <= std_logic_vector(unsigned(zext_ln183_1_fu_1703_p1) + unsigned(select_ln181_fu_1743_p3));
    start2_1_fu_1731_p2 <= std_logic_vector(unsigned(add_ln183_fu_1697_p2) + unsigned(ap_const_lv12_5A0));
    start2_2_fu_1771_p3 <= 
        start2_fu_1719_p2 when (icmp_ln181_fu_1671_p2(0) = '1') else 
        start2_1_fu_1731_p2;
    start2_fu_1719_p2 <= std_logic_vector(unsigned(zext_ln185_fu_1715_p1) + unsigned(ap_const_lv12_9F2));
    temp_5_fu_1937_p4 <= temp_0_reg_918(15 downto 2);
    temp_6_fu_1947_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_5_fu_1937_p4),16));
    tmp_11_fu_1569_p4 <= i_4_reg_862(4 downto 3);
    tmp_13_fu_1643_p4 <= i_4_reg_862(4 downto 1);
    tmp_5_fu_1433_p3 <= (empty_31_reg_2116 & p_1_reg_2121);
    tmp_7_fu_1440_p3 <= (empty_32_reg_2126 & p_2_reg_2131);
    trunc_ln112_fu_1497_p1 <= G2out_q0(8 - 1 downto 0);
    trunc_ln121_fu_1541_p1 <= i_4_reg_862(1 - 1 downto 0);
    trunc_ln224_1_fu_1933_p1 <= temp_0_reg_918(2 - 1 downto 0);
    trunc_ln224_2_fu_1958_p1 <= V_q0(15 - 1 downto 0);
    trunc_ln224_fu_1896_p1 <= i_5_reg_896(3 - 1 downto 0);
    trunc_ln52_fu_1261_p1 <= i_0_reg_818(1 - 1 downto 0);
    trunc_ln70_fu_1297_p1 <= i_0_reg_818(3 - 1 downto 0);
    trunc_ln76_fu_1331_p1 <= i_0_reg_818(3 - 1 downto 0);
    xor_ln123_fu_1563_p2 <= (icmp_ln123_fu_1557_p2 xor ap_const_lv1_1);
    xor_ln220_fu_1885_p2 <= (i_5_reg_896 xor ap_const_lv4_8);
    xor_ln235_fu_1985_p2 <= (i_6_reg_927 xor ap_const_lv4_8);
    xor_ln96_fu_1394_p2 <= (ap_phi_mux_i_2_phi_fu_844_p4 xor ap_const_lv4_8);
    zext_ln112_1_fu_1487_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_10_fu_1476_p2),64));
    zext_ln112_fu_1482_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_3_reg_851),64));
    zext_ln121_1_fu_1537_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul641_reg_885),15));
    zext_ln121_fu_1533_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(phi_mul_reg_874),15));
    zext_ln183_1_fu_1703_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln183_fu_1697_p2),13));
    zext_ln183_fu_1693_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln183_1_fu_1685_p3),12));
    zext_ln185_fu_1715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln5_fu_1707_p3),12));
    zext_ln201_1_fu_1815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end2_1_reg_2261),13));
    zext_ln201_fu_1811_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start2_2_reg_2255),13));
    zext_ln210_1_fu_1848_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(end2_1_reg_2261),13));
    zext_ln210_fu_1844_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start2_2_reg_2255),13));
    zext_ln220_fu_1891_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln220_fu_1885_p2),64));
    zext_ln224_1_fu_1928_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_fu_1923_p2),64));
    zext_ln224_2_fu_1968_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln224_1_fu_1962_p2),16));
    zext_ln224_fu_1919_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_907),6));
    zext_ln235_1_fu_1996_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_6_reg_927),7));
    zext_ln235_2_fu_2006_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln235_reg_2408),64));
    zext_ln235_fu_1991_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln235_fu_1985_p2),64));
    zext_ln248_fu_2022_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_938),64));
    zext_ln70_1_fu_1321_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln70_1_fu_1313_p3),13));
    zext_ln70_fu_1309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln2_fu_1301_p3),13));
    zext_ln76_1_fu_1355_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln76_1_fu_1347_p3),13));
    zext_ln76_fu_1343_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_1335_p3),13));
    zext_ln90_fu_1377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_829),64));
    zext_ln96_fu_1428_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(xor_ln96_reg_2106_pp1_iter1_reg),64));
    zext_ln98_fu_1447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_2100_pp1_iter1_reg),64));
end behav;
