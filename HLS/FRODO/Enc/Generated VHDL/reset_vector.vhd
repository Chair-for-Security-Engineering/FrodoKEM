-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity reset_vector is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    vec_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    vec_ce0 : OUT STD_LOGIC;
    vec_we0 : OUT STD_LOGIC;
    vec_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    n : IN STD_LOGIC_VECTOR (9 downto 0);
    begin_r : IN STD_LOGIC_VECTOR (0 downto 0) );
end;


architecture behav of reset_vector is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (1 downto 0) := "01";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal begin_read_read_fu_36_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_78_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_0_reg_62 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln288_fu_73_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln290_fu_84_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (1 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_62_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((begin_read_read_fu_36_p2 = ap_const_lv1_1)) then
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    i_0_reg_62 <= ap_const_lv10_0;
                elsif (((icmp_ln288_fu_73_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    i_0_reg_62 <= i_fu_78_p2;
                end if;
            end if; 
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, begin_read_read_fu_36_p2, ap_CS_fsm_state2, icmp_ln288_fu_73_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln288_fu_73_p2 = ap_const_lv1_1) or (begin_read_read_fu_36_p2 = ap_const_lv1_0)))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when others =>  
                ap_NS_fsm <= "XX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, begin_read_read_fu_36_p2, ap_CS_fsm_state2, icmp_ln288_fu_73_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln288_fu_73_p2 = ap_const_lv1_1) or (begin_read_read_fu_36_p2 = ap_const_lv1_0))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(begin_read_read_fu_36_p2, ap_CS_fsm_state2, icmp_ln288_fu_73_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and ((icmp_ln288_fu_73_p2 = ap_const_lv1_1) or (begin_read_read_fu_36_p2 = ap_const_lv1_0)))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    begin_read_read_fu_36_p2 <= begin_r;
    i_fu_78_p2 <= std_logic_vector(unsigned(i_0_reg_62) + unsigned(ap_const_lv10_1));
    icmp_ln288_fu_73_p2 <= "1" when (i_0_reg_62 = n) else "0";
    vec_address0 <= zext_ln290_fu_84_p1(10 - 1 downto 0);

    vec_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            vec_ce0 <= ap_const_logic_1;
        else 
            vec_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    vec_d0 <= ap_const_lv16_0;

    vec_we0_assign_proc : process(begin_read_read_fu_36_p2, ap_CS_fsm_state2, icmp_ln288_fu_73_p2)
    begin
        if (((icmp_ln288_fu_73_p2 = ap_const_lv1_0) and (begin_read_read_fu_36_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            vec_we0 <= ap_const_logic_1;
        else 
            vec_we0 <= ap_const_logic_0;
        end if; 
    end process;

    zext_ln290_fu_84_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_62),64));
end behav;
