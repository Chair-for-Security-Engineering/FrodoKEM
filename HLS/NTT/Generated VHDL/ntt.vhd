-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ntt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    a_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce0 : OUT STD_LOGIC;
    a_coeffs_we0 : OUT STD_LOGIC;
    a_coeffs_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_address1 : OUT STD_LOGIC_VECTOR (9 downto 0);
    a_coeffs_ce1 : OUT STD_LOGIC;
    a_coeffs_we1 : OUT STD_LOGIC;
    a_coeffs_d1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    a_coeffs_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    omega_coeffs_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    omega_coeffs_ce0 : OUT STD_LOGIC;
    omega_coeffs_q0 : IN STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of ntt is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ntt,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.000000,HLS_SYN_LAT=30721,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=291,HLS_SYN_LUT=815,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv17_2FFF : STD_LOGIC_VECTOR (16 downto 0) := "00010111111111111";
    constant ap_const_lv17_3001 : STD_LOGIC_VECTOR (16 downto 0) := "00011000000000001";
    constant ap_const_lv13_1400 : STD_LOGIC_VECTOR (12 downto 0) := "1010000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv9_1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv17_3FF : STD_LOGIC_VECTOR (16 downto 0) := "00000001111111111";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_F004 : STD_LOGIC_VECTOR (15 downto 0) := "1111000000000100";
    constant ap_const_lv16_C003 : STD_LOGIC_VECTOR (15 downto 0) := "1100000000000011";
    constant ap_const_lv17_9003 : STD_LOGIC_VECTOR (16 downto 0) := "01001000000000011";
    constant ap_const_lv16_9002 : STD_LOGIC_VECTOR (15 downto 0) := "1001000000000010";
    constant ap_const_lv16_6001 : STD_LOGIC_VECTOR (15 downto 0) := "0110000000000001";
    constant ap_const_lv16_9FFE : STD_LOGIC_VECTOR (15 downto 0) := "1001111111111110";
    constant ap_const_lv16_3000 : STD_LOGIC_VECTOR (15 downto 0) := "0011000000000000";
    constant ap_const_lv16_6FFD : STD_LOGIC_VECTOR (15 downto 0) := "0110111111111101";
    constant ap_const_lv16_3FFC : STD_LOGIC_VECTOR (15 downto 0) := "0011111111111100";
    constant ap_const_lv16_FFB : STD_LOGIC_VECTOR (15 downto 0) := "0000111111111011";
    constant ap_const_lv16_CFFF : STD_LOGIC_VECTOR (15 downto 0) := "1100111111111111";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_fu_199_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_reg_649 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal icmp_ln31_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal a_coeffs_addr_reg_659 : STD_LOGIC_VECTOR (9 downto 0);
    signal a_coeffs_addr_1_reg_664 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_1_reg_669 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_2_fu_338_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal distance_2_reg_677 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_2_fu_354_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_2_reg_682 : STD_LOGIC_VECTOR (9 downto 0);
    signal select_ln75_fu_370_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln75_reg_687 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_3_fu_386_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_3_reg_692 : STD_LOGIC_VECTOR (15 downto 0);
    signal W_fu_394_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal W_reg_697 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal x_fu_414_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_reg_702 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln40_fu_420_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln40_reg_714 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln42_reg_721 : STD_LOGIC_VECTOR (0 downto 0);
    signal sub_ln53_fu_446_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln53_reg_727 : STD_LOGIC_VECTOR (16 downto 0);
    signal x_2_fu_607_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal x_2_reg_732 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_mul_fu_185_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal red_in_reg_737 : STD_LOGIC_VECTOR (31 downto 0);
    signal u_1_fu_619_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal u_1_reg_743 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal u_2_reg_748 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal grp_mul_fu_185_ap_ready : STD_LOGIC;
    signal grp_mul_fu_185_a : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_mul_fu_185_b : STD_LOGIC_VECTOR (16 downto 0);
    signal i_0_reg_130 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal distance_0_reg_141 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_0_reg_152 : STD_LOGIC_VECTOR (9 downto 0);
    signal jTwiddle_0_reg_163 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_0_reg_174 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_fu_615_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln56_fu_623_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln33_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln34_fu_216_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_2_fu_239_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln35_fu_221_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln35_1_fu_225_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln35_fu_233_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal shl_ln_fu_252_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln68_fu_260_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln68_fu_264_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln70_fu_276_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln75_fu_286_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln75_fu_290_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal zext_ln35_3_fu_229_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal start_fu_302_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln68_fu_270_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_fu_312_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal icmp_ln75_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln68_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln75_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal distance_1_fu_318_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal start_1_fu_346_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal jTwiddle_fu_205_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal select_ln68_fu_362_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal j_fu_280_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_1_fu_308_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal j_2_fu_378_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal temp_fu_398_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal adistance_fu_402_p1 : STD_LOGIC_VECTOR (14 downto 0);
    signal zext_ln37_fu_406_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln37_1_fu_410_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln53_1_fu_432_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal add_ln53_fu_440_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal zext_ln53_2_fu_436_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal xor_ln38_fu_452_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln40_1_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_1_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln40_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln42_fu_501_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln44_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln42_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln44_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln46_fu_462_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_524_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_1_fu_467_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln46_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_1_fu_548_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln42_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln40_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_2_fu_567_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal icmp_ln48_fu_472_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_fu_536_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln38_fu_556_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln38_1_fu_561_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln38_2_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln38_1_fu_575_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal or_ln38_3_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln38_3_fu_586_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln38_4_fu_600_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln59_fu_627_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_fu_631_p4 : STD_LOGIC_VECTOR (13 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);

    component mul IS
    port (
        ap_ready : OUT STD_LOGIC;
        a : IN STD_LOGIC_VECTOR (31 downto 0);
        b : IN STD_LOGIC_VECTOR (16 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_mul_fu_185 : component mul
    port map (
        ap_ready => grp_mul_fu_185_ap_ready,
        a => grp_mul_fu_185_a,
        b => grp_mul_fu_185_b,
        ap_return => grp_mul_fu_185_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    distance_0_reg_141_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                distance_0_reg_141 <= distance_2_reg_677;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                distance_0_reg_141 <= ap_const_lv10_1;
            end if; 
        end if;
    end process;

    i_0_reg_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                i_0_reg_130 <= i_reg_649;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_0_reg_130 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;

    jTwiddle_0_reg_163_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                jTwiddle_0_reg_163 <= select_ln75_reg_687;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                jTwiddle_0_reg_163 <= ap_const_lv9_0;
            end if; 
        end if;
    end process;

    j_0_reg_174_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                j_0_reg_174 <= j_3_reg_692;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                j_0_reg_174 <= ap_const_lv16_0;
            end if; 
        end if;
    end process;

    start_0_reg_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                start_0_reg_152 <= start_2_reg_682;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                start_0_reg_152 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                W_reg_697 <= W_fu_394_p1;
                icmp_ln40_reg_714 <= icmp_ln40_fu_420_p2;
                icmp_ln42_reg_721 <= icmp_ln42_fu_426_p2;
                sub_ln53_reg_727 <= sub_ln53_fu_446_p2;
                x_reg_702 <= x_fu_414_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln31_fu_193_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                a_coeffs_addr_1_reg_664 <= zext_ln35_2_fu_239_p1(10 - 1 downto 0);
                a_coeffs_addr_reg_659 <= zext_ln34_fu_216_p1(10 - 1 downto 0);
                distance_2_reg_677 <= distance_2_fu_338_p3;
                j_3_reg_692 <= j_3_fu_386_p3;
                select_ln75_reg_687 <= select_ln75_fu_370_p3;
                start_2_reg_682 <= start_2_fu_354_p3;
                tmp_1_reg_669 <= i_0_reg_130(9 downto 9);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_649 <= i_fu_199_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                red_in_reg_737 <= grp_mul_fu_185_ap_return;
                x_2_reg_732 <= x_2_fu_607_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                u_1_reg_743 <= u_1_fu_619_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                u_2_reg_748 <= grp_mul_fu_185_ap_return;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln31_fu_193_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln31_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;
    W_fu_394_p1 <= omega_coeffs_q0(14 - 1 downto 0);

    a_coeffs_address0_assign_proc : process(ap_CS_fsm_state2, a_coeffs_addr_reg_659, ap_CS_fsm_state5, zext_ln34_fu_216_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_coeffs_address0 <= a_coeffs_addr_reg_659;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address0 <= zext_ln34_fu_216_p1(10 - 1 downto 0);
        else 
            a_coeffs_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_address1_assign_proc : process(ap_CS_fsm_state2, a_coeffs_addr_1_reg_664, ap_CS_fsm_state7, zext_ln35_2_fu_239_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_coeffs_address1 <= a_coeffs_addr_1_reg_664;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            a_coeffs_address1 <= zext_ln35_2_fu_239_p1(10 - 1 downto 0);
        else 
            a_coeffs_address1 <= "XXXXXXXXXX";
        end if; 
    end process;


    a_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            a_coeffs_ce0 <= ap_const_logic_1;
        else 
            a_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    a_coeffs_ce1_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            a_coeffs_ce1 <= ap_const_logic_1;
        else 
            a_coeffs_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    a_coeffs_d0 <= x_2_reg_732;
    a_coeffs_d1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_631_p4),16));

    a_coeffs_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            a_coeffs_we0 <= ap_const_logic_1;
        else 
            a_coeffs_we0 <= ap_const_logic_0;
        end if; 
    end process;


    a_coeffs_we1_assign_proc : process(ap_CS_fsm_state7)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            a_coeffs_we1 <= ap_const_logic_1;
        else 
            a_coeffs_we1 <= ap_const_logic_0;
        end if; 
    end process;

    add_ln35_fu_233_p2 <= std_logic_vector(unsigned(zext_ln35_fu_221_p1) + unsigned(zext_ln35_1_fu_225_p1));
    add_ln38_1_fu_575_p2 <= std_logic_vector(unsigned(x_reg_702) + unsigned(select_ln38_2_fu_567_p3));
    add_ln38_fu_556_p2 <= std_logic_vector(unsigned(x_reg_702) + unsigned(select_ln38_1_fu_548_p3));
    add_ln53_fu_440_p2 <= std_logic_vector(unsigned(ap_const_lv17_9003) + unsigned(zext_ln53_1_fu_432_p1));
    add_ln59_fu_627_p2 <= std_logic_vector(unsigned(u_2_reg_748) + unsigned(red_in_reg_737));
    add_ln68_fu_264_p2 <= std_logic_vector(unsigned(zext_ln68_fu_260_p1) + unsigned(zext_ln35_fu_221_p1));
    add_ln75_fu_290_p2 <= std_logic_vector(unsigned(ap_const_lv11_1) + unsigned(zext_ln75_fu_286_p1));
    adistance_fu_402_p1 <= a_coeffs_q1(15 - 1 downto 0);
    and_ln40_1_fu_491_p2 <= (xor_ln40_1_fu_486_p2 and tmp_1_reg_669);
    and_ln40_fu_477_p2 <= (tmp_1_reg_669 and icmp_ln40_reg_714);
    and_ln42_fu_496_p2 <= (icmp_ln42_reg_721 and and_ln40_1_fu_491_p2);
    and_ln44_fu_512_p2 <= (xor_ln42_fu_506_p2 and icmp_ln44_fu_457_p2);
    and_ln46_fu_530_p2 <= (xor_ln44_fu_524_p2 and icmp_ln46_fu_462_p2);
    and_ln75_fu_332_p2 <= (xor_ln68_fu_326_p2 and icmp_ln75_fu_296_p2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_193_p2)
    begin
        if (((icmp_ln31_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln31_fu_193_p2)
    begin
        if (((icmp_ln31_fu_193_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    distance_1_fu_318_p3 <= 
        distance_0_reg_141 when (icmp_ln68_fu_270_p2(0) = '1') else 
        distance_fu_312_p2;
    distance_2_fu_338_p3 <= 
        distance_0_reg_141 when (and_ln75_fu_332_p2(0) = '1') else 
        distance_1_fu_318_p3;
    distance_fu_312_p2 <= std_logic_vector(shift_left(unsigned(distance_0_reg_141),to_integer(unsigned('0' & ap_const_lv10_1(10-1 downto 0)))));

    grp_mul_fu_185_a_assign_proc : process(ap_CS_fsm_state4, red_in_reg_737, ap_CS_fsm_state5, ap_CS_fsm_state6, zext_ln53_fu_615_p1, zext_ln56_fu_623_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mul_fu_185_a <= zext_ln56_fu_623_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_mul_fu_185_a <= red_in_reg_737;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_mul_fu_185_a <= zext_ln53_fu_615_p1;
        else 
            grp_mul_fu_185_a <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_mul_fu_185_b_assign_proc : process(sub_ln53_reg_727, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            grp_mul_fu_185_b <= ap_const_lv17_3001;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_mul_fu_185_b <= ap_const_lv17_2FFF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            grp_mul_fu_185_b <= sub_ln53_reg_727;
        else 
            grp_mul_fu_185_b <= "XXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_199_p2 <= std_logic_vector(unsigned(ap_const_lv13_1) + unsigned(i_0_reg_130));
    icmp_ln31_fu_193_p2 <= "1" when (i_0_reg_130 = ap_const_lv13_1400) else "0";
    icmp_ln40_fu_420_p2 <= "1" when (unsigned(x_fu_414_p2) > unsigned(ap_const_lv16_F004)) else "0";
    icmp_ln42_fu_426_p2 <= "1" when (unsigned(x_fu_414_p2) > unsigned(ap_const_lv16_C003)) else "0";
    icmp_ln44_fu_457_p2 <= "1" when (unsigned(x_reg_702) > unsigned(ap_const_lv16_9002)) else "0";
    icmp_ln46_fu_462_p2 <= "1" when (unsigned(x_reg_702) > unsigned(ap_const_lv16_6001)) else "0";
    icmp_ln48_fu_472_p2 <= "1" when (unsigned(x_reg_702) > unsigned(ap_const_lv16_3000)) else "0";
    icmp_ln68_fu_270_p2 <= "1" when (unsigned(add_ln68_fu_264_p2) < unsigned(ap_const_lv17_3FF)) else "0";
    icmp_ln75_fu_296_p2 <= "1" when (unsigned(add_ln75_fu_290_p2) < unsigned(zext_ln35_3_fu_229_p1)) else "0";
    jTwiddle_fu_205_p2 <= std_logic_vector(unsigned(ap_const_lv9_1) + unsigned(jTwiddle_0_reg_163));
    j_1_fu_308_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_fu_302_p2),16));
    j_2_fu_378_p3 <= 
        j_fu_280_p2 when (icmp_ln68_fu_270_p2(0) = '1') else 
        ap_const_lv16_0;
    j_3_fu_386_p3 <= 
        j_1_fu_308_p1 when (and_ln75_fu_332_p2(0) = '1') else 
        j_2_fu_378_p3;
    j_fu_280_p2 <= std_logic_vector(unsigned(j_0_reg_174) + unsigned(zext_ln70_fu_276_p1));
    omega_coeffs_address0 <= zext_ln33_fu_211_p1(10 - 1 downto 0);

    omega_coeffs_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            omega_coeffs_ce0 <= ap_const_logic_1;
        else 
            omega_coeffs_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    or_ln38_1_fu_561_p2 <= (and_ln44_fu_512_p2 or and_ln42_fu_496_p2);
    or_ln38_2_fu_580_p2 <= (icmp_ln48_fu_472_p2 or and_ln40_fu_477_p2);
    or_ln38_3_fu_594_p2 <= (or_ln38_fu_542_p2 or or_ln38_1_fu_561_p2);
    or_ln38_fu_542_p2 <= (xor_ln38_fu_452_p2 or and_ln46_fu_530_p2);
    or_ln40_fu_481_p2 <= (xor_ln38_fu_452_p2 or icmp_ln40_reg_714);
    or_ln42_fu_501_p2 <= (or_ln40_fu_481_p2 or icmp_ln42_reg_721);
    or_ln44_fu_518_p2 <= (or_ln42_fu_501_p2 or icmp_ln44_fu_457_p2);
    select_ln38_1_fu_548_p3 <= 
        ap_const_lv16_6FFD when (and_ln44_fu_512_p2(0) = '1') else 
        ap_const_lv16_3FFC;
    select_ln38_2_fu_567_p3 <= 
        ap_const_lv16_FFB when (and_ln40_fu_477_p2(0) = '1') else 
        ap_const_lv16_CFFF;
    select_ln38_3_fu_586_p3 <= 
        select_ln38_fu_536_p3 when (or_ln38_fu_542_p2(0) = '1') else 
        add_ln38_fu_556_p2;
    select_ln38_4_fu_600_p3 <= 
        add_ln38_1_fu_575_p2 when (or_ln38_2_fu_580_p2(0) = '1') else 
        x_reg_702;
    select_ln38_fu_536_p3 <= 
        x_1_fu_467_p2 when (tmp_1_reg_669(0) = '1') else 
        x_reg_702;
    select_ln68_fu_362_p3 <= 
        jTwiddle_fu_205_p2 when (icmp_ln68_fu_270_p2(0) = '1') else 
        ap_const_lv9_0;
    select_ln75_fu_370_p3 <= 
        ap_const_lv9_0 when (and_ln75_fu_332_p2(0) = '1') else 
        select_ln68_fu_362_p3;
    shl_ln_fu_252_p3 <= (distance_0_reg_141 & ap_const_lv1_0);
    start_1_fu_346_p3 <= 
        start_0_reg_152 when (icmp_ln68_fu_270_p2(0) = '1') else 
        ap_const_lv10_0;
    start_2_fu_354_p3 <= 
        start_fu_302_p2 when (and_ln75_fu_332_p2(0) = '1') else 
        start_1_fu_346_p3;
    start_fu_302_p2 <= std_logic_vector(unsigned(ap_const_lv10_1) + unsigned(start_0_reg_152));
    sub_ln53_fu_446_p2 <= std_logic_vector(unsigned(add_ln53_fu_440_p2) - unsigned(zext_ln53_2_fu_436_p1));
    temp_fu_398_p1 <= a_coeffs_q0(15 - 1 downto 0);
    tmp_fu_631_p4 <= add_ln59_fu_627_p2(31 downto 18);
    u_1_fu_619_p1 <= grp_mul_fu_185_ap_return(18 - 1 downto 0);
    x_1_fu_467_p2 <= std_logic_vector(signed(ap_const_lv16_9FFE) + signed(x_reg_702));
    x_2_fu_607_p3 <= 
        select_ln38_3_fu_586_p3 when (or_ln38_3_fu_594_p2(0) = '1') else 
        select_ln38_4_fu_600_p3;
    x_fu_414_p2 <= std_logic_vector(unsigned(zext_ln37_fu_406_p1) + unsigned(zext_ln37_1_fu_410_p1));
    xor_ln38_fu_452_p2 <= (tmp_1_reg_669 xor ap_const_lv1_1);
    xor_ln40_1_fu_486_p2 <= (icmp_ln40_reg_714 xor ap_const_lv1_1);
    xor_ln42_fu_506_p2 <= (or_ln42_fu_501_p2 xor ap_const_lv1_1);
    xor_ln44_fu_524_p2 <= (or_ln44_fu_518_p2 xor ap_const_lv1_1);
    xor_ln68_fu_326_p2 <= (icmp_ln68_fu_270_p2 xor ap_const_lv1_1);
    zext_ln33_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jTwiddle_0_reg_163),64));
    zext_ln34_fu_216_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_174),64));
    zext_ln35_1_fu_225_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(distance_0_reg_141),17));
    zext_ln35_2_fu_239_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln35_fu_233_p2),64));
    zext_ln35_3_fu_229_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(distance_0_reg_141),11));
    zext_ln35_fu_221_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_174),17));
    zext_ln37_1_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adistance_fu_402_p1),16));
    zext_ln37_fu_406_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_fu_398_p1),16));
    zext_ln53_1_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(temp_fu_398_p1),17));
    zext_ln53_2_fu_436_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(adistance_fu_402_p1),17));
    zext_ln53_fu_615_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(W_reg_697),32));
    zext_ln56_fu_623_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(u_1_reg_743),32));
    zext_ln68_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_252_p3),17));
    zext_ln70_fu_276_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_252_p3),16));
    zext_ln75_fu_286_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(start_0_reg_152),11));
end behav;
