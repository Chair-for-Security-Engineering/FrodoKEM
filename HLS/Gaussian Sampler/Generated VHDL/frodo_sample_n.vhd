-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2020.1
-- Copyright (C) 1986-2020 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity frodo_sample_n is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    out_r_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    out_r_ce0 : OUT STD_LOGIC;
    out_r_we0 : OUT STD_LOGIC;
    out_r_d0 : OUT STD_LOGIC_VECTOR (15 downto 0);
    s_address0 : OUT STD_LOGIC_VECTOR (12 downto 0);
    s_ce0 : OUT STD_LOGIC;
    s_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    n : IN STD_LOGIC_VECTOR (12 downto 0) );
end;


architecture behav of frodo_sample_n is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "frodo_sample_n,hls_ip_2020_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7a200t-fbg676-2,HLS_INPUT_CLOCK=8.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.249000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=180,HLS_SYN_LUT=390,HLS_VERSION=2020_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv13_0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000000";
    constant ap_const_lv13_1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv15_7F0D : STD_LOGIC_VECTOR (14 downto 0) := "111111100001101";
    constant ap_const_lv15_7FFA : STD_LOGIC_VECTOR (14 downto 0) := "111111111111010";
    constant ap_const_lv15_64F3 : STD_LOGIC_VECTOR (14 downto 0) := "110010011110011";
    constant ap_const_lv15_7FFF : STD_LOGIC_VECTOR (14 downto 0) := "111111111111111";
    constant ap_const_lv15_7FB1 : STD_LOGIC_VECTOR (14 downto 0) := "111111110110001";
    constant ap_const_lv15_79A9 : STD_LOGIC_VECTOR (14 downto 0) := "111100110101001";
    constant ap_const_lv15_3433 : STD_LOGIC_VECTOR (14 downto 0) := "011010000110011";
    constant ap_const_lv15_7FE9 : STD_LOGIC_VECTOR (14 downto 0) := "111111111101001";
    constant ap_const_lv15_7D67 : STD_LOGIC_VECTOR (14 downto 0) := "111110101100111";
    constant ap_const_lv15_722B : STD_LOGIC_VECTOR (14 downto 0) := "111001000101011";
    constant ap_const_lv15_5063 : STD_LOGIC_VECTOR (14 downto 0) := "101000001100011";
    constant ap_const_lv15_1223 : STD_LOGIC_VECTOR (14 downto 0) := "001001000100011";
    constant ap_const_lv4_C : STD_LOGIC_VECTOR (3 downto 0) := "1100";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_7 : STD_LOGIC_VECTOR (3 downto 0) := "0111";
    constant ap_const_lv4_6 : STD_LOGIC_VECTOR (3 downto 0) := "0110";
    constant ap_const_lv4_5 : STD_LOGIC_VECTOR (3 downto 0) := "0101";
    constant ap_const_lv4_4 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_const_lv4_3 : STD_LOGIC_VECTOR (3 downto 0) := "0011";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv4_8 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_0_reg_134 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln26_fu_145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_420 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln26_reg_420_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln26_reg_420_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_fu_150_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal zext_ln30_fu_156_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_429 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_429_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln30_reg_429_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal sign_fu_171_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_reg_439 : STD_LOGIC_VECTOR (0 downto 0);
    signal sign_reg_439_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_fu_175_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln34_reg_444 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_fu_181_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln36_reg_450 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln53_reg_456 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_fu_193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln38_reg_462 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_fu_199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln43_reg_467 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_fu_205_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln55_reg_473 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_fu_211_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln72_reg_479 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln45_reg_484 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_reg_489 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln64_reg_494 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln74_reg_499 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_fu_241_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln81_reg_504 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln43_1_fu_386_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln43_1_reg_509 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal prnd_fu_161_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal select_ln38_fu_247_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln36_fu_282_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln36_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln36_fu_297_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_fu_302_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln45_fu_254_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln36_fu_285_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln34_fu_315_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln53_fu_320_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_fu_261_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln43_fu_307_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln55_fu_338_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_1_fu_343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln64_fu_268_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_fu_330_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln53_fu_357_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln72_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln74_fu_275_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_1_fu_349_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal xor_ln43_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln43_1_fu_380_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln72_fu_367_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal zext_ln43_fu_394_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_fu_397_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal sample_1_fu_403_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_0_reg_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_fu_145_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_0_reg_134 <= i_fu_150_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_0_reg_134 <= ap_const_lv13_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln26_reg_420 <= icmp_ln26_fu_145_p2;
                icmp_ln26_reg_420_pp0_iter1_reg <= icmp_ln26_reg_420;
                    zext_ln30_reg_429_pp0_iter1_reg(12 downto 0) <= zext_ln30_reg_429(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                icmp_ln26_reg_420_pp0_iter2_reg <= icmp_ln26_reg_420_pp0_iter1_reg;
                sign_reg_439_pp0_iter2_reg <= sign_reg_439;
                    zext_ln30_reg_429_pp0_iter2_reg(12 downto 0) <= zext_ln30_reg_429_pp0_iter1_reg(12 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_reg_420 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln34_reg_444 <= icmp_ln34_fu_175_p2;
                icmp_ln36_reg_450 <= icmp_ln36_fu_181_p2;
                icmp_ln38_reg_462 <= icmp_ln38_fu_193_p2;
                icmp_ln43_reg_467 <= icmp_ln43_fu_199_p2;
                icmp_ln45_reg_484 <= icmp_ln45_fu_217_p2;
                icmp_ln53_reg_456 <= icmp_ln53_fu_187_p2;
                icmp_ln55_reg_473 <= icmp_ln55_fu_205_p2;
                icmp_ln57_reg_489 <= icmp_ln57_fu_223_p2;
                icmp_ln64_reg_494 <= icmp_ln64_fu_229_p2;
                icmp_ln72_reg_479 <= icmp_ln72_fu_211_p2;
                icmp_ln74_reg_499 <= icmp_ln74_fu_235_p2;
                icmp_ln81_reg_504 <= icmp_ln81_fu_241_p2;
                sign_reg_439 <= sign_fu_171_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln26_reg_420_pp0_iter1_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                select_ln43_1_reg_509 <= select_ln43_1_fu_386_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln26_fu_145_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                    zext_ln30_reg_429(12 downto 0) <= zext_ln30_fu_156_p1(12 downto 0);
            end if;
        end if;
    end process;
    zext_ln30_reg_429(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln30_reg_429_pp0_iter1_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";
    zext_ln30_reg_429_pp0_iter2_reg(63 downto 13) <= "000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, icmp_ln26_fu_145_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((icmp_ln26_fu_145_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((icmp_ln26_fu_145_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    and_ln36_fu_297_p2 <= (xor_ln36_fu_292_p2 and icmp_ln34_reg_444);
    and_ln43_1_fu_380_p2 <= (xor_ln43_fu_375_p2 and and_ln36_fu_297_p2);
    and_ln43_fu_302_p2 <= (icmp_ln43_reg_467 and and_ln36_fu_297_p2);
    and_ln53_fu_320_p2 <= (xor_ln34_fu_315_p2 and icmp_ln53_reg_456);
    and_ln55_1_fu_343_p2 <= (xor_ln55_fu_338_p2 and and_ln53_fu_320_p2);
    and_ln55_fu_325_p2 <= (icmp_ln55_reg_473 and and_ln53_fu_320_p2);
    and_ln72_fu_362_p2 <= (xor_ln53_fu_357_p2 and icmp_ln72_reg_479);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state6 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state2_assign_proc : process(icmp_ln26_fu_145_p2)
    begin
        if ((icmp_ln26_fu_145_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_150_p2 <= std_logic_vector(unsigned(i_0_reg_134) + unsigned(ap_const_lv13_1));
    icmp_ln26_fu_145_p2 <= "1" when (i_0_reg_134 = n) else "0";
    icmp_ln34_fu_175_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_7F0D)) else "0";
    icmp_ln36_fu_181_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_7FFA)) else "0";
    icmp_ln38_fu_193_p2 <= "1" when (prnd_fu_161_p4 = ap_const_lv15_7FFF) else "0";
    icmp_ln43_fu_199_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_7FB1)) else "0";
    icmp_ln45_fu_217_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_7FE9)) else "0";
    icmp_ln53_fu_187_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_64F3)) else "0";
    icmp_ln55_fu_205_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_79A9)) else "0";
    icmp_ln57_fu_223_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_7D67)) else "0";
    icmp_ln64_fu_229_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_722B)) else "0";
    icmp_ln72_fu_211_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_3433)) else "0";
    icmp_ln74_fu_235_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_5063)) else "0";
    icmp_ln81_fu_241_p2 <= "1" when (unsigned(prnd_fu_161_p4) > unsigned(ap_const_lv15_1223)) else "0";
    out_r_address0 <= zext_ln30_reg_429_pp0_iter2_reg(13 - 1 downto 0);

    out_r_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_r_ce0 <= ap_const_logic_1;
        else 
            out_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        out_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(sample_1_fu_403_p3),16));


    out_r_we0_assign_proc : process(ap_block_pp0_stage0_11001, icmp_ln26_reg_420_pp0_iter2_reg, ap_enable_reg_pp0_iter3)
    begin
        if (((icmp_ln26_reg_420_pp0_iter2_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then 
            out_r_we0 <= ap_const_logic_1;
        else 
            out_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    prnd_fu_161_p4 <= s_q0(15 downto 1);
    s_address0 <= zext_ln30_fu_156_p1(13 - 1 downto 0);

    s_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            s_ce0 <= ap_const_logic_1;
        else 
            s_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sample_1_fu_403_p3 <= 
        sample_fu_397_p2 when (sign_reg_439_pp0_iter2_reg(0) = '1') else 
        zext_ln43_fu_394_p1;
    sample_fu_397_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(zext_ln43_fu_394_p1));
    select_ln36_fu_285_p3 <= 
        select_ln38_fu_247_p3 when (icmp_ln36_reg_450(0) = '1') else 
        zext_ln36_fu_282_p1;
    select_ln38_fu_247_p3 <= 
        ap_const_lv4_C when (icmp_ln38_reg_462(0) = '1') else 
        ap_const_lv4_B;
    select_ln43_1_fu_386_p3 <= 
        ap_const_lv4_8 when (and_ln43_1_fu_380_p2(0) = '1') else 
        select_ln72_fu_367_p3;
    select_ln43_fu_307_p3 <= 
        select_ln45_fu_254_p3 when (and_ln43_fu_302_p2(0) = '1') else 
        select_ln36_fu_285_p3;
    select_ln45_fu_254_p3 <= 
        ap_const_lv4_A when (icmp_ln45_reg_484(0) = '1') else 
        ap_const_lv4_9;
    select_ln55_1_fu_349_p3 <= 
        select_ln64_fu_268_p3 when (and_ln55_1_fu_343_p2(0) = '1') else 
        select_ln55_fu_330_p3;
    select_ln55_fu_330_p3 <= 
        select_ln57_fu_261_p3 when (and_ln55_fu_325_p2(0) = '1') else 
        select_ln43_fu_307_p3;
    select_ln57_fu_261_p3 <= 
        ap_const_lv4_7 when (icmp_ln57_reg_489(0) = '1') else 
        ap_const_lv4_6;
    select_ln64_fu_268_p3 <= 
        ap_const_lv4_5 when (icmp_ln64_reg_494(0) = '1') else 
        ap_const_lv4_4;
    select_ln72_fu_367_p3 <= 
        select_ln74_fu_275_p3 when (and_ln72_fu_362_p2(0) = '1') else 
        select_ln55_1_fu_349_p3;
    select_ln74_fu_275_p3 <= 
        ap_const_lv4_3 when (icmp_ln74_reg_499(0) = '1') else 
        ap_const_lv4_2;
    sign_fu_171_p1 <= s_q0(1 - 1 downto 0);
    xor_ln34_fu_315_p2 <= (icmp_ln34_reg_444 xor ap_const_lv1_1);
    xor_ln36_fu_292_p2 <= (icmp_ln36_reg_450 xor ap_const_lv1_1);
    xor_ln43_fu_375_p2 <= (icmp_ln43_reg_467 xor ap_const_lv1_1);
    xor_ln53_fu_357_p2 <= (icmp_ln53_reg_456 xor ap_const_lv1_1);
    xor_ln55_fu_338_p2 <= (icmp_ln55_reg_473 xor ap_const_lv1_1);
    zext_ln30_fu_156_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_134),64));
    zext_ln36_fu_282_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(icmp_ln81_reg_504),4));
    zext_ln43_fu_394_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln43_1_reg_509),5));
end behav;
